<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/cindy/tmp/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">When and Why Your Code Starts to Smell Bad</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michele</forename><surname>Tufano</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">The College of William and Mary</orgName>
								<address>
									<settlement>Williamsburg</settlement>
									<region>VA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Fabio</forename><surname>Palomba</surname></persName>
							<affiliation key="aff1">
								<orgName type="institution">University of Salerno</orgName>
								<address>
									<settlement>Fisciano</settlement>
									<region>SA</region>
									<country key="IT">Italy</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gabriele</forename><surname>Bavota</surname></persName>
							<affiliation key="aff2">
								<orgName type="institution">University of Sannio</orgName>
								<address>
									<settlement>Benevento</settlement>
									<country key="IT">Italy</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rocco</forename><surname>Oliveto</surname></persName>
							<affiliation key="aff3">
								<orgName type="institution">University of Molise</orgName>
								<address>
									<settlement>Pesche</settlement>
									<region>IS</region>
									<country key="IT">Italy</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Massimiliano</forename><surname>Di Penta</surname></persName>
							<affiliation key="aff2">
								<orgName type="institution">University of Sannio</orgName>
								<address>
									<settlement>Benevento</settlement>
									<country key="IT">Italy</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andrea</forename><surname>De Lucia</surname></persName>
							<affiliation key="aff1">
								<orgName type="institution">University of Salerno</orgName>
								<address>
									<settlement>Fisciano</settlement>
									<region>SA</region>
									<country key="IT">Italy</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Denys</forename><surname>Poshyvanyk</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">The College of William and Mary</orgName>
								<address>
									<settlement>Williamsburg</settlement>
									<region>VA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">When and Why Your Code Starts to Smell Bad</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-01-31T12:45+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
				<p>In past and recent years, the issues related to managing technical debt received significant attention by researchers from both industry and academia. There are several factors that contribute to technical debt. One of these is represented by code bad smells, i.e., symptoms of poor design and implementation choices. While the repercussions of smells on code quality have been empirically assessed, there is still only anecdotal evidence on when and why bad smells are introduced. To fill this gap, we conducted a large empirical study over the change history of 200 open source projects from different software ecosystems and investigated when bad smells are introduced by developers, and the circumstances and reasons behind their introduction. Our study required the development of a strategy to identify smellintroducing commits, the mining of over 0.5M commits, and the manual analysis of 9,164 of them (i.e., those identified as smellintroducing). Our findings mostly contradict common wisdom stating that smells are being introduced during evolutionary tasks. In the light of our results, we also call for the need to develop a new generation of recommendation systems aimed at properly planning smell refactoring activities.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>I. INTRODUCTION</head><p>Technical debt is a metaphor introduced by Cunningham to indicate "not quite right code which we postpone making it right" <ref type="bibr" target="#b18">[18]</ref>. The metaphor explains well the trade-offs between delivering the most appropriate but still immature product, in the shortest time possible <ref type="bibr" target="#b11">[12]</ref>, <ref type="bibr" target="#b18">[18]</ref>, <ref type="bibr" target="#b27">[27]</ref>, <ref type="bibr" target="#b31">[31]</ref>, <ref type="bibr" target="#b43">[42]</ref>. While the repercussions of "technical debt" on software quality have been empirically proven, there is still a lack of empirical evidence related to how, when, and why various forms of technical debt occur in software projects <ref type="bibr" target="#b11">[12]</ref>. This represents an obstacle for an effective and efficient management of technical debt.</p><p>Bad code smells (shortly "code smells" or "smells"), i.e., symptoms of poor design and implementation choices <ref type="bibr" target="#b20">[20]</ref>, represent one important factor contributing to technical debt, and possibly affecting the maintainability of a software system <ref type="bibr" target="#b27">[27]</ref>. In the past and, most notably, in recent years, several studies investigated the relevance that code smells have for developers <ref type="bibr" target="#b36">[36]</ref>, <ref type="bibr" target="#b51">[50]</ref>, the extent to which code smells tend to remain in a software system for long periods of time <ref type="bibr" target="#b2">[3]</ref>, <ref type="bibr" target="#b14">[15]</ref>, <ref type="bibr" target="#b32">[32]</ref>, <ref type="bibr" target="#b41">[40]</ref>, as well as the side effects of code smells, such as increase in change-and fault-proneness <ref type="bibr" target="#b25">[25]</ref>, <ref type="bibr" target="#b26">[26]</ref> or decrease of software understandability <ref type="bibr" target="#b0">[1]</ref> and maintainability <ref type="bibr" target="#b44">[43]</ref>, <ref type="bibr" target="#b50">[49]</ref>, <ref type="bibr" target="#b49">[48]</ref>.</p><p>The research community has been also actively developing approaches and tools for detecting smells <ref type="bibr" target="#b10">[11]</ref>, <ref type="bibr" target="#b34">[34]</ref>, <ref type="bibr" target="#b37">[37]</ref>, <ref type="bibr" target="#b45">[44]</ref>, <ref type="bibr" target="#b33">[33]</ref>, and, whenever possible, triggering refactoring operations. Such tools rely on different types of analysis techniques, such as constraint-based reasoning over metric values <ref type="bibr" target="#b33">[33]</ref>, <ref type="bibr" target="#b34">[34]</ref>, static code analysis <ref type="bibr" target="#b45">[44]</ref>, or analysis of software changes <ref type="bibr" target="#b37">[37]</ref>. While these tools provide relatively accurate and complete identification of a wide variety of smells, most of them work by "taking a snapshot" of the system or by looking at recent changes, hence providing a snapshot-based recommendation to the developer. Hence, they do not consider the circumstances that could have caused the smell introduction. In order to better support developers in planning actions to improve design and source code quality, it is imperative to have a contextualized understanding of the circumstances under which particular smells occur.</p><p>However, to the best of our knowledge, there is no comprehensive empirical investigation into when and why code smells are introduced in software projects. Common wisdom suggests that urgent maintenance activities and pressure to deliver features while prioritizing time-to-market over code quality are often the causes of such smells. Generally speaking, software evolution has always been considered as one of the reasons behind "software aging" <ref type="bibr" target="#b39">[38]</ref> or "increasing complexity" <ref type="bibr" target="#b28">[28]</ref> <ref type="bibr" target="#b35">[35]</ref> <ref type="bibr" target="#b48">[47]</ref>. Broadly speaking, smells can also manifest themselves not only in the source code but also in software lexicons <ref type="bibr" target="#b29">[29]</ref>, <ref type="bibr" target="#b3">[4]</ref>, and can even affect other types of artifacts, such as spreadsheets <ref type="bibr" target="#b22">[22]</ref>, <ref type="bibr" target="#b23">[23]</ref> or test cases <ref type="bibr" target="#b8">[9]</ref>.</p><p>In this paper we fill the void in terms of our understanding of code smells, reporting the results of a large-scale empirical study conducted on the evolution history of 200 open source projects belonging to three software ecosystems, namely Android, Apache and Eclipse. The study aimed at investigating (i) when smells are introduced in software projects, and (ii) why they are introduced, i.e., under what circumstances smell introductions occur and who are the developers responsible for introducing smells. To address these research questions, we developed a metric-based methodology for analyzing the evolution of code entities in change histories of software projects to determine when code smells start manifesting themselves and whether this happens suddenly (i.e., because of a pressure to quickly introduce a change), or gradually (i.e., because of medium-to-long range design decisions). We mined over 0.5M commits and we manually analyzed 9,164 of them classified as smell-introducing. We are unaware of any published technical debt, in general, and code smell study, in particular, of comparable size. The results achieved allowed us to report quantitative and qualitative evidence on when and why smells are introduced in software projects as well as implications of these results, often contradicting common wisdom.  <ref type="table" target="#tab_0">Apache  100  4-5,052  1-1,031  207,997  3,486  6  1-15  Android  70  5-4,980  3-1,140  107,555  1,193  3  1-6  Eclipse  30 142-16,700 26-2,610  264,119  124  10  1-13  Overall  200  --579,671  4,803  6  1-15</ref> II. STUDY DESIGN The goal of the study is to analyze change history of software projects, with the purpose of investigating when code smells are introduced by developers, and the circumstances and reasons behind smell appearances. More specifically, the study aims at addressing the following two research questions:</p><p>• RQ 1 : When are code smells introduced? This research question aims at investigating to what extent the common wisdom suggesting that "code smells are introduced as a consequence of continuous maintenance and evolution activities" <ref type="bibr" target="#b20">[20]</ref> applies. Specifically, we study "when" code smells are introduced in software systems, to understand whether smells are introduced as soon as a code entity is created, whether smells are suddenly introduced in the context of specific maintenance activities, or whether, instead, smells appear "gradually" during software evolution. To this aim, we investigated the presence of possible trends in the history of code artifacts that characterize the introduction of specific types of smells. • RQ 2 : Why are code smells introduced? The second research question aims at empirically investigating under which circumstances developers are more prone to introducing code smells. We focus on factors that are indicated as possible causes for code smell introduction in the existing literature <ref type="bibr" target="#b20">[20]</ref>: the commit goal (e.g., is the developer implementing a new feature or fixing a bug?), the project status (e.g., is the change performed in proximity to a major release deadline?), and the developer status (e.g., is the developer a newcomer or a senior project member?).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Context Selection</head><p>The context of the study consists of the change history of 200 projects belonging to three software ecosystems, namely Android, Apache, and Eclipse. <ref type="table" target="#tab_0">Table I</ref> reports for each of them (i) the number of projects analyzed, (ii) size ranges in terms of the number of classes and KLOC, (iii) the overall number of commits and issues analyzed, and (iv) the average, minimum, and maximum length of the projects' story (in years) analyzed in each ecosystem. All the analyzed projects are hosted in Git repositories and have associated issue trackers. The Android ecosystem contains a random selection of 70 open source apps mined from the f-droid 1 forge. The Apache ecosystem consists of 100 Java projects randomly selected among those available 2 . Finally, the Eclipse ecosystem consists of 30 projects randomly mined from the list of GitHub repositories managed by the Eclipse Foundation <ref type="bibr" target="#b2">3</ref> . The choice of the ecosystems to analyze is not random, but rather driven by the motivation to consider projects having (i) different sizes, e.g., Android apps are by their nature smaller than projects in Apache's and Eclipse's ecosystems, (ii) different architectures, e.g., we have Android mobile apps, Apache libraries, and plug-in based architectures in Eclipse projects, and (iii) different development bases, e.g., Android apps are often developed by small teams whereas several Apache projects are carried out by dozens of developers <ref type="bibr" target="#b6">[7]</ref>. Also, we limited our study to 200 projects since, as it will be shown later, the analysis we carried out is not only computationally expensive, but also requires manual analysis of thousands of data points. To sum up, we mined 579,671 commits and 4,803 issues.</p><p>We focus our study on the following types of smells: 1) Blob Class: a large class with different responsibilities that monopolizes most of the system's processing <ref type="bibr" target="#b12">[13]</ref>. 2) Class Data Should be Private: a class exposing its attributes, violating the information hiding principle <ref type="bibr" target="#b20">[20]</ref>. 3) Complex Class: a class having a high cyclomatic complexity <ref type="bibr" target="#b12">[13]</ref>. 4) Functional Decomposition: a class where inheritance and polymorphism are poorly used, declaring many private fields and implementing few methods <ref type="bibr" target="#b12">[13]</ref>. 5) Spaghetti Code: a class without structure that declares long methods without parameters <ref type="bibr" target="#b12">[13]</ref>. While several other smells exist in literature <ref type="bibr" target="#b12">[13]</ref>, <ref type="bibr" target="#b20">[20]</ref>, we needed to limit our analysis to a subset due to computational constraints. However, we carefully kept a mix of smells related to complex/large code components (e.g., Blob Class, Complex Class) as well as smells related to the lack of adoption of good Object-Oriented coding practices (e.g., Class Data Should be Private, Functional Decomposition). Thus, the smells considered are representative of categories of smells investigated in previous studies (see Section V).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Data Extraction and Analysis</head><p>This subsection describes the data extraction and analysis process that we followed to answer our research questions. 1) When are code smells introduced?: To answer RQ 1 we firstly cloned the 200 Git repositories. Then, we analyzed each repository r i using a tool that we developed (named as HistoryMiner), with the purpose of identifying smellintroducing commits. Our tool mines the entire change history of r i , checks out each commit in chronological order, and runs an implementation of the DECOR smell detector based on the original rules defined by Moha et al. <ref type="bibr" target="#b34">[34]</ref>. DECOR identifies smells using detection rules based on the values of internal quality metrics <ref type="bibr" target="#b3">4</ref> . The choice of using DECOR was driven by the fact that (i) it is a state-of-the-art smell detector having a high accuracy in detecting smells <ref type="bibr" target="#b34">[34]</ref>; and (ii) it applies simple detection rules that allow it to be very efficient. Note that we ran DECOR on all source code files contained in r i only for the first commit of r i . In the subsequent commits The number of lines of code excluding white spaces and comments Weighted Methods per Class (WMC) <ref type="bibr" target="#b16">[16]</ref> The complexity of a class as the sum of the McCabes cyclomatic complexity of its methods Response for a Class (RFC) <ref type="bibr" target="#b16">[16]</ref> The number of distinct methods and constructors invoked by a class Coupling Between Object (CBO) <ref type="bibr" target="#b16">[16]</ref> The number of classes to which a class is coupled Lack of COhesion of Methods (LCOM) <ref type="bibr" target="#b16">[16]</ref> The higher the pairs of methods in a class sharing at least a field, the higher its cohesion Number of Attributes (NOA)</p><p>The number of attributes in a class Number of Methods (NOM)</p><p>The number of methods in a class DECOR has been executed only on code files added and modified in each specific commit to save computational time.</p><p>As an output, our tool produces, for each source code file f j ∈ r i the list of commits in which f j has been involved, specifying if f j has been added, deleted, or modified and if f j was affected, in that specific commit, by one of the five considered smells.</p><p>Starting from the data generated by the HistoryMiner we compute, for each type of smell (smell k ) and for each source code file (f j ), the number of commits performed on f j since the first commit involving f j and adding the file to the repository, up to the commit in which DECOR detects that f j as affected by smell k . Clearly, such numbers are only computed for files identified as affected by the specific smell k .</p><p>When analyzing the number of commits needed for a smell to affect a code component, we can fall into two possible scenarios. In the first scenario (the least expected according to the "software aging" theory <ref type="bibr" target="#b39">[38]</ref>) smell instances are introduced during the creation of source code artifacts, i.e., in the first commit involving a source code file. In the second scenario, smell instances are introduced after several commits and, thus as result of multiple maintenance activities. For the latter scenario, besides running the DECOR smell detector for the project snapshot related to each commit, the HistoryMiner also computes, for each snapshot and for each source code artifact, a set of quality metrics (see <ref type="table" target="#tab_0">Table II</ref>). As done for DECOR, quality metrics are computed for all code artifacts only during the first commit, and updated at each subsequent commit for added and modified files. The purpose of this analysis is to understand whether the trend followed by such metrics differ between files affected by a specific type of smell and files not affected by such a smell. For example, we expect that classes becoming Blobs will exhibit a higher growth rate than classes that are not going to become <ref type="bibr">Blobs.</ref> In order to analyze the evolution of the quality metrics, we needed to identify the function that best approximates the data distribution, i.e., the values of the considered metrics computed in a sequence of commits. We found that the best model is the linear function (more details are available in our technical report <ref type="bibr" target="#b46">[45]</ref>). Having identified the model to be used, we computed, for each file f j ∈ r i , the regression line of its quality metric values. If file f j is affected by a specific smell k , we compute the regression line considering the quality metric values computed for each commit involving f j from the first commit (i.e., where the file was added to the versioning system) to the commit where the instance of smell k was detected in f j . Instead, if f j is not affected by any smell, we considered only the first n th commits involving the file f j , where n is the average number of commits required by smell k to affect code instances. Then, for each metric reported in <ref type="table" target="#tab_0">Table II</ref>, we compared the distributions of regression line slopes for cleanly and smelly files. The comparison is performed using a two-tailed Mann-Whitney U test <ref type="bibr" target="#b17">[17]</ref>. The results are intended as statistically significant at α = 0.05. We also estimated the magnitude of the observed differences using the Cliff's Delta (or d), a non-parametric effect size measure <ref type="bibr" target="#b21">[21]</ref> for ordinal data. We followed the guidelines in <ref type="bibr" target="#b21">[21]</ref> to interpret the effect size values: small for d &lt; 0.33 (positive as well as negative values), medium for 0.33 ≤ d &lt; 0.474 and large for d ≥ 0.474.</p><p>Overall, the data extraction for RQ 1 (i.e., the smells detection and metric computation at each commit for the 200 systems) took eight weeks on a Linux server having 7 quadcore 2.67 GHz CPU (28 cores) and 24 Gb of RAM.</p><p>2) Why are code smells introduced?: One challenge arising when answering RQ 2 is represented by the identification of the specific commit (or also possibly a set of commits) where the smell has been introduced (from now on referred to as a smellintroducing commit). Such information is crucial to explain under which circumstances these commits were performed. A trivial solution would have been to use the results of our RQ 1 and consider the commit c s in which DECOR detects for the first time a smell instance smell k in a source code file f j as a commit-introducing smell in f j . However, while this solution would work for smell instances that are introduced in the first commit involving f j (there is no doubt on the commit that introduced the smell), it would not work for smell instances that are the consequence of several changes, performed in n different commits involving f j . In such a circumstance, on one hand, we cannot simply assume that the first commit in which DECOR identifies the smell is the one introducing that smell, because the smell appearance might be the result of several small changes performed across the n commits. On the other hand, we cannot assume that all n commits performed on f j are those (gradually) introducing the smell, since just some of them might have pushed f j toward a smelly direction. Thus, to identify the smell-introducing commits for a file f j affected by an instance of a specific smell (smell k ), we designed the following heuristic:</p><p>• if smell k has been introduced in the commit c 1 where f j has been added to the repository, then c 1 is the smellintroducing commit; • else given C = {c 1 , c 2 , . . . , c n } the set of commits involving f j and leading to the detection of smell k in c n we use the results of RQ 1 to select the set of quality metrics M allowing to discriminate between the groups of files that are affected and not affected in their history by smell k . These metrics are those for which we found statistically significant difference between the slope of the regression lines for the two groups of files accompanied by at least a medium effect size. Let s be the slope of the regression line for the metric m ∈ M built when considering all commits leading f j to become affected by a smell and s i the slope of the regression line for the metric m built when considering just two subsequent commits, i.e., c i−1 and c i for each i ∈ [2, ..., n]. A commit c i ∈ C is considered as a smell-introducing commit if |s i | &gt; |s|, i.e., the commit c i significantly contributes to the increment (or decrement) of the metric m. <ref type="figure">Fig. 1</ref> reports an example aimed at illustrating the smellintroducing commit identification for a file f j . Suppose that f j has been involved in eight commits (from c 1 to c 8 ), and that in c 8 a Blob instance has been identified by DECOR in f j . Also, suppose that the results of our RQ 1 showed that the LOC metric is the only one "characterizing" the Blob introduction, i.e., the slope of the LOC regression line for Blobs is significantly different than the one of the regression line built for classes which are not affected by the Blob smell. The black line in <ref type="figure">Fig. 1</ref> represents the LOC regression line computed among all the involved commits, having a slope of 1.3. The gray lines represent the regression lines between pairs of commits (c i−1 , c i ) where c i is not classified as a smellintroducing commit (their slope is lower than 1.3). Finally, the red-dashed lines represent the regression lines between pairs of commits (c i−1 , c i ) where c i is classified as a smell-introducing commit (their slope is higher than 1.3). Thus, the smellintroducing commits in the example depicted in <ref type="figure">Fig. 1</ref> are: c 3 , c 5 , and c 7 . Overall, we obtained 9,164 smell-introducing commits in the 200 systems, that we used to answer RQ 2 .</p><p>After having identified smell-introducing commits, with the purpose of understanding why a smell was introduced in a project, we classified them by assigning to each commit one or more tags among those reported in <ref type="table" target="#tab_0">Table III</ref>. The first set of tags (i.e., commit goal tags) aims at explaining what the developer was doing when introducing the smell.</p><p>To assign such tags we firstly downloaded the issues for all 200 projects from their JIRA or BUGZILLA issue trackers. Then, we checked whether any of the 9,164 smell-introducing commits were related to any of the collected issues. To link issues to commits we used (and complemented) two existing approaches. The first one is the regular expression-based approach by Fischer et al. <ref type="bibr" target="#b19">[19]</ref> matching the issue ID in the commit note. The second one is a re-implementation of the ReLink approach proposed by Wu et al. <ref type="bibr" target="#b47">[46]</ref>, which considers the following constraints: (i) matching the committer/authors with issue tracking contributor name/email; (ii) the time interval between the commit and the last comment posted by the same author/contributor on the issue tracker must be less than seven days; and (iii) Vector Space Model (VSM) <ref type="bibr" target="#b5">[6]</ref> cosine similarity between the commit note and the last comment referred above greater than 0.7. RELINK has been shown to accurately link issues and commits (89% for precision and 78% for recall) <ref type="bibr" target="#b47">[46]</ref>. When it was possible to identify a link between one of the smell-introducing commits and an issue, and the issue type was one of the goal-tags in our design (i.e., bug, enhancement, or new feature), such tag was automatically assigned to the commit and its correctness was double checked by one of the authors, which verified the correctness of the issue category (e.g., that an issue classified as bug actually was a bug). This happens in 471 cases, i.e., for a small percentage (5%) of the commits, which is not surprising and in agreement with previous findings <ref type="bibr" target="#b4">[5]</ref>. In the remaining 8,693 cases, two of the authors manually analyzed the commits, assigning one or more of the goal-tags by relying on the analysis of the commit message and of the unix diff between the commit under analysis and its predecessor.</p><p>Concerning the project-status tags (see <ref type="table" target="#tab_0">Table III</ref>), the Working on release tag can assume as possible values one day, one week, one month, or more than one month before issuing of a major release. The aim of such a tag is to indicate whether, when introducing the smell, the developer was close to a project's deadline. We just consider major releases since those are the ones generally representing a real deadline for developers, while minor releases are sometimes issued just due to a single bug fix. To assign such tags, one of the authors identified the dates in which the major releases were issued by exploiting the GIT tags (often used to tag releases), and the commit messages left by developers. Concerning the Project startup tag, it can assume as values one week, one month, one year, or more than one year after the project's start date. This tag can be easily assigned by comparing the commit date with the date in which the project started (i.e., the date of the first commit). This tag can be useful to verify whether during the project's startup, when the project design might not be fully clear, developers are more prone to introducing smells. Note that the Project startup tag can be affected by the presence of projects migrated to git and with a partially available history. For this reason we checked whether the first release tagged in the versioning system were either 0.1 or 1.0 (note that this might be an approximation since projects starting from 1.0 could have a previous 0.x history). As a result, we excluded from the Project startup analysis 31 projects, for a total of 552 smell-introducing commits.</p><p>Finally, we assigned developer-status tags to smellintroducing commits. The Workload tag measures how busy a developer was when introducing the bad smell. In particular, we measured the Workload of each developer involved in a project using time windows of one month, starting from the date in which the developer joined the project (i.e., performed the first commit). The Workload of a developer during one month is measured in terms of the number of commits she performed in that month. We are aware that such a measure (i) is approximated because different commits can require different amount of work; and (ii) a developer could also work on other projects. When analyzing a smell-introducing commit performed by a developer d during a month m, we computed the workload distribution for all developers of the project at m. Then, given Q 1 and Q 3 , the first and the third quartile of such distribution, respectively, we assigned: low as Workload tag if the developer performing the commit had a workload less than Q 1 , medium if Q 1 ≤ workload &lt; Q 3 , high if the workload was higher than Q 3 .</p><p>The Ownership tag is assigned if the developer performing the smell-introducing commit is the owner of the file on which the smell has been detected. As defined by Bird et al. <ref type="bibr" target="#b9">[10]</ref>, a file owner is a developer responsible for more than 75% of the commits performed on the file. Lastly, the Newcomer tag is assigned if the smell-introducing commit falls among the first 3 commits in the project for the developer performing it.</p><p>After assigning all the described tags to each of the 9,164 smell-introducing commits, we analyzed the results by reporting descriptive statistics of the number of commits to which each tag type had been assigned. Also, we discuss several qualitative examples helping to explain our findings. </p><formula xml:id="formula_0">• • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • Blob Android 0 CDSBP CC FD SC 25 50 75 100 • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • Blob Eclipse 0 CDSBP CC FD SC 25 50 75 100 • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • Blob Apache 0 CDSBP CC FD SC 25 50 75 100 • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • Blob Overall</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>III. ANALYSIS OF THE RESULTS</head><p>This section reports the analysis of the results achieved aiming at answering our two research questions.</p><p>A. When are code smells introduced? <ref type="figure" target="#fig_0">Fig. 2</ref> shows the distribution of the number of commits required by each type of smell to manifest itself. The results are grouped by ecosystems; also, we report the Overall results (all ecosystems together). As we can observe in <ref type="figure" target="#fig_0">Fig. 2</ref>, in almost all cases the median number of commits needed by a smell to affect code components is zero, except for Blob on Android (median=3) and Complex Class on Eclipse (median=1). In other words, most of the smell instances (at least half of them) are introduced when a code entity is added to the versioning system. This is quite a surprising finding, considering the common wisdom that smells are generally the result of continuous maintenance activities <ref type="bibr" target="#b20">[20]</ref>.</p><p>However, the analysis of the box plots also reveals (i) the presence of several outliers; and that (ii) for some smells, in particular Blob and Complex Class, the distribution is quite skewed. This means that besides smell instances introduced in the first commit, there are also several smell instances that are introduced as a result of several changes performed on the file during its evolution. In order to better understand such phenomenon, we analyzed how the values of some quality metrics change during the evolution of such files. <ref type="table" target="#tab_10">Table V</ref> presents the descriptive statistics (mean and median) of the slope of the regression line computed, for each metric, for both smelly and clean files. Also, <ref type="table" target="#tab_10">Table V</ref> reports the results of the Mann-Whitney test and Cliff's d effect size (Large, Medium, or Small) obtained when analyzing the difference between the slope of regression lines for clean and smelly files. Column cmp of <ref type="table" target="#tab_10">Table V</ref> shows a ↑ (↓) if for the metric m there is a statistically significant difference in the m's slope between the two groups of files, with the smelly ones exhibiting a higher (lower) slope; a "−" is shown when the difference is not statistically significant.</p><p>The analysis of the results reveals that for all the smells, but Functional Decomposition, the files affected by smells show a higher slope than clean files. This suggests that the files that will be affected by a smell exhibit a steeper growth in terms     </p><formula xml:id="formula_1">↑ 0.38 (M) ↑ 0.53 (L) ↑ 0.64 (L) ↑ 0.66 (L) ↑ 0.51 (L) ↑ 0.</formula><formula xml:id="formula_2">↓ -0.49 (L) ↓ -0.59 (L) ↓ -0.42 (M) ↓ 0.32 (S) - -0.76 (L) ↓ -0.45 (M) ↓<label>NO</label></formula><formula xml:id="formula_3">Cliff's d 0.81 (L) ↑ 0.70 (L) ↑ 0.83 (L) ↑ 0.74 (L) ↑ 0.53 (L) ↑ 0.82 (L) ↑ 0.</formula><formula xml:id="formula_4">↓ -0.46 (M) ↓ -0.66 (L) ↓ -0.49 (L) ↓ -0.14 (N) ↓ -0.67 (L) ↓ -0.</formula><formula xml:id="formula_5">Overall SC Cliff's d 0.93 (L) ↑ 0.52 (L) ↑ 0.66 (L) ↑ 0.52 (L) ↑ 0.06 (N) - 0.59 (L) ↑ 0.67 (L) ↑</formula><p>of metric values than files that are not becoming smelly. In other words, when a smell is going to appear, its symptoms (metric value increases) occur very fast, and not gradually. (the higher the LCOM, the lower the class cohesion). For the overall dataset, the slope for classes that will become Blobs is 849.90 as compared to the 0.25 of clean classes. Thus, while the cohesion of classes generally decreases over time, classes destined to become Blobs exhibit cohesion metric loss orders of magnitude faster than clean classes. In general, the results in <ref type="table" target="#tab_10">Table V</ref> show strong differences in the metrics' slope between clean and smelly files, indicating that it could be possible to create recommenders warning developers when the changes performed on a specific code component show a dangerous trend that could lead to the introduction of a bad smell.</p><p>The Functional Decomposition (FD) smell deserves a separate discussion. As we can see in <ref type="table" target="#tab_10">Table V</ref>, the slope of the regression line for files affected by such a smell is negative. This means that during the evolution of files affected by Functional Decomposition we can observe a decrement (rather than an increment) of the metric values. The rationale behind such a result is intrinsic in the definition of this smell. Specifically, one of the symptoms of such a smell is represented by a class with a single action, such as a function. Thus, the changes that could introduce a Functional Decomposition might be the removal of responsibilities (i.e., methods). This clearly results in the decrease of some metrics, such as NOM, LOC and WMC. As an example, let us consider the class DisplayKMeans of Apache Mahout. The class implemented the K-means clustering algorithm in its original form. However, after three commits the only operation performed by the class was the visualization of the clusters. Indeed, developers moved the actual implementation of the clustering algorithm in the class Job of the package kmeans, introducing a Functional Decomposition in DisplayKMeans.</p><p>Overall, from the analysis of <ref type="table" target="#tab_10">Table V</ref> we can conclude that (i) LOC characterizes the introduction of all the smells; (ii) LCOM, WMC, RFC and NOM characterize all the smells but Class Data Should be Private; (iii) CBO does not characterize the introduction of any smell; and (iv) the only metrics characterizing the introduction of Class Data Should be Private are LOC and NOA. Summary for RQ 1 . Most of the smell instances are introduced when files are created. However, there are also cases, especially for Blob and Complex Class, where the smells manifest themselves after several changes performed on the file. In these cases, files that will become smelly exhibit specific trends for some quality metric values that are significantly different than those of clean files.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Why are code smells introduced?</head><p>To answer RQ 2 , we analyze the percentage of smellintroducing commits classified according to the category of tags, i.e.,commit goal, project status, and developer status. Commit-Goal: <ref type="table" target="#tab_0">Table VII</ref> reports the percentage of smellintroducing commits assigned to each tag of the category commit-goal. Among the three different ecosystems analyzed, results show that smell instances are mainly introduced when developers perform enhancement operations on the system. When considering the three ecosystems altogether, for all the considered types of smells the percentage of smell-introducing commits tagged as enhancement ranges between 60% and 66%. Note that by enhancement we mean changes applied by developers on existing features aimed at improving them. For example, a Functional Decomposition was introduced in the class CreateProjectFromArchetypeMojo of Apache Maven when the developer performed the "first pass at implementing the feature of being able to specify additional goals that can be run after the creation of a project from an archetype" (as reported in the commit log).</p><p>Note that when considering both enhancement or new feature the percentage of smell-introducing commits exceeds, on average, 80%. This indicates, as expected, that the most smellprone activities are performed by developers when adding  <ref type="table" target="#tab_10">Overall  BF  E  NF  R  BF  E  NF  R  BF  E  NF R  BF  E  NF  R  Blob      5         14     CDSP  11  52  30  7  6  63  30  1  14  64  18  4  10  60  26  4  CC  0  44                FD  8  48  39  5  16  67  14  3  18  52  24  6  16  60  20  4  SC  0   100           6  66</ref> new features or improving existing features. However, there is also a non-negligible number of smell-introducing commits tagged as bug fixing (between 6% and 16%). This means that also during corrective maintenance developers might introduce a smell, especially when the bug fixing is complex and requires changes to several code entities. For example, the class SecuredModel of Apache Jena builds the security model when a semantic Web operation is requested by the user. In order to fix a bug that did not allow the user to perform a safe authentication, the developer had to update the model, implementing more security controls. This required changing several methods present in the class (10 out of 34). Such changes increase the whole complexity of the class (the WMC metric increased from 29 to 73) making SecuredModel a Complex Class. Another interesting observation from the results reported in <ref type="table" target="#tab_0">Table VII</ref> is related to the number of smell-introducing commits tagged as refactoring (between 4% and 11%). While refactoring is the principal treatment to remove smells, we found 394 cases in which developers introduced new smells when performing refactoring operations. For example, the class EC2ImageExtension of Apache jClouds implements the ImageExtension interface, which provides the methods for creating an image. During the evolution, developers added methods for building a new image template as well as a method for managing image layout options (e.g., its alignment) in the EC2ImageExtension class. Subsequently, a developer performed an Extract Class refactoring operation aimed at reorganizing the responsibility of the class. Indeed, the developer split the original class into two new classes, i.e., ImageTemplateImpl and CreateImageOptions. However, the developer also introduced a Functional Decomposition in the class CreateImageOptions since such a class, after the refactoring, contains just one method, i.e., the one in charge of managing the image options. This result sheds light on the dark side of refactoring; besides the risk of introducing faults <ref type="bibr" target="#b7">[8]</ref>, when performing refactoring operations, there is also the risk of introducing design problems.</p><p>Looking into the ecosystems, the general trend discussed so far holds for Apache and Eclipse. Regarding Android, we notice something different for Complex Class and Spaghetti Code smells. In these cases, the smell-introducing commits are mainly due to the introduction of new features. Such a difference could be due to the particular development model used for Android apps. Specifically, we manually analyzed the instances of smells identified in the 70 Android apps, and we observed that in the majority of cases classes affected by a smell are those extending the Android Activity class, i.e., a class extended by developers to provide features to the app's users.  Specifically, we observed that quite often developers introduce a Complex Class or a Spaghetti Code smell when adding a new feature to their apps by extending the Activity class. For example, the class ArticleViewActivity of the Aard 5 app became a Complex Class after the addition of several new features (spread across 50 commits after its creation), such as the management of page buttons and online visualization of the article. All these changes contributed to increase the slope of the regression line for the RFC metric of a factor of 3.91 and for WMC of a factor of 2.78. Project status: <ref type="table" target="#tab_0">Table VIII</ref> reports the percentage of smellintroducing commits assigned to each tag of the category project-status. As expected, most of the smells are introduced the last month before issuing a release. Indeed, the percentage of smells introduced more than one month prior to issuing <ref type="bibr" target="#b4">5</ref> Aard is an offline Wikipedia reader. a release is really low (ranging between 0% and 11%). This  <ref type="table" target="#tab_0">Blob   55   73  27  4  96  CDSP  79  10  11  81  19  11  89  Android  CC  53  47  0  100  0  6  94  FD  68  29  3  100  0  8  92  SC  100  0  0  100  0  100  0  Blob         CDSP         Apache  CC         FD    3  71  29  7  93  SC  79  21  0  100  0  40</ref>  consideration holds for all the ecosystems and for all the bad smells analyzed, thus confirming the common wisdom that the deadline pressure on developers can be one of the main causes for smell introduction.</p><p>Considering the project startup tag, the results are quite unexpected. Indeed, a high number of smell instances are introduced few months after the project startup. This is particularly true for Blob, Class Data Should Be Private, and Complex Class, where more than half of the instances are introduced in the first year of system's lifecycle. Instead, Functional Decomposition, and especially Spaghetti Code, seem to be the types of smells that take more time to manifest themselves with more than 75% of Spaghetti Code instances introduced after the first year. This result contradicts, at least in part, the common wisdom that smells are introduced after several continuous maintenance activities and, thus, are more pertinent to advanced phases of the development process <ref type="bibr" target="#b20">[20]</ref>, <ref type="bibr" target="#b39">[38]</ref>. Developer status: Finally, <ref type="table" target="#tab_0">Table IX</ref> reports the percentage of smell-introducing commits assigned to each tag of the category developer-status. From the analysis of the results it is evident that the developers' workload negatively influences the quality of the source code produced. On the overall dataset, at least in 55% of cases the developer who introduces the smell has a high workload. For example, on the InvokerMavenExecutor class in Apache Maven a developer introduced a Blob smell while adding the command line parsing to enable users alternate the settings. When performing such a change, the developer had relatively high workload while working on nine other different classes (in this case, the workload was classified as high).</p><p>We can also observe that generally the developers who introduce a smell are not newcomers while often they are owners of the files. At the first glance, this could look like an unexpected result. The owner of the file-one of the most experienced developers of the file-is the one that has the higher likelihood of introducing a smell. However, as also discussed by Zeller in his book Why programs fail, more experienced developers tend to perform more complex and critical tasks <ref type="bibr" target="#b52">[51]</ref>. Thus, it is likely that their commits are more prone to introducing design problems.</p><p>Summary for RQ 2 . Smells are generally introduced by developers when enhancing existing features or implementing new ones. As expected, smells are generally introduced in the last month before issuing a deadline, while there is a considerable number of instances introduced in the first year from the project startup. Finally, developers that introduce smells are generally the owners of the file and they are more prone to introducing smells when they have higher workloads.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>IV. THREATS TO VALIDITY</head><p>The main threats related to the relationship between theory and observation (construct validity) are due to imprecisions/errors in the measurements we performed. Above all, we relied on DECOR rules to detect smells. Notice that our re-implementation uses the exact rules defined by Moha et al. <ref type="bibr" target="#b34">[34]</ref>, and has been already used in our previous work <ref type="bibr" target="#b37">[37]</ref>. Nevertheless, we are aware that our results can be affected by the presence of false positives and false negatives. Moha et al. reported for DECOR a precision above 60% and a recall of 100% on Xerces 2.7.0. As for the precision, other than relying on Moha et al. assessment, we have manually validated a subset of the 4,627 detected smell instances. This manual validation has been performed by two authors independently, and cases of disagreement were discussed. In total, 1,107 smells were validated, including 241 Blob instances, 317 Class Data Should Be Private, 166 Complex Class, 65 Spaghetti Code, and 318 Functional Decomposition. Such a (stratified) sample is deemed to be statistically significant for a 95% confidence level and ±10% confidence interval <ref type="bibr" target="#b42">[41]</ref>. The results of the manual validation indicated a mean precision of 73%, and specifically 79% for Blob, 62% for Class Data Should Be Private, 74% for Complex Class, 82% for Spaghetti Code, and 70% for Functional Decomposition. In addition, we replicated all the analysis performed to answer our two research questions by just considering the smell-introducing commits (2,555) involving smell instances that have been manually validated as true positives. The results achieved in this analysis (available in our replication package <ref type="bibr" target="#b46">[45]</ref>) are perfectly inline with those obtained in our paper on the complete set of 9,164 smell-introducing commits, confirming all our findings. Finally, we are aware that our study can also suffer from presence of false negatives. However, (i) the sample of investigated smell instances is pretty large (4,627 instances), and (ii) the DECOR's claimed recall is very high.</p><p>As explained in Section II, the heuristic for excluding projects with incomplete history from the Project startup analysis may have failed to discard some projects. Also, we excluded the first commit from a project's history involving Java files from the analysis of smell-introducing commits, because such commits are likely to be imports from old versioning systems, and, therefore, we only focused our attention (in terms of first commit) on the addition of new files during the observed history period. Concerning the tags used to characterize smell-introducing changes, the commit classification was performed by two different authors and results were compared and discussed in cases of inconsistencies. Also, a second check was performed for those commits linked to issues (only 471 out of 9,164 commits), to avoid problems due to incorrect issue classification <ref type="bibr" target="#b1">[2]</ref>, <ref type="bibr" target="#b24">[24]</ref>.</p><p>The analysis of developer-related tags was performed using the Git author information instead of relying on committers (not all authors have commit privileges in open source projects, hence observing committers would give an imprecise and partial view of the reality). However, there is no guarantee that the reported authorship is always accurate and complete. We are aware that the Workload tag measures the developers' activity within a single project, while in principle one could be busy on other projects or different other activities. One possibility to mitigate such a threat could have been to measure the workload of a developer within the entire ecosystem. However, in our opinion, this would have introduced some bias, i.e., assigning a high workload to developers working on several projects of the same ecosystem and a low workload to those that, while not working on other projects of the same ecosystem, could have been busy on projects outside the ecosystem. It is also important to point out that, in terms of relationship between Workload tag and smell introduction, we obtained consistent results across three ecosystems, which at least mitigates the presence of a possible threat. Also, estimating the Workload by just counting commits is an approximation. However, we do not use the commit size because there might be a small commit requiring a substantial effort as well.</p><p>As for the threats that could have influenced the results (internal validity), we performed the study by comparing classes affected (and not) by a specific type of smell. However, there can be also cases of classes affected by different types of smells at the same time. Our investigation revealed that such classes represent a minority (3% for Android, 5% for Apache, and 9% for Eclipse), and, therefore, the interaction between different types of smells is not particularly interesting to investigate, given also the complexity it would have added to the study design and to its presentation. Finally, while in RQ 2 we studied tags related to different aspects of a software project lifetime-characterizing commits, developers, and the project status itself-we are aware that there could be many other factors that could have influenced the introduction of smells. In any case, it is worth noting that it is beyond the scope of this work to make any claims related to causation of the relationship between the introduction of smells and product or process factors characterizing a software project.</p><p>The main threats related to the relationship between the treatment and the outcome (conclusion validity) are represented by the analysis method exploited in our study. In RQ 1 , we used non-parametric tests (Mann-Whitney) and effect size measures (Cliff's Delta), as well as regression analysis. Results of RQ are, instead, reported in terms of descriptive statistics and analyzed from purely observational point of view.</p><p>Finally, regarding the generalization of our findings (external validity) this is, to the best of our knowledge, the largest study-in terms of number of projects (200)-concerning the analysis of code smells and of their evolution. However, we are aware that we limited our attention to only five types of smells. As explained in Section II, this choice is justified by the need for limiting the computation since we wanted to analyze a large number of projects. Also, we tried to diversify the types of smells including smells representing violations of OO principles and "size-related" smells. Last, but not least, we made sure to include smells-such as Complex Class, Blob, and Spaghetti Code-that previous studies indicated to be perceived by developers as severe problems <ref type="bibr" target="#b36">[36]</ref>. Nevertheless, further studies aiming at replicating our work on other smells, with projects developed in other programming languages, are desirable.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>V. RELATED WORK</head><p>This section discusses work investigating the evolution of code smells in software systems and their effect on maintenance activities and on software quality. Khomh et al. <ref type="bibr" target="#b26">[26]</ref>, <ref type="bibr" target="#b25">[25]</ref> studied the relationship between the presence of code smells and software change-and fault-proneness. They found that classes affected by code smells tend to be significantly more change- <ref type="bibr" target="#b25">[25]</ref> and fault-prone <ref type="bibr" target="#b26">[26]</ref> than other classes. Empirical evidence demonstrating that some bad smells correlate with higher fault-proneness has also been reported by Li and Shatnawi <ref type="bibr" target="#b30">[30]</ref>. Abbes et al. <ref type="bibr" target="#b0">[1]</ref> conducted three controlled experiments with the aim of investigating the impact of Blob and Spaghetti Code smells on program comprehension. Their results indicated that single occurrence of such smells does not significantly decrease developer's performance, while the coexistence of multiple bad smell instances in the same class significantly reduces developers' performance during maintenance tasks. Similar results were obtained by Yamashita and Moonen <ref type="bibr" target="#b49">[48]</ref> when studying the interaction of different code smells. Their results indicate that the maintenance problems are strictly related to the presence of more bad smells in the same file. They also investigated the impact of bad smells on maintainability characteristics <ref type="bibr" target="#b50">[49]</ref>. As discussed in Section IV we do not focus on smell co-occurrences because they happen in a very small percentage (&lt; 9%) of affected classes. The controlled experiment conducted by Sjøberg et al. <ref type="bibr" target="#b44">[43]</ref> confirmed that smells do not always constitute a problem, and that often class size impacts maintainability more than the presence of smells. Other studies investigate the impact of smells and their perception by surveying project developers. Arcoverde et al. <ref type="bibr" target="#b2">[3]</ref> investigated how developers react to the presence of bad smells in their code. The results of their survey indicate that code smells often remain in source code for a long time and the main reason for postponing their removal through refactoring activities is to avoid API modifications <ref type="bibr" target="#b2">[3]</ref>. A recent paper presented an empirical study aimed at investigating the perception of 13 types of smells <ref type="bibr" target="#b36">[36]</ref>, by showing to the participants code snippets containing (or not) smells. The results of such a study show that smells related to complex/long source code are generally perceived as harmful, while the other types of smells are not perceived or perceived only if the "intensity" of the problem is high. Yamashita and Moonen <ref type="bibr" target="#b51">[50]</ref> conducted a survey involving 85 professionals, concerning the perceived severity of code smells and the need to remove them. Their results indicated that 32% of developers do not know (or know little) about code smells, and those who are aware about the problem, pointed out that in many cases smell removal was not a priority, because of time pressure or lack of adequate tool support. In summary, although with contrasting results, the studies discussed above provide a general evidence that-at least in specific circumstancescode smells have negative effects on software quality. Despite that, however, developers seem reluctant to perform activities aimed at their removal. Chatzigeorgiou and Manakos <ref type="bibr" target="#b14">[15]</ref> analyzed this phenomena and their results indicate that in most cases, the design problems persist up to the latest examined version accumulating even more as the project matures. Very few bad smells are removed from the project, and in the vast majority of these cases this was not due to specific refactoring activities, but rather a side-effect of adaptive maintenance <ref type="bibr" target="#b14">[15]</ref>. They also pointed out some findings consistent with our RQ 1 , i.e., they indicated that a conspicuous percentage of smells were introduced when the affected source code entity was added in the system <ref type="bibr" target="#b14">[15]</ref>. However, their study does not provide quantitative data showing the magnitude of such phenomenon, as we do. It is also important to point out that we performed our analysis at commit-level (unlike to the related work that conducted those studies at release level), which allowed us to identify when bad smells appear in the source code. Finally, our results are based on 200 analyzed systems instead of two systems analyzed by the study that we mentioned earlier. Peters and Zaidman <ref type="bibr" target="#b40">[39]</ref> analyzed the bad smells' lifespan focusing on developers' behavior in the presence of such smells, confirming that often, even if the developers are aware of the bad smells' presence, they do not perform refactoring activities.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>VI. CONCLUSION AND LESSONS LEARNED</head><p>This paper presented a large-scale empirical study conducted over the commit history of 200 open source projects and aimed at understanding when and why bad code smells are introduced. These results provide several valuable findings for the research community: Lesson 1. Most of times code artifacts are affected by bad smells since their creation. This result contradicts the common wisdom that bad smells are generally due to a negative effect of software evolution. Also, this finding highlights that the introduction of most smells can simply be avoided by performing quality checks at commit time. In other words, instead of running smell detector time-to-time on the entire system, these tools could be used during commit activities (in particular circumstances, such as before issuing a release) to avoid or at least limit the introduction of bad code smells. Lesson 2. Code artifacts becoming smelly as consequence of maintenance and evolution activities are characterized by peculiar metrics' trends, different from those of clean artifacts. This is in agreement with previous findings on the historical evolution of code smells <ref type="bibr" target="#b32">[32]</ref>, <ref type="bibr" target="#b37">[37]</ref>, <ref type="bibr" target="#b41">[40]</ref>. Also, such results encourage the development of recommenders able of alerting software developers when changes applied to a code artifacts result in worrisome metric trends, generally characterizing artifacts that will be affected by a smell. Lesson 3. While implementing new features and enhancing existing ones are, as expected, the main activities during which developers tend to introduce smells, we found almost 400 cases in which refactoring operations introduced smells. This result is quite surprising, given that one of the goals behind refactoring is the removal of bad smells <ref type="bibr" target="#b20">[20]</ref>. This finding highlights the need for techniques and tools aimed at assessing the impact of refactoring operations on source code before their actual application (e.g., see the recent work by Chaparro et al. <ref type="bibr" target="#b13">[14]</ref>). Lesson 4. Newcomers are not necessary responsible for introducing bad smalls, while developers with high workloads and release pressure are more prone to introducing smell instances. This result highlights that code inspection practices should be strengthened when developers are working under these stressful conditions.</p><p>These lessons learned represent the main input for our future research agenda on the topic, mainly focused on designing and developing a new generation of code quality-checkers, such as those described in Lesson 2.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 2 .</head><label>2</label><figDesc>Number of commits required by a smell to manifest itself.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>TABLE I CHARACTERISTICS</head><label>I</label><figDesc>OF ECOSYSTEMS UNDER ANALYSIS</figDesc><table><row><cell>Ecosystem #Proj.</cell><cell>#Classes</cell><cell>KLOC #Commits #Issues</cell><cell>Mean Story Length Story Length Min-Max</cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>TABLE II QUALITY</head><label>II</label><figDesc>METRICS MEASURED IN THE CONTEXT OF RQ 1 Metric Description Lines of Code (LOC)</figDesc><table /><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>TABLE III TAGS</head><label>III</label><figDesc></figDesc><table><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell cols="3">ASSIGNED TO THE SMELL-INTRODUCING COMMITS</cell></row><row><cell cols="2">Tag</cell><cell></cell><cell>Description</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>Values</cell></row><row><cell></cell><cell></cell><cell></cell><cell cols="3">COMMIT GOAL TAGS</cell><cell></cell><cell></cell></row><row><cell cols="2">Bug fixing</cell><cell></cell><cell cols="4">The commit aimed at fixing a bug</cell><cell></cell><cell>[true,false]</cell></row><row><cell cols="2">Enhancement</cell><cell></cell><cell cols="6">The commit aimed at implementing an enhancement in the system</cell><cell>[true,false]</cell></row><row><cell cols="2">New feature</cell><cell></cell><cell cols="6">The commit aimed at implementing a new feature in the system</cell><cell>[true,false]</cell></row><row><cell cols="2">Refactoring</cell><cell></cell><cell cols="6">The commit aimed at performing refactoring operations</cell><cell>[true,false]</cell></row><row><cell></cell><cell></cell><cell></cell><cell cols="3">PROJECT STATUS TAGS</cell><cell></cell><cell></cell></row><row><cell cols="2">Working on release</cell><cell></cell><cell cols="6">The commit was performed [value] before the issuing of a major release</cell><cell>[one day, one week, one month, more than one month]</cell></row><row><cell cols="2">Project startup</cell><cell></cell><cell cols="6">The commit was performed [value] after the starting of the project</cell><cell>[one week, one month, one year, more than one year]</cell></row><row><cell></cell><cell></cell><cell></cell><cell cols="4">DEVELOPER STATUS TAGS</cell><cell></cell></row><row><cell cols="2">Workload</cell><cell></cell><cell cols="6">The developer had a [value] workload when the commit has been performed</cell><cell>[low,medium,high]</cell></row><row><cell cols="2">Ownership</cell><cell></cell><cell cols="6">The developer was the owner of the file in which the commit introduced the smell</cell><cell>[true,false]</cell></row><row><cell cols="2">Newcomer</cell><cell></cell><cell cols="6">The developer was a newcomer when the commit was performed</cell><cell>[true,false]</cell></row><row><cell></cell><cell>600</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell>500</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>LOC</cell><cell>300 400</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell>200</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell>100</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell>c 1</cell><cell>c 2</cell><cell>c 3</cell><cell>c 4</cell><cell>c 5</cell><cell>c 6</cell><cell>c 7</cell><cell>c 8</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell cols="2">Commits</cell><cell></cell><cell></cell></row></table><note>Fig. 1. Example of smell-introducing commit identification.</note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head>TABLE IV RQ 1</head><label>IV1</label><figDesc>: SLOPE AFFECTED vs SLOPE NOT AFFECTED -MANN-WHITNEY TEST (ADJ. P-VALUE) AND CLIFF'S DELTA (d)</figDesc><table><row><cell>Ecosys.</cell><cell>Smell</cell><cell>Affected</cell><cell>LOC mean</cell><cell>med cmp</cell><cell>LCOM mean</cell><cell>med cmp</cell><cell>WMC mean</cell><cell>med</cell><cell>cmp</cell><cell>RFC mean</cell><cell>med</cell><cell>cmp</cell><cell>CBO mean</cell><cell>med cmp</cell><cell>NOM mean</cell><cell>med</cell><cell>cmp</cell><cell>NOA mean</cell><cell>med cmp</cell></row><row><cell></cell><cell></cell><cell>NO</cell><cell>0.68</cell><cell></cell><cell>0.55</cell><cell></cell><cell>0.17</cell><cell></cell><cell></cell><cell>0.13</cell><cell></cell><cell></cell><cell>0.15</cell><cell></cell><cell>0.07</cell><cell></cell><cell></cell><cell>0.09</cell><cell>0</cell></row><row><cell></cell><cell>Blob</cell><cell>YES p-value</cell><cell cols="2">32.90 &lt;0.01 12.51</cell><cell>13.80 &lt;0.01</cell><cell>2.61</cell><cell>3.78 &lt;0.01</cell><cell>1.81</cell><cell></cell><cell cols="2">5.39 &lt;0.01 3.47</cell><cell></cell><cell cols="2">1.34 &lt;0.01 0.69</cell><cell>1.15 &lt;0.01</cell><cell>0.57</cell><cell></cell><cell>0.49 &lt;0.01</cell><cell>0.13</cell></row><row><cell></cell><cell></cell><cell>Cliff's d</cell><cell>0.65 (L)</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_8"><head></head><label></label><figDesc>For example, considering the Apache ecosystem, we can see a clear difference between the growth of LOC in Blob and clean classes. Indeed, this latter have a mean growth in terms of LOC characterized by a slope of 0.40, while the slope for Blobs is, on average, 91.82. To make clear the interpretation of such data, let us suppose we plot both regression lines on</figDesc><table /><note>the Cartesian plane. The regression line for Blobs will have an inclination of 89.38 • , indicating an abrupt growth of LOC, while the inclination of the regression line for clean classes will be 21.8 • , indicating less steep increase of LOC. The same happens when considering the LCOM cohesion metric</note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_9"><head>TABLE VII RQ 2</head><label>VII2</label><figDesc>: COMMIT-GOAL TAGS TO SMELL-INTRODUCING COMMITS. BF: BUG FIXING; E: ENHANCEMENT; NF: NEW FEATURE; R: REFACTORING</figDesc><table><row><cell>Smell</cell><cell>Android</cell><cell>Apache</cell><cell>Eclipse</cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_10"><head>TABLE V</head><label>V</label><figDesc>RQ 1 : DESCRIPTIVE STATISTICS OF THE SLOPE FOR THE REGRESSION LINES BUILT FOR EACH METRIC FOR FILES AFFECTED/NOT AFFECTED BY EACH BAD SMELL MAXminor note never use "average" to indicate "mean" because also the median is a measure of average</figDesc><table><row><cell>Ecosys.</cell><cell>Smell</cell><cell>Affected</cell><cell>LOC mean</cell><cell>med</cell><cell>LCOM mean</cell><cell>med</cell><cell>WMC mean</cell><cell>med</cell><cell>RFC mean</cell><cell>med</cell><cell>CBO mean</cell><cell>med</cell><cell>NOM mean</cell><cell>med</cell><cell>NOA mean</cell><cell>med</cell></row><row><cell></cell><cell>Blob</cell><cell>NO</cell><cell>0.68</cell><cell></cell><cell>0.55</cell><cell></cell><cell>0.17</cell><cell></cell><cell>0.13</cell><cell></cell><cell>0.15</cell><cell></cell><cell>0.07</cell><cell></cell><cell>0.09</cell><cell></cell></row><row><cell></cell><cell></cell><cell>YES</cell><cell>32.90</cell><cell>12.51</cell><cell>13.80</cell><cell>2.61</cell><cell>3.78</cell><cell>1.81</cell><cell>5.39</cell><cell>3.47</cell><cell cols="2">1.34 0.69</cell><cell>1.15</cell><cell>0.57</cell><cell>0.49</cell><cell>0.13</cell></row><row><cell></cell><cell cols="2">CDSP NO</cell><cell>0.42</cell><cell></cell><cell>0.12</cell><cell></cell><cell>0.12</cell><cell></cell><cell>0.05</cell><cell></cell><cell>0.09</cell><cell></cell><cell>0.05</cell><cell></cell><cell>0.06</cell><cell></cell></row><row><cell></cell><cell></cell><cell>YES</cell><cell>4.43</cell><cell>1.68</cell><cell>0.83</cell><cell></cell><cell>0.33</cell><cell></cell><cell>0.27</cell><cell></cell><cell cols="2">0.36 0.18</cell><cell>0.17</cell><cell></cell><cell>2.60</cell><cell>0.69</cell></row><row><cell cols="2">Android CC</cell><cell>NO</cell><cell>0.67</cell><cell></cell><cell>0.48</cell><cell></cell><cell>0.19</cell><cell></cell><cell>0.14</cell><cell></cell><cell>0.15</cell><cell></cell><cell>0.08</cell><cell></cell><cell>0.09</cell><cell></cell></row><row><cell></cell><cell></cell><cell>YES</cell><cell>7.71</cell><cell>6.81</cell><cell>11.16</cell><cell>4.12</cell><cell>2.61</cell><cell>2.20</cell><cell>2.42</cell><cell>1.01</cell><cell cols="2">0.33 0.28</cell><cell>0.67</cell><cell>0.50</cell><cell>0.18</cell><cell>0.10</cell></row><row><cell></cell><cell>FD</cell><cell>NO</cell><cell>0.99</cell><cell>0</cell><cell>0.62</cell><cell>0</cell><cell>0.29</cell><cell>0</cell><cell>0.31</cell><cell>0</cell><cell>0.40</cell><cell>0</cell><cell>0.11</cell><cell>0</cell><cell>0.11</cell><cell>0</cell></row><row><cell></cell><cell></cell><cell>YES</cell><cell>-10.56</cell><cell>-1.00</cell><cell>-2.65</cell><cell>0</cell><cell>-2.74</cell><cell>-0.60</cell><cell>-3.49</cell><cell>0</cell><cell cols="2">0.78 0.49</cell><cell>-1.13</cell><cell>-0.30</cell><cell>-0.91</cell><cell>0</cell></row><row><cell></cell><cell>SC</cell><cell>NO</cell><cell>1.42</cell><cell>0</cell><cell>0.96</cell><cell>0</cell><cell>0.31</cell><cell>0</cell><cell>0.42</cell><cell>0</cell><cell>0.29</cell><cell>0</cell><cell>0.11</cell><cell>0</cell><cell>0.13</cell><cell>0</cell></row><row><cell></cell><cell></cell><cell>YES</cell><cell>144.2</cell><cell>31.0</cell><cell>69.17</cell><cell>100.00</cell><cell>10.17</cell><cell>10.00</cell><cell>6.33</cell><cell>5.00</cell><cell cols="2">0.67 1.00</cell><cell>3</cell><cell>3</cell><cell>0.16</cell><cell>0</cell></row><row><cell></cell><cell>Blob</cell><cell>NO</cell><cell>0.40</cell><cell>0</cell><cell>0.42</cell><cell>0</cell><cell>0.13</cell><cell>0</cell><cell>0.13</cell><cell>0</cell><cell>0.05</cell><cell>0</cell><cell>0.05</cell><cell>0</cell><cell>0.03</cell><cell>0</cell></row><row><cell></cell><cell></cell><cell>YES</cell><cell>91.82</cell><cell>33.58</cell><cell>384.70</cell><cell>12.40</cell><cell>17.79</cell><cell>4.92</cell><cell>27.61</cell><cell>7.09</cell><cell cols="2">2.17 0.50</cell><cell>7.64</cell><cell>1.72</cell><cell>0.77</cell><cell>0.05</cell></row><row><cell></cell><cell cols="2">CDSP NO</cell><cell>0.43</cell><cell>0</cell><cell>0.54</cell><cell>0</cell><cell>0.12</cell><cell>0</cell><cell>0.12</cell><cell>0</cell><cell>0.10</cell><cell>0</cell><cell>0.05</cell><cell>0</cell><cell>0.03</cell><cell>0</cell></row><row><cell></cell><cell></cell><cell>YES</cell><cell>8.69</cell><cell>2.03</cell><cell>2.44</cell><cell>0</cell><cell>0.61</cell><cell>0</cell><cell>0.59</cell><cell>0</cell><cell cols="2">0.55 0.06</cell><cell>0.23</cell><cell>0</cell><cell>3.28</cell><cell>1.07</cell></row><row><cell>Apache</cell><cell>CC</cell><cell>NO</cell><cell>0.36</cell><cell>0</cell><cell>0.47</cell><cell>0</cell><cell>0.12</cell><cell>0</cell><cell>0.13</cell><cell>0</cell><cell>0.09</cell><cell>0</cell><cell>0.05</cell><cell>0</cell><cell>0.04</cell><cell>0</cell></row><row><cell></cell><cell></cell><cell>YES</cell><cell>121.80</cell><cell>25.86</cell><cell cols="2">886.50 152.40</cell><cell cols="2">31.87 10.36</cell><cell>39.81</cell><cell>7.21</cell><cell cols="2">3.45 0.53</cell><cell>13.99</cell><cell>3.56</cell><cell>0.17</cell><cell>0</cell></row><row><cell></cell><cell>FD</cell><cell>NO</cell><cell>0.52</cell><cell>0</cell><cell>0.812</cell><cell>0</cell><cell>0.16</cell><cell>0</cell><cell>0.14</cell><cell>0</cell><cell>0.10</cell><cell>0</cell><cell>0.07</cell><cell>0</cell><cell>0.030</cell><cell>0</cell></row><row><cell></cell><cell></cell><cell>YES</cell><cell>-13.78</cell><cell>-3.32</cell><cell>-5.98</cell><cell>-0.30</cell><cell>-6.16</cell><cell>-1.00</cell><cell>-4.81</cell><cell>-0.52</cell><cell>-0.28</cell><cell>0</cell><cell cols="2">-2.82 -0.53</cell><cell>-0.40</cell><cell>0</cell></row><row><cell></cell><cell>SC</cell><cell>NO</cell><cell>0.54</cell><cell>0</cell><cell>0.11</cell><cell>0</cell><cell>0.11</cell><cell>0</cell><cell>0.12</cell><cell>0</cell><cell>0.14</cell><cell>0</cell><cell>0.04</cell><cell>0</cell><cell>0.04</cell><cell>0</cell></row><row><cell></cell><cell></cell><cell>YES</cell><cell cols="2">273.00 129.90</cell><cell>232.30</cell><cell>4.50</cell><cell>7.09</cell><cell>6.50</cell><cell cols="2">10.81 10.15</cell><cell cols="2">0.96 0.92</cell><cell>3.41</cell><cell>3.00</cell><cell>2.29</cell><cell>2.08</cell></row><row><cell></cell><cell>Blob</cell><cell>NO</cell><cell>0.02</cell><cell></cell><cell>0.02</cell><cell></cell><cell>-0.01</cell><cell></cell><cell>-0.03</cell><cell></cell><cell>0.13</cell><cell></cell><cell>-0.01</cell><cell></cell><cell>0.01</cell><cell></cell></row><row><cell></cell><cell></cell><cell>YES</cell><cell>69.51</cell><cell>28.15</cell><cell>1208.00</cell><cell>14.71</cell><cell>17.10</cell><cell>2.92</cell><cell>18.15</cell><cell>2.44</cell><cell cols="2">0.58 0.01</cell><cell>7.11</cell><cell>1.09</cell><cell>3.11</cell><cell>0.09</cell></row><row><cell></cell><cell cols="2">CDSP NO</cell><cell>0.01</cell><cell></cell><cell>0.34</cell><cell></cell><cell>&lt;-0.01</cell><cell></cell><cell>-0.02</cell><cell>0</cell><cell>0.13</cell><cell></cell><cell>&lt;-0.01</cell><cell></cell><cell>0.01</cell><cell></cell></row><row><cell></cell><cell></cell><cell>YES</cell><cell>12.58</cell><cell>2.50</cell><cell>749.1</cell><cell></cell><cell>2.77</cell><cell></cell><cell>0.70</cell><cell></cell><cell>0.37</cell><cell></cell><cell>2.10</cell><cell></cell><cell>4.01</cell><cell></cell></row><row><cell>Eclipse</cell><cell>CC</cell><cell>NO</cell><cell>0.02</cell><cell></cell><cell>0.21</cell><cell></cell><cell>-0.01</cell><cell></cell><cell>-0.05</cell><cell></cell><cell>0.11</cell><cell></cell><cell>-0.01</cell><cell></cell><cell>0.02</cell><cell></cell></row><row><cell></cell><cell></cell><cell>YES</cell><cell>57.72</cell><cell>18.00</cell><cell>2349.00</cell><cell>141.70</cell><cell>19.86</cell><cell>4.86</cell><cell>10.46</cell><cell>0.82</cell><cell cols="2">0.68 0.01</cell><cell>10.23</cell><cell>1.94</cell><cell>3.10</cell><cell>&lt;0.01</cell></row><row><cell></cell><cell>FD</cell><cell>NO</cell><cell>-0.02</cell><cell></cell><cell>0.67</cell><cell></cell><cell>-0.02</cell><cell></cell><cell>-0.02</cell><cell></cell><cell>0.13</cell><cell></cell><cell>-0.01</cell><cell></cell><cell>0.02</cell><cell></cell></row><row><cell></cell><cell></cell><cell>YES</cell><cell>-15.09</cell><cell>-5.40</cell><cell>-5.23</cell><cell>-0.95</cell><cell>-5.15</cell><cell>-1.71</cell><cell>-4.06</cell><cell>-0.60</cell><cell cols="2">-0.16 0.16</cell><cell>-2.39</cell><cell>-0.60</cell><cell>-0.35</cell><cell></cell></row><row><cell></cell><cell>SC</cell><cell>NO</cell><cell>0.07</cell><cell></cell><cell>1.19</cell><cell></cell><cell>0.02</cell><cell></cell><cell>-0.06</cell><cell></cell><cell>0.15</cell><cell></cell><cell>-0.01</cell><cell></cell><cell>0.02</cell><cell></cell></row><row><cell></cell><cell></cell><cell>YES</cell><cell>114.40</cell><cell>42.74</cell><cell>698.4</cell><cell>137.3</cell><cell>16.65</cell><cell>4.03</cell><cell>9.47</cell><cell>0.03</cell><cell>1.37</cell><cell></cell><cell>6.44</cell><cell>2.39</cell><cell>9.30</cell><cell>1.17</cell></row><row><cell></cell><cell>Blob</cell><cell>NO</cell><cell>0.25</cell><cell>0</cell><cell>0.25</cell><cell>0</cell><cell>0.07</cell><cell>0</cell><cell>0.06</cell><cell>0</cell><cell>0.09</cell><cell>0</cell><cell>0.02</cell><cell>0</cell><cell>0.02</cell><cell>0</cell></row><row><cell></cell><cell></cell><cell>YES</cell><cell>73.76</cell><cell>29.14</cell><cell>849.90</cell><cell>9.57</cell><cell>16.26</cell><cell>3.30</cell><cell>20.17</cell><cell>3.04</cell><cell cols="2">1.15 0.20</cell><cell>6.81</cell><cell>1.12</cell><cell>2.15</cell><cell>0.08</cell></row><row><cell></cell><cell>CDSP</cell><cell>NO</cell><cell>0.26</cell><cell>0</cell><cell>0.43</cell><cell>0</cell><cell>0.07</cell><cell>0</cell><cell>0.06</cell><cell>0</cell><cell>0.11</cell><cell>0</cell><cell>0.03</cell><cell>0</cell><cell>0.02</cell><cell>0</cell></row><row><cell></cell><cell></cell><cell>YES</cell><cell>9.36</cell><cell>2.10</cell><cell>290.50</cell><cell>0</cell><cell>1.39</cell><cell>0</cell><cell>0.57</cell><cell>0</cell><cell>0.44</cell><cell>0</cell><cell>0.94</cell><cell>0</cell><cell>3.42</cell><cell>1.00</cell></row><row><cell>Overall</cell><cell>CC</cell><cell>NO</cell><cell>0.21</cell><cell>0</cell><cell>0.34</cell><cell>0</cell><cell>0.06</cell><cell>0</cell><cell>0.04</cell><cell>0</cell><cell>0.10</cell><cell>0</cell><cell>0.02</cell><cell>0</cell><cell>0.03</cell><cell>0</cell></row><row><cell></cell><cell></cell><cell>YES</cell><cell>63.00</cell><cell>12.60</cell><cell>1573.00</cell><cell>46.81</cell><cell>19.36</cell><cell>3.81</cell><cell>15.68</cell><cell>1.93</cell><cell cols="2">1.25 0.18</cell><cell>9.29</cell><cell>1.40</cell><cell>1.88</cell><cell>0.01</cell></row><row><cell></cell><cell>FD</cell><cell>NO</cell><cell>0.29</cell><cell>0</cell><cell>0.75</cell><cell>0</cell><cell>0.08</cell><cell>0</cell><cell>0.07</cell><cell>0</cell><cell>0.12</cell><cell>0</cell><cell>0.03</cell><cell>0</cell><cell>0.02</cell><cell>0</cell></row><row><cell></cell><cell></cell><cell>YES</cell><cell>-14.09</cell><cell>-4.00</cell><cell>-5.59</cell><cell>-0.50</cell><cell>-5.67</cell><cell>-1.37</cell><cell>-4.50</cell><cell>-0.54</cell><cell>-0.19</cell><cell>0</cell><cell>-2.60</cell><cell>-0.57</cell><cell>-0.40</cell><cell>0</cell></row><row><cell></cell><cell>SC</cell><cell>NO</cell><cell>0.17</cell><cell>0</cell><cell>1.02</cell><cell>0</cell><cell>0.04</cell><cell>0</cell><cell>-0.02</cell><cell>0</cell><cell>0.15</cell><cell>0</cell><cell>0.01</cell><cell>0</cell><cell>0.03</cell><cell>0</cell></row><row><cell></cell><cell></cell><cell>YES</cell><cell>134.00</cell><cell>36.29</cell><cell>597.0</cell><cell>100.0</cell><cell>15.09</cell><cell>6.34</cell><cell>9.36</cell><cell>1.00</cell><cell>1.27</cell><cell>0</cell><cell>5.84</cell><cell>3.00</cell><cell>7.80</cell><cell>0.57</cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_11"><head>TABLE VI RQ 1</head><label>VI1</label><figDesc>: SLOPE AFFECTED vs SLOPE NOT AFFECTED -MANN-WHITNEY TEST (ADJ. P-VALUE) AND CLIFF'S DELTA (d)</figDesc><table><row><cell cols="2">Ecosys. Smell</cell><cell>LOC p-val.</cell><cell>d</cell><cell>LCOM p-val.</cell><cell>d</cell><cell>WMC p-val.</cell><cell>d</cell><cell>RFC p-val.</cell><cell>d</cell><cell>CBO p-val.</cell><cell>d</cell><cell>NOM p-val.</cell><cell>d</cell><cell>NOA p-val.</cell><cell>d</cell></row><row><cell></cell><cell>Blob</cell><cell>&lt;0.01</cell><cell>0.87 (L)</cell><cell>&lt;0.01</cell><cell>0.52 (L)</cell><cell>&lt;0.01</cell><cell>0.74 (L)</cell><cell>&lt;0.01</cell><cell>0.67 (L)</cell><cell>&lt;0.01</cell><cell>0.32 (S)</cell><cell>&lt;0.01</cell><cell>0.75 (L)</cell><cell cols="2">&lt;0.01 0.42 (M)</cell></row><row><cell></cell><cell>CDSP</cell><cell>&lt;0.01</cell><cell>0.61 (L)</cell><cell>0.3</cell><cell>0.05 (N)</cell><cell>0.04</cell><cell>0.05 (N)</cell><cell>0.02</cell><cell>0.05 (N)</cell><cell>&lt;0.01</cell><cell>0.17 (S)</cell><cell>0.01</cell><cell>0.06 (N)</cell><cell>&lt;0.01</cell><cell>0.87 (L)</cell></row><row><cell>Overall</cell><cell>CC</cell><cell>&lt;0.01</cell><cell>0.79 (L)</cell><cell>&lt;0.01</cell><cell>0.69 (L)</cell><cell>&lt;0.01</cell><cell>0.82 (L)</cell><cell>&lt;0.01</cell><cell>0.61 (L)</cell><cell>&lt;0.01</cell><cell>0.30 (S)</cell><cell>&lt;0.01</cell><cell>0.81 (L)</cell><cell cols="2">&lt;0.01 0.39 (M)</cell></row><row><cell></cell><cell>FD</cell><cell cols="2">&lt;0.01 -0.71 (L)</cell><cell cols="2">&lt;0.01 -0.51 (L)</cell><cell cols="2">&lt;0.01 -0.67 (L)</cell><cell cols="2">&lt;0.01 -0.49 (L)</cell><cell cols="2">0.75 0.01 (N)</cell><cell cols="2">&lt;0.01 -0.69 (L)</cell><cell cols="2">&lt;0.01 -0.22 (S)</cell></row><row><cell></cell><cell>SC</cell><cell>&lt;0.01</cell><cell>0.93 (L)</cell><cell>&lt;0.01</cell><cell>0.52 (L)</cell><cell>&lt;0.01</cell><cell>0.66 (L)</cell><cell>&lt;0.01</cell><cell>0.52 (L)</cell><cell cols="2">0.49 0.06 (N)</cell><cell>&lt;0.01</cell><cell>0.59 (L)</cell><cell>&lt;0.01</cell><cell>0.67 (L)</cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_12"><head>TABLE VIII RQ 2</head><label>VIII2</label><figDesc>: PROJECT-STATUS TAGS TO SMELL-INTRODUCING COMMITS</figDesc><table><row><cell></cell><cell></cell><cell cols="3">Working on Release</cell><cell></cell><cell cols="2">Project Startup</cell><cell></cell><cell></cell></row><row><cell>Ecosystem</cell><cell>Smell</cell><cell>One Day</cell><cell cols="3">One Week Month One More</cell><cell cols="3">One Week Month Year One One</cell><cell>More</cell></row><row><cell></cell><cell>Blob</cell><cell></cell><cell>54</cell><cell>35</cell><cell>4</cell><cell>6</cell><cell>3</cell><cell>35</cell><cell>56</cell></row><row><cell></cell><cell>CDSP</cell><cell>14</cell><cell>20</cell><cell>62</cell><cell>4</cell><cell>7</cell><cell>17</cell><cell>33</cell><cell>43</cell></row><row><cell>Android</cell><cell>CC</cell><cell>0</cell><cell>6</cell><cell>94</cell><cell>0</cell><cell>0</cell><cell>12</cell><cell>65</cell><cell>23</cell></row><row><cell></cell><cell>FD</cell><cell>1</cell><cell>29</cell><cell>59</cell><cell>11</cell><cell>0</cell><cell>4</cell><cell>71</cell><cell>25</cell></row><row><cell></cell><cell>SC</cell><cell>0</cell><cell>0</cell><cell>100</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell>100</cell></row><row><cell></cell><cell>Blob</cell><cell>19</cell><cell></cell><cell>43</cell><cell>1</cell><cell>3</cell><cell>7</cell><cell>54</cell><cell>36</cell></row><row><cell></cell><cell>CDSP</cell><cell></cell><cell>41</cell><cell>46</cell><cell>3</cell><cell>3</cell><cell>8</cell><cell>45</cell><cell>44</cell></row><row><cell>Apache</cell><cell>CC</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell>FD</cell><cell></cell><cell></cell><cell>74</cell><cell>7</cell><cell>3</cell><cell>8</cell><cell>43</cell><cell>46</cell></row><row><cell></cell><cell>SC</cell><cell>21</cell><cell>18</cell><cell>58</cell><cell>3</cell><cell>3</cell><cell>7</cell><cell>15</cell><cell>75</cell></row><row><cell></cell><cell>Blob</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>3</cell><cell>20</cell><cell></cell><cell></cell></row><row><cell></cell><cell>CDSP</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>Eclipse</cell><cell>CC</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>2</cell><cell>12</cell><cell></cell><cell></cell></row><row><cell></cell><cell>FD</cell><cell></cell><cell>14</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell>SC</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell>Blob</cell><cell>15</cell><cell>33</cell><cell>50</cell><cell>2</cell><cell>5</cell><cell>14</cell><cell>38</cell><cell>43</cell></row><row><cell></cell><cell>CDSP</cell><cell>10</cell><cell>29</cell><cell>58</cell><cell>3</cell><cell>6</cell><cell>12</cell><cell>39</cell><cell>43</cell></row><row><cell>Overall</cell><cell>CC</cell><cell>18</cell><cell>28</cell><cell>53</cell><cell>1</cell><cell>4</cell><cell>13</cell><cell>42</cell><cell>41</cell></row><row><cell></cell><cell>FD</cell><cell>7</cell><cell>22</cell><cell>66</cell><cell>5</cell><cell>3</cell><cell>7</cell><cell>42</cell><cell>48</cell></row><row><cell></cell><cell>SC</cell><cell>16</cell><cell>20</cell><cell>58</cell><cell>6</cell><cell>2</cell><cell>6</cell><cell>17</cell><cell>75</cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_13"><head>TABLE IX RQ</head><label>IX</label><figDesc>: DEVELOPER-STATUS TAGS TO SMELL-INTRODUCING COMMITS</figDesc><table><row><cell>Ecosystem Smell</cell><cell>Workload High Medium Low</cell><cell>Ownership True False</cell><cell>Newcomer True False</cell></row></table><note></note></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1">https://f-droid.org/ 2 https://projects.apache.org/indexes/quick.html 3 https://github.com/eclipse</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="4">An example of detection rule exploited to identify Blob classes can be found at http://tinyurl.com/paf9gp6.</note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">An empirical study of the impact of two antipatterns, Blob and Spaghetti Code, on program comprehension</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Abbes</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Khomh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y.-G</forename><surname>Guéhéneuc</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Antoniol</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">15th European Conference on Software Maintenance and Reengineering</title>
		<meeting><address><addrLine>Oldenburg, Germany</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2011-03-04" />
			<biblScope unit="page" from="181" to="190" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Is it a bug or an enhancement?: a text-based approach to classify change requests</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Antoniol</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Ayari</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">Di</forename><surname>Penta</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Khomh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y.-G</forename><surname>Guéhéneuc</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2008 conference of the Centre for Advanced Studies on Collaborative Research</title>
		<meeting>the 2008 conference of the Centre for Advanced Studies on Collaborative Research<address><addrLine>Richmond Hill, Ontario</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2008" />
			<biblScope unit="page">23</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Understanding the longevity of code smells: preliminary results of an explanatory survey</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Arcoverde</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Garcia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Figueiredo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the International Workshop on Refactoring Tools</title>
		<meeting>the International Workshop on Refactoring Tools</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2011" />
			<biblScope unit="page" from="33" to="36" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">A new family of software anti-patterns: Linguistic anti-patterns</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Arnaoudova</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">Di</forename><surname>Penta</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Antoniol</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y.-G</forename><surname>Guéhéneuc</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">17th European Conference on Software Maintenance and Reengineering</title>
		<meeting><address><addrLine>Genova, Italy</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2013-03-05" />
			<biblScope unit="page" from="187" to="196" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">The missing links: bugs and bug-fix commits</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Bachmann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Bird</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Rahman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">T</forename><surname>Devanbu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Bernstein</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 18th ACM SIGSOFT International Symposium on Foundations of Software Engineering</title>
		<meeting>the 18th ACM SIGSOFT International Symposium on Foundations of Software Engineering<address><addrLine>Santa Fe, NM, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2010-11-07" />
			<biblScope unit="page" from="97" to="106" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Baeza-Yates</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Ribeiro-Neto</surname></persName>
		</author>
		<title level="m">Modern Information Retrieval</title>
		<imprint>
			<publisher>Addison-Wesley</publisher>
			<date type="published" when="1999" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">The evolution of project inter-dependencies in a software ecosystem: The case of apache</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Bavota</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Canfora</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">Di</forename><surname>Penta</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Oliveto</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Panichella</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2013 IEEE International Conference on Software Maintenance</title>
		<meeting><address><addrLine>Eindhoven, The Netherlands</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2013" />
			<biblScope unit="page" from="280" to="289" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">When does a refactoring induce bugs? an empirical study</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Bavota</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">D</forename><surname>Carluccio</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Lucia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">Di</forename><surname>Penta</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Oliveto</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Strollo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the IEEE International Working Conference on Source Code Analysis and Manipulation</title>
		<meeting>the IEEE International Working Conference on Source Code Analysis and Manipulation<address><addrLine>Riva del Garda, Italy</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2012" />
			<biblScope unit="page" from="104" to="113" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">An empirical analysis of the distribution of unit test smells and their impact on software maintenance</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Bavota</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Qusef</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Oliveto</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">De</forename><surname>Lucia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Binkley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">28th IEEE International Conference on Software Maintenance, ICSM 2012</title>
		<meeting><address><addrLine>Trento, Italy</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2012" />
			<biblScope unit="page" from="56" to="65" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Don&apos;t touch my code!: examining the effects of ownership on software quality</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Bird</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Nagappan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Murphy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Gall</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">T</forename><surname>Devanbu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGSOFT/FSE&apos;11 19th ACM SIGSOFT Symposium on the Foundations of Software Engineering and 13rd European Software Engineering Conference</title>
		<meeting><address><addrLine>Szeged, Hungary</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2011" />
			<biblScope unit="page" from="4" to="14" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Competitive coevolutionary code-smells detection</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Boussaa</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Kessentini</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Kessentini</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Bechikh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">B</forename><surname>Chikha</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Search Based Software Engineering -5th International Symposium, SSBSE 2013</title>
		<meeting><address><addrLine>St. Petersburg, Russia</addrLine></address></meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2013" />
			<biblScope unit="page" from="50" to="65" />
		</imprint>
	</monogr>
	<note>Proceedings, ser. Lecture Notes in Computer Science</note>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Managing technical debt in softwarereliant systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Brown</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Cai</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Guo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Kazman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Kruchten</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Lim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Maccormack</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">L</forename><surname>Nord</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Ozkaya</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">S</forename><surname>Sangwan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">B</forename><surname>Seaman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">J</forename><surname>Sullivan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Zazworka</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Workshop on Future of Software Engineering Research, at the 18th ACM SIGSOFT International Symposium on Foundations of Software Engineering</title>
		<meeting>the Workshop on Future of Software Engineering Research, at the 18th ACM SIGSOFT International Symposium on Foundations of Software Engineering<address><addrLine>Santa Fe, NM, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2010" />
			<biblScope unit="page" from="47" to="52" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">J</forename><surname>Brown</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">C</forename><surname>Malveau</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">H</forename><surname>Brown</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">W</forename><surname>Mccormick</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Iii</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">J</forename><surname>Mowbray</surname></persName>
		</author>
		<title level="m">Anti Patterns: Refactoring Software, Architectures, and Projects in Crisis</title>
		<imprint>
			<publisher>John Wiley and Sons</publisher>
			<date type="published" when="1998" />
		</imprint>
	</monogr>
	<note>1st ed</note>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">On the impact of refactoring operations on code quality metrics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Chaparro</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Bavota</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Marcus</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">Di</forename><surname>Penta</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 30th International Conference on Software Maintenance and Evolution</title>
		<meeting>the 30th International Conference on Software Maintenance and Evolution</meeting>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
	<note>ICSME 2014. To appear</note>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Investigating the evolution of bad smells in object-oriented code</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Chatzigeorgiou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Manakos</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on the Quality of Information and Communications Technology (QUATIC)</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title/>
	</analytic>
	<monogr>
		<title level="j">IEEE</title>
		<imprint>
			<biblScope unit="page" from="106" to="115" />
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">A metrics suite for object oriented design</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">R</forename><surname>Chidamber</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">F</forename><surname>Kemerer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Software Engineering (TSE)</title>
		<imprint>
			<biblScope unit="volume">20</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="476" to="493" />
			<date type="published" when="1994-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">J</forename><surname>Conover</surname></persName>
		</author>
		<title level="m">Practical Nonparametric Statistics</title>
		<imprint>
			<publisher>Wiley</publisher>
			<date type="published" when="1998" />
		</imprint>
	</monogr>
	<note>3rd ed</note>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">The WyCash portfolio management system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Cunningham</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">OOPS Messenger</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="29" to="30" />
			<date type="published" when="1993" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Populating a release history database from version control and bug tracking systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Fischer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Pinzger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Gall</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">19th International Conference on Software Maintenance (ICSM 2003</title>
		<meeting><address><addrLine>Amsterdam, The Netherlands</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2003-09" />
			<biblScope unit="page">23</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<title level="m" type="main">Refactoring: Improving the Design of Existing Code</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Fowler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Beck</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Brant</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Opdyke</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Roberts</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1999" />
			<publisher>Addison-Wesley</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title level="m" type="main">Effect sizes for research: A broad practical approach</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">J</forename><surname>Grissom</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">J</forename><surname>Kim</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
	<note>2nd ed. Lawrence Earlbaum Associates</note>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Detecting and visualizing inter-worksheet smells in spreadsheets</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Hermans</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Pinzger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Van Deursen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">34th International Conference on Software Engineering, ICSE 2012</title>
		<meeting><address><addrLine>Zurich, Switzerland</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2012" />
			<biblScope unit="page" from="441" to="451" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Detecting code smells in spreadsheet formulas</title>
	</analytic>
	<monogr>
		<title level="m">28th IEEE International Conference on Software Maintenance, ICSM 2012</title>
		<meeting><address><addrLine>Trento, Italy</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2012" />
			<biblScope unit="page" from="409" to="418" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">It&apos;s not a bug, it&apos;s a feature: how misclassification impacts bug prediction</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Herzig</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Just</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Zeller</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">35th International Conference on Software Engineering, ICSE &apos;13</title>
		<meeting><address><addrLine>San Francisco, CA, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2013" />
			<biblScope unit="page" from="392" to="401" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">An exploratory study of the impact of code smells on software change-proneness</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Khomh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">Di</forename><surname>Penta</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y.-G</forename><surname>Gueheneuc</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 16th Working Conference on Reverse Engineering</title>
		<meeting>the 16th Working Conference on Reverse Engineering<address><addrLine>Lille, France</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE CS Press</publisher>
			<date type="published" when="2009" />
			<biblScope unit="page" from="75" to="84" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">An exploratory study of the impact of antipatterns on class change-and fault-proneness</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Khomh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">Di</forename><surname>Penta</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y.-G</forename><surname>Guéhéneuc</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Antoniol</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Empirical Software Engineering</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="243" to="275" />
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Technical debt: From metaphor to theory and practice</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Kruchten</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">L</forename><surname>Nord</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Ozkaya</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Software</title>
		<imprint>
			<biblScope unit="volume">29</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="18" to="21" />
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<monogr>
		<title level="m" type="main">Software Evolution -Processes of Software Change</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">M</forename><surname>Lehman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">A</forename><surname>Belady</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1985" />
			<publisher>Academic Press London</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">The effect of lexicon bad smells on concept location in source code</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Lemma Abebe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Haiduc</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Tonella</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Marcus</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">11th IEEE Working Conference on Source Code Analysis and Manipulation, SCAM 2011</title>
		<meeting><address><addrLine>Williamsburg, VA, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2011" />
			<biblScope unit="page" from="125" to="134" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">An empirical study of the bad smells and class error probability in the post-release object-oriented system evolution</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Shatnawi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Systems and Software</title>
		<imprint>
			<biblScope unit="page" from="1120" to="1128" />
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">A balancing act: What software practitioners have to say about technical debt</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Lim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Taksande</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">B</forename><surname>Seaman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Software</title>
		<imprint>
			<biblScope unit="volume">29</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="22" to="27" />
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Assessing the impact of bad smells using historical information</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Lozano</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Wermelinger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Nuseibeh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Ninth international workshop on Principles of software evolution: in conjunction with the 6th ESEC/FSE joint meeting, ser. IWPSE &apos;07</title>
		<meeting><address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2007" />
			<biblScope unit="page" from="31" to="34" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">Detection strategies: Metrics-based rules for detecting design flaws</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Marinescu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">20th International Conference on Software Maintenance (ICSM 2004</title>
		<meeting><address><addrLine>Chicago, IL, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2004-09" />
			<biblScope unit="page" from="350" to="359" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">Decor: A method for the specification and detection of code and design smells</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Moha</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y.-G</forename><surname>Guéhéneuc</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Duchien</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A.-F</forename><forename type="middle">L</forename><surname>Meur</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Software Engineering</title>
		<imprint>
			<biblScope unit="volume">36</biblScope>
			<biblScope unit="page" from="20" to="36" />
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">Towards a better understanding of software evolution: an empirical study on open-source software</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Neamtiu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Xie</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Chen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Software: Evolution and Process</title>
		<imprint>
			<biblScope unit="volume">25</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="193" to="218" />
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">Do they really smell bad? a study on developers&apos; perception of bad code smells</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Palomba</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Bavota</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">Di</forename><surname>Penta</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Oliveto</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>De Lucia</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 30th IEEE International Conference on Software Maintenance and Evolution (ICSME&apos;14)</title>
		<meeting>the 30th IEEE International Conference on Software Maintenance and Evolution (ICSME&apos;14)<address><addrLine>Victoria, Canada</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
	<note>to appear</note>
</biblStruct>

<biblStruct xml:id="b37">
	<analytic>
		<title level="a" type="main">Detecting bad smells in source code using change history information</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Palomba</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Bavota</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">Di</forename><surname>Penta</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Oliveto</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">De</forename><surname>Lucia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Poshyvanyk</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Automated Software Engineering (ASE)</title>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<monogr>
		<title level="m">IEEE/ACM 28th International Conference on</title>
		<imprint>
			<date type="published" when="2013-11" />
			<biblScope unit="page" from="268" to="278" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<analytic>
		<title level="a" type="main">Software aging</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">L</forename><surname>Parnas</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 16th International Conference on Software Engineering</title>
		<meeting>the 16th International Conference on Software Engineering<address><addrLine>Sorrento, Italy</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society / ACM Press</publisher>
			<date type="published" when="1994" />
			<biblScope unit="page" from="279" to="287" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b40">
	<analytic>
		<title level="a" type="main">Evaluating the lifespan of code smells using software repository mining</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Peters</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Zaidman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">European Conference on Software Maintenance and ReEngineering</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2012" />
			<biblScope unit="page" from="411" to="416" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b41">
	<analytic>
		<title level="a" type="main">Using history information to improve design flaws detection</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Ratiu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Ducasse</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Gîrba</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Marinescu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">8th European Conference on Software Maintenance and Reengineering</title>
		<meeting><address><addrLine>Tampere, Finland, Proceeding</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2004-03" />
			<biblScope unit="page" from="223" to="232" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b42">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Sheskin</surname></persName>
		</author>
		<title level="m">Handbook of Parametric and Nonparametric Statistical Procedures</title>
		<imprint>
			<publisher>Chapman &amp; Hall/CRC</publisher>
			<date type="published" when="2000" />
		</imprint>
	</monogr>
	<note>second edition ed</note>
</biblStruct>

<biblStruct xml:id="b43">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Shull</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Falessi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Seaman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Diep</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Layman</surname></persName>
		</author>
		<title level="m">Perspectives on the Future of Software Engineering</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2013" />
			<biblScope unit="page" from="179" to="190" />
		</imprint>
	</monogr>
	<note>ch. Technical Debt: Showing the Way for Better Transfer of Empirical Results</note>
</biblStruct>

<biblStruct xml:id="b44">
	<analytic>
		<title level="a" type="main">Quantifying the effect of code smells on maintenance effort</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">I K</forename><surname>Sjøberg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">F</forename><surname>Yamashita</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">C D</forename><surname>Anda</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Mockus</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Dybå</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Software Eng</title>
		<imprint>
			<biblScope unit="volume">39</biblScope>
			<biblScope unit="issue">8</biblScope>
			<biblScope unit="page" from="1144" to="1156" />
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b45">
	<analytic>
		<title level="a" type="main">Identification of move method refactoring opportunities</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Tsantalis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Chatzigeorgiou</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Software Engineering</title>
		<imprint>
			<biblScope unit="volume">35</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="347" to="367" />
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b46">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Tufano</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Palomba</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Bavota</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Oliveto</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">Di</forename><surname>Penta</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">De</forename><surname>Lucia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Poshyvanyk</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
	<note>Replication package. [Online</note>
</biblStruct>

<biblStruct xml:id="b47">
	<analytic>
		<title level="a" type="main">ReLink: recovering links between bugs and changes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S.-C</forename><surname>Cheung</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGSOFT/FSE&apos;11 19th ACM SIGSOFT Symposium on the Foundations of Software Engineering (FSE-19) and ESEC&apos;11: 13rd European Software Engineering Conference (ESEC-13)</title>
		<meeting><address><addrLine>Szeged, Hungary</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2011" />
			<biblScope unit="page" from="15" to="25" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b48">
	<analytic>
		<title level="a" type="main">Towards a better understanding of software evolution: An empirical study on open source software</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Xie</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Neamtiu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2013 IEEE International Conference on Software Maintenance</title>
		<imprint>
			<date type="published" when="2009" />
			<biblScope unit="volume">0</biblScope>
			<biblScope unit="page" from="51" to="60" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b49">
	<analytic>
		<title level="a" type="main">Exploring the impact of inter-smell relations on software maintainability: An empirical study</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Yamashita</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Moonen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Software Engineering (ICSE)</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2013" />
			<biblScope unit="page" from="682" to="691" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b50">
	<analytic>
		<title level="a" type="main">Do code smells reflect important maintainability aspects?</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">F</forename><surname>Yamashita</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Moonen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">28th IEEE International Conference on Software Maintenance, ICSM 2012</title>
		<meeting><address><addrLine>Trento, Italy</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2012" />
			<biblScope unit="page" from="306" to="315" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b51">
	<analytic>
		<title level="a" type="main">Do developers care about code smells? an exploratory survey</title>
	</analytic>
	<monogr>
		<title level="m">20th Working Conference on Reverse Engineering</title>
		<meeting><address><addrLine>Koblenz, Germany</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2013-10-14" />
			<biblScope unit="page" from="242" to="251" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b52">
	<monogr>
		<title level="m" type="main">Why Programs Fail: A Guide to Systematic Debugging</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Zeller</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2009" />
			<publisher>Morgan Kaufmann</publisher>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
