{
  "name" : "69481324.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "Hierarchical Graph Representation Learning with Differentiable Pooling",
    "authors" : [ "Rex Ying", "Jiaxuan You", "Xiang Ren" ],
    "emails" : [ "rexying@stanford.edu", "jiaxuan@stanford.edu", "christopher.morris@udo.edu", "xiangren@usc.edu", "wleif@stanford.edu", "jure@cs.stanford.edu" ],
    "sections" : [ {
      "heading" : "1 Introduction",
      "text" : "In recent years there has been a surge of interest in developing graph neural networks (GNNs)— general deep learning architectures that can operate over graph structured data, such as social network data [16, 22, 37] or graph-based representations of molecules [7, 11, 15]. The general approach with GNNs is to view the underlying graph as a computation graph and learn neural network primitives that generate individual node embeddings by passing, transforming, and aggregating node feature information across the graph [15, 16]. The generated node embeddings can then be used as input to any differentiable prediction layer, e.g., for node classification [16] or link prediction [33], and the whole model can be trained in an end-to-end fashion.\nHowever, a major limitation of current GNN architectures is that they are inherently flat as they only propagate information across the edges of the graph and are unable to infer and aggregate the information in a hierarchical way. For example, in order to successfully encode the graph structure of organic molecules, one would ideally want to encode the local molecular structure (e.g., individual\nPreprint. Work in progress.\nar X\niv :1\n80 6.\n08 80\n4v 4\n[ cs\n.L G\natoms and their direct bonds) as well as the coarse-grained structure of the molecular graph (e.g., groups of atoms and bonds representing functional units in a molecule). This lack of hierarchical structure is especially problematic for the task of graph classification, where the goal is to predict the label associated with an entire graph. When applying GNNs to graph classification, the standard approach is to generate embeddings for all the nodes in the graph and then to globally pool all these node embeddings together, e.g., using a simple summation or neural network that operates over sets [7, 11, 15, 26]. This global pooling approach ignores any hierarchical structure that might be present in the graph, and it prevents researchers from building effective GNN models for predictive tasks over entire graphs.\nHere we propose DIFFPOOL, a differentiable graph pooling module that can be adapted to various graph neural network architectures in an hierarchical and end-to-end fashion (Figure 1). DIFFPOOL allows for developing deeper GNN models that can learn to operate on hierarchical representations of a graph. We develop a graph analogue of the spatial pooling operation in CNNs [24], which allows for deep CNN architectures to iteratively operate on coarser and coarser representations of an image. The challenge in the GNN setting—compared to standard CNNs—is that graphs contain no natural notion of spatial locality, i.e., one cannot simply pool together all nodes in a “m ×m patch” on a graph, because the complex topological structure of graphs precludes any straightforward, deterministic definition of a “patch”. Moreover, unlike image data, graph data sets often contain graphs with varying numbers of nodes and edges, which makes defining a general graph pooling operator even more challenging.\nIn order to solve the above challenges, we require a model that learns how to cluster together nodes to build a hierarchical multi-layer scaffold on top of the underlying graph. Our approach DIFFPOOL learns a differentiable soft assignment at each layer of a deep GNN, mapping nodes to a set of clusters based on their learned embeddings. In this framework, we generate deep GNNs by “stacking” GNN layers in a hierarchical fashion (Figure 1): the input nodes at the layer l GNN module correspond to the clusters learned at the layer l − 1 GNN module. Thus, each layer of DIFFPOOL coarsens the input graph more and more, and DIFFPOOL is able to generate a hierarchical representation of any input graph after training. We show that DIFFPOOL can be combined with various GNN approaches, resulting in an average 7% gain in accuracy and a new state of the art on four out of five benchmark graph classification tasks. Finally, we show that DIFFPOOL can learn interpretable hierarchical clusters that correspond to well-defined communities in the input graphs."
    }, {
      "heading" : "2 Related Work",
      "text" : "Our work builds upon a rich line of recent research on graph neural networks and graph classification.\nGeneral graph neural networks. A wide variety of graph neural network (GNN) models have been proposed in recent years, including methods inspired by convolutional neural networks [5, 8, 11, 16, 22, 25, 30, 37], recurrent neural networks [26], recursive neural networks [1, 31] and loopy belief propagation [7]. Most of these approaches fit within the framework of “neural message passing” proposed by Gilmer et al. [15]. In the message passing framework, a GNN is viewed as a\nmessage passing algorithm where node representations are iteratively computed from the features of their neighbor nodes using a differentiable aggregation function. Hamilton et al. [17] provides a conceptual review of recent advancements in this area, and Bronstein et al. [4] outlines connections to spectral graph convolutions.\nGraph classification with graph neural networks. GNNs have been applied to a wide variety of tasks, including node classification [16, 22], link prediction [32], graph classification [7, 11, 41], and chemoinformatics [29, 28, 14, 19, 33]. In the context of graph classification—the task that we study here—a major challenge in applying GNNs is going from node embeddings, which are the output of GNNs, to a representation of the entire graph. Common approaches to this problem include simply summing up or averaging all the node embeddings in a final layer [11], introducing a “virtual node” that is connected to all the nodes in the graph [26], or aggregating the node embeddings using a deep learning architecture that operates over sets [15]. However, all of these methods have the limitation that they do not learn hierarchical representations (i.e., all the node embeddings are globally pooled together in a single layer), and thus are unable to capture the natural structures of many real-world graphs. Some recent approaches have also proposed applying CNN architectures to the concatenation of all the node embeddings [30, 41], but this requires a specifying (or learning) a canonical ordering over nodes, which is in general very difficult and equivalent to solving graph isomorphism.\nLastly, there are some recent works that learn hierarchical graph representations by combining GNNs with deterministic graph clustering algorithms [8, 36, 13], following a two-stage approach. However, unlike these previous approaches, we seek to learn the hierarchical structure in an end-to-end fashion, rather than relying on a deterministic graph clustering subroutine."
    }, {
      "heading" : "3 Proposed Method",
      "text" : "The key idea of DIFFPOOL is that it enables the construction of deep, multi-layer GNN models by providing a differentiable module to hierarchically pool graph nodes. In this section, we outline the DIFFPOOL module and show how it is applied in a deep GNN architecture."
    }, {
      "heading" : "3.1 Preliminaries",
      "text" : "We represent a graph G as (A,F ), where A ∈ {0, 1}n×n is the adjacency matrix, and F ∈ Rn×d is the node feature matrix assuming each node has d features.1 Given a set of labeled graphs D = {(G1, y1), (G2, y2), ...} where yi ∈ Y is the label corresponding to graph Gi ∈ G, the goal of graph classification is to learn a mapping f : G → Y that maps graphs to the set of labels. The challenge—compared to standard supervised machine learning setup—is that we need a way to extract useful feature vectors from these input graphs. That is, in order to apply standard machine learning methods for classification, e.g., neural networks, we need a procedure to convert each graph to an finite dimensional vector in RD. Graph neural networks. In this work, we build upon graph neural networks in order to learn useful representations for graph classification in an end-to-end fashion. In particular, we consider GNNs that employ the following general “message-passing” architecture:\nH(k) =M(A,H(k−1); θ(k)), (1) where H(k) ∈ Rn×d are the node embeddings (i.e., “messages”) computed after k steps of the GNN and M is the message propagation function, which depends on the adjacency matrix, trainable parameters θ(k), and the node embeddings H(k−1) generated from the previous message-passing step.2 The input node embeddingsH(0) at the initial message-passing iteration (k = 1), are initialized using the node features on the graph, H(0) = F .\nThere are many possible implementations of the propagation function M [15, 16]. For example, one popular variant of GNNs—Kipf’s et al. [22] Graph Convolutional Networks (GCNs)—implements M using a combination of linear transformations and ReLU non-linearities:\nH(k) =M(A,H(k−1);W (k)) = ReLU(D̃− 1 2 ÃD̃− 1 2H(k−1)W (k−1)), (2)\n1We do not consider edge features, although one can easily extend the algorithm to support edge features using techniques introduced in [36].\n2For notational convenience, we assume that the embedding dimension is d for all H(k); however, in general this restriction is not necessary.\nwhere Ã = A+ I , D̃ = ∑\nj Ãij and W (k) ∈ Rd×d is a trainable weight matrix. The differentiable\npooling model we propose can be applied to any GNN model implementing Equation (1), and is agnostic with regards to the specifics of how M is implemented.\nA full GNN module will runK iterations of Equation (1) to generate the final output node embeddings Z = H(K) ∈ Rn×d, where K is usually in the range 2-6. For simplicity, in the following sections we will abstract away the internal structure of the GNNs and use Z = GNN(A,X) to denote an arbitrary GNN module implementing K iterations of message passing according to some adjacency matrix A and initial input node features X .\nStacking GNNs and pooling layers. GNNs implementing Equation (1) are inherently flat, as they only propagate information across edges of a graph. The goal of this work is to define a general, end-to-end differentiable strategy that allows one to stack multiple GNN modules in a hierarchical fashion. Formally, given Z = GNN(A,X), the output of a GNN module, and a graph adjacency matrix A ∈ Rn×n, we seek to define a strategy to output a new coarsened graph containing m < n nodes, with weighted adjacency matrix A\n′ ∈ Rm×m and node embeddings Z ′ ∈ Rm×d. This new coarsened graph can then be used as input to another GNN layer, and this whole process can be repeated L times, generating a model with L GNN layers that operate on a series of coarser and coarser versions of the input graph (Figure 1). Thus, our goal is to learn how to cluster or pool together nodes using the output of a GNN, so that we can use this coarsened graph as input to another GNN layer. What makes designing such a pooling layer for GNNs especially challenging—compared to the usual graph coarsening task—is that our goal is not to simply cluster the nodes in one graph, but to provide a general recipe to hierarchically pool nodes across a broad set of input graphs. That is, we need our model to learn a pooling strategy that will generalize across graphs with different nodes, edges, and that can adapt to the various graph structures during inference."
    }, {
      "heading" : "3.2 Differentiable Pooling via Learned Assignments",
      "text" : "Our proposed approach, DIFFPOOL, addresses the above challenges by learning a cluster assignment matrix over the nodes using the output of a GNN model. The key intuition is that we stack L GNN modules and learn to assign nodes to clusters at layer l in an end-to-end fashion, using embeddings generated from a GNN at layer l− 1. Thus, we are using GNNs to both extract node embeddings that are useful for graph classification, as well to extract node embeddings that are useful for hierarchical pooling. Using this construction, the GNNs in DIFFPOOL learn to encode a general pooling strategy that is useful for a large set of training graphs. We first describe how the DIFFPOOL module pools nodes at each layer given an assignment matrix; following this, we discuss how we generate the assignment matrix using a GNN architecture.\nPooling with an assignment matrix. We denote the learned cluster assignment matrix at layer l as S(l) ∈ Rnl×nl+1 . Each row of S(l) corresponds to one of the nl nodes (or clusters) at layer l, and each column of S(l) corresponds to one of the nl+1 clusters at the next layer l + 1. Intuitively, S(l) provides a soft assignment of each node at layer l to a cluster in the next coarsened layer l + 1.\nSuppose that S(l) has already been computed, i.e., that we have computed the assignment matrix at the l-th layer of our model. We denote the input adjacency matrix at this layer as A(l) and denote the input node embedding matrix at this layer as Z(l). Given these inputs, the DIFFPOOL layer (A(l+1), X(l+1)) = DIFFPOOL(A(l), Z(l)) coarsens the input graph, generating a new coarsened adjacency matrix A(l+1) and a new matrix of embeddings X(l+1) for each of the nodes/clusters in this coarsened graph. In particular, we apply the two following equations:\nX(l+1) = S(l) T Z(l) ∈ Rnl+1×d, (3)\nA(l+1) = S(l) T A(l)S(l) ∈ Rnl+1×nl+1 . (4)\nEquation (3) takes the node embeddings Z(l) and aggregates these embeddings according to the cluster assignments S(l), generating embeddings for each of the nl+1 clusters. Similarly, Equation (4) takes the adjacency matrix A(l) and generates a coarsened adjacency matrix denoting the connectivity strength between each pair of clusters.\nThrough Equations (3) and (4), the DIFFPOOL layer coarsens the graph: the next layer adjacency matrix A(l+1) represents a coarsened graph with nl+1 nodes or cluster nodes, where each individual\ncluster node in the new coarsened graph corresponds to a cluster of nodes in the graph at layer l. Note that A(l+1) is a real matrix and represents a fully connected edge-weighted graph; each entry A\n(l+1) ij can be viewed as the connectivity strength between cluster i and cluster j. Similarly, the i-th row of X(l+1) corresponds to the embedding of cluster i. Together, the coarsened adjacency matrix A(l+1) and cluster embeddings X(l+1) can be used as input to another GNN layer, a process which we describe in detail below.\nLearning the assignment matrix. In the following we describe the architecture of DIFFPOOL, i.e., how DIFFPOOL generates the assignment matrix S(l) and embedding matrices Z(l) that are used in Equations (3) and (4). We generate these two matrices using two separate GNNs that are both applied to the input cluster node features X(l) and coarsened adjacency matrix A(l). The embedding GNN at layer l is a standard GNN module applied to these inputs:\nZ(l) = GNNl,embed(A(l), X(l)), (5)\ni.e., we take the adjacency matrix between the cluster nodes at layer l (from Equation 4) and the pooled features for the clusters (from Equation 3) and pass these matrices through a standard GNN to get new embeddings Z(l) for the cluster nodes. In contrast, the pooling GNN at layer l, uses the input cluster features X(l) and cluster adjacency matrix A(l) to generate an assignment matrix:\nS(l) = softmax ( GNNl,pool(A(l), X(l)) ) , (6)\nwhere the softmax function is applied in a row-wise fashion. The output dimension of GNNl,pool corresponds to a pre-defined maximum number of clusters in layer l, and is a hyperparameter of the model.\nNote that these two GNNs consume the same input data but have distinct parameterizations and play separate roles: The embedding GNN generates new embeddings for the input nodes at this layer, while the pooling GNN generates a probabilistic assignment of the input nodes to nl+1 clusters.\nIn the base case, the inputs to Equations (5) and Equations (6) at layer l = 0 are simply the input adjacency matrix A and the node features F for the original graph. At the penultimate layer L− 1 of a deep GNN model using DIFFPOOL, we set the assignment matrix S(L−1) be a vector of 1’s, i.e., all nodes at the final layer L are assigned to a single cluster, generating a final embedding vector corresponding to the entire graph. This final output embedding can then be used as feature input to a differentiable classifier (e.g., a softmax layer), and the entire system can be trained end-to-end using stochastic gradient descent.\nPermutation invariance. Note that in order to be useful for graph classification, the pooling layer should be invariant under node permutations. For DIFFPOOL we get the following positive result, which shows that any deep GNN model based on DIFFPOOL is permutation invariant, as long as the component GNNs are permutation invariant.\nProposition 1. Let P ∈ {0, 1}n×n be any permutation matrix, then DIFFPOOL(A,Z) = DIFFPOOL(PAPT , PX) as long as GNN(A,X) = GNN(PAPT , X) (i.e., as long as the GNN method used is permutation invariant).\nProof. Equations (5) and (6) are permutation invariant by the assumption that the GNN module is permutation invariant. And since any permutation matrix is orthogonal, applying PTP = I to Equation (3) and (4) finishes the proof."
    }, {
      "heading" : "3.3 Auxiliary Link Prediction Objective and Entropy Regularization",
      "text" : "In practice, it can be difficult to train the pooling GNN (Equation 4) using only gradient signal from the graph classification task. Intuitively, we have a non-convex optimization problem and it can be difficult to push the pooling GNN away from spurious local minima early in training. To alleviate this issue, we train the pooling GNN with an auxiliary link prediction objective, which encodes the intuition that nearby nodes should be pooled together. In particular, at each layer l, we minimize LLP = ||A(l), S(l)S(l)\nT ||F , where || · ||F denotes the Frobenius norm. Note that the adjacency matrix A(l) at deeper layers is a function of lower level assignment matrices, and changes during training.\nAnother important characteristic of the pooling GNN (Equation 4) is that the output cluster assignment for each node should generally be close to a one-hot vector, so that the membership for each cluster or subgraph is clearly defined. We therefore regularize the entropy of the cluster assignment by minimizing LE = 1n ∑n i=1H(Si), where H denotes the entropy function, and Si is the i-th row of S.\nDuring training, LLP and LE from each layer are added to the classification loss. In practice we observe that training with the side objective takes longer to converge, but nevertheless achieves better performance and more interpretable cluster assignments."
    }, {
      "heading" : "4 Experiments",
      "text" : "We evaluate the benefits of DIFFPOOL against a number of state-of-the-art graph classification approaches, with the goal of answering the following questions:\nQ1 How does DIFFPOOL compare to other pooling methods proposed for GNNs (e.g., using sort pooling [41] or the SET2SET method [15])? Q2 How does DIFFPOOL combined with GNNs compare to the state-of-the-art for graph classification task, including both GNNs and kernel-based methods? Q3 Does DIFFPOOL compute meaningful and interpretable clusters on the input graphs?\nData sets. To probe the ability of DIFFPOOL to learn complex hierarchical structures from graphs in different domains, we evaluate on a variety of relatively large graph data sets chosen from benchmarks commonly used in graph classification [20]. We use protein data sets including ENZYMES, PROTEINS [3, 12], D&D [10], the social network data set REDDIT-MULTI-12K [40], and the scientific collaboration data set COLLAB [40]. See Appendix A for statistics and properties. For all these data sets, we perform 10-fold cross-validation to evaluate model performance, and report the accuracy averaged over 10 folds.\nModel configurations. In our experiments, the GNN model used for DIFFPOOL is built on top of the GRAPHSAGE architecture, as we found this architecture to have superior performance compared to the standard GCN approach as introduced in [22]. We use the “mean” variant of GRAPHSAGE [16] and apply a DIFFPOOL layer after every two GRAPHSAGE layers in our architecture. A total of 2 DIFFPOOL layers are used for the datasets. For small datasets such as ENZYMES and COLLAB, 1 DIFFPOOL layer can achieve similar performance. After each DIFFPOOL layer, 3 layers of graph convolutions are performed, before the next DIFFPOOL layer, or the readout layer. The embedding matrix and the assignment matrix are computed by two separate GRAPHSAGE models respectively. In the 2 DIFFPOOL layer architecture, the number of clusters is set as 25% of the number of nodes before applying DIFFPOOL, while in the 1 DIFFPOOL layer architecture, the number of clusters is set as 10%. Batch normalization [18] is applied after every layer of GRAPHSAGE. We also found that adding an `2 normalization to the node embeddings at each layer made the training more stable. In Section 4.2, we also test an analogous variant of DIFFPOOL on the STRUCTURE2VEC [7] architecture, in order to demonstrate how DIFFPOOL can be applied on top of other GNN models. All models are trained for 3 000 epochs with early stopping applied when the validation loss starts to drop. We also evaluate two simplified versions of DIFFPOOL: • DIFFPOOL-DET, is a DIFFPOOL model where assignment matrices are generated using a deter-\nministic graph clustering algorithm [9]. • DIFFPOOL-NOLP is a variant of DIFFPOOL where the link prediction side objective is turned off."
    }, {
      "heading" : "4.1 Baseline Methods",
      "text" : "In the performance comparison on graph classification, we consider baselines based upon GNNs (combined with different pooling methods) as well as state-of-the-art kernel-based approaches.\nGNN-based methods. • GRAPHSAGE with global mean-pooling [16]. Other GNN variants such as those proposed in [22]\nare omitted as empirically GraphSAGE obtained higher performance in the task. • STRUCTURE2VEC (S2V) [7] is a state-of-the-art graph representation learning algorithm that\ncombines a latent variable model with GNNs. It uses global mean pooling. • Edge-conditioned filters in CNN for graphs (ECC) [36] incorporates edge information into the\nGCN model and performs pooling using a graph coarsening algorithm.\nFor all the GNN baselines, we use 10-fold cross validation numbers reported by the original authors when possible. For the GRAPHSAGE and SET2SET baselines, we use the base implementation and hyperparameter sweeps as in our DIFFPOOL approach. When baseline approaches did not have the necessary published numbers, we contacted the original authors and used their code (if available) to run the model, performing a hyperparameter search based on the original author’s guidelines.\nKernel-based algorithms. We use the GRAPHLET [35], the SHORTEST-PATH [2], WEISFEILERLEHMAN kernel (WL) [34], and WEISFEILER-LEHMAN OPTIMAL ASSIGNMENT KERNEL (WLOA) [23] as kernel baselines. For each kernel, we computed the normalized gram matrix. We computed the classification accuracies using the C-SVM implementation of LIBSVM [6], using 10-fold cross validation. The C parameter was selected from {10−3, 10−2, . . . , 102, 103} by 10-fold cross validation on the training folds. Moreover, for WL and WL-OA we additionally selected the number of iteration from {0, . . . , 5}."
    }, {
      "heading" : "4.2 Results for Graph Classification",
      "text" : "Table 1 compares the performance of DIFFPOOL to these state-of-the-art graph classification baselines. These results provide positive answers to our motivating questions Q1 and Q2: We observe that our DIFFPOOL approach obtains the highest average performance among all pooling approaches for GNNs, improves upon the base GRAPHSAGE architecture by an average of 6.27%, and achieves stateof-the-art results on 4 out of 5 benchmarks. Interestingly, our simplified model variant, DIFFPOOLDET, achieves state-of-the-art performance on the COLLAB benchmark. This is because many collaboration graphs in COLLAB show only single-layer community structures, which can be captured well with pre-computed graph clustering algorithm [9]. One observation is that despite significant performance improvement, DIFFPOOL could be unstable to train, and there is significant variation in accuracy across different runs, even with the same hyperparameter setting. It is observed that adding the link predictioin objective makes training more stable, and reduces the standard deviation of accuracy across different runs.\nDifferentiable Pooling on STRUCTURE2VEC. DIFFPOOL can be applied to other GNN architectures besides GRAPHSAGE to capture hierarchical structure in the graph data. To further support answering Q1, we also applied DIFFPOOL on Structure2Vec (S2V). We ran experiments using S2V with three layer architecture, as reported in [7]. In the first variant, one DIFFPOOL layer is applied after the first layer of S2V, and two more S2V layers are stacked on top of the output of DIFFPOOL.\nThe second variant applies one DIFFPOOL layer after the first and second layer of S2V respectively. In both variants, S2V model is used to compute the embedding matrix, while GRAPHSAGE model is used to compute the assignment matrix.\nThe results in terms of classification accuracy are summarized in Table 2. We observe that DIFFPOOL significantly improves the performance of S2V on both ENZYMES and D&D data sets. Similar performance trends are also observed on other data sets. The results demonstrate that DIFFPOOL is a general strategy to pool over hierarchical structure that can benefit different GNN architectures.\nRunning time. Although applying DIFFPOOL requires additional computation of an assignment matrix, we observed that DIFFPOOL did not incur substantial additional running time in practice. This is because each DIFFPOOL layer reduces the size of graphs by extracting a coarser representation of the graph, which speeds up the graph convolution operation in the next layer. Concretely, we found that GRAPHSAGE with DIFFPOOL was 12× faster than the GRAPHSAGE model with SET2SET pooling, while still achieving significantly higher accuracy on all benchmarks."
    }, {
      "heading" : "4.3 Analysis of Cluster Assignment in DIFFPOOL",
      "text" : "Hierarchical cluster structure. To address Q3, we investigated the extent to which DIFFPOOL learns meaningful node clusters by visualizing the cluster assignments in different layers. Figure 2 shows such a visualization of node assignments in the first and second layers on a graph from COLLAB data set, where node color indicates its cluster membership. Node cluster membership is determined by taking the argmax of its cluster assignment probabilities. We observe that even when learning cluster assignment based solely on the graph classification objective, DIFFPOOL can still capture the hierarchical community structure. We also observe significant improvement in membership assignment quality with link prediction auxiliary objectives.\nDense vs. sparse subgraph structure. In addition, we observe that DIFFPOOL learns to collapse nodes into soft clusters in a non-uniform way, with a tendency to collapse densely-connected subgraphs into clusters. Since GNNs can efficiently perform message-passing on dense, clique-like subgraphs (due to their small diameters) [27], pooling together nodes in such a dense subgraph is not likely to lead to any loss of structural information. This intuitively explains why collapsing dense subgraphs is a useful pooling strategy for DIFFPOOL. In contrast, sparse subgraphs may contain many interesting structures, including path-, cycle- and tree-like structures, and given the high-diameter induced by sparsity, GNN message-passing may fail to capture these structures. Thus, by separately pooling distinct parts of a sparse subgraph, DIFFPOOL can learn to capture the meaningful structures present in sparse graph regions (e.g., as in Figure 2).\nAssignment for nodes with similar representations. Since the assignment network computes the soft cluster assignment based on features of input nodes and their neighbors, nodes with both similar input features and neighborhood structure will have similar cluster assignment. In fact, one can construct synthetic cases where 2 nodes, although far away, have exactly the same neighborhood structure and features for self and all neighbors. In this case the pooling network is forced to assign them into the same cluster, which is different from the concept of pooling in other architectures such as image ConvNets. In some cases we do observe that disconnected nodes are pooled together.\nIn practice we rely on the identifiability assumption similar to Theorem 1 in GraphSAGE [16], where nodes are identifiable via their features. This holds in many real datasets 3. The auxiliary link prediction objective is observed to also help discouraging nodes that are far away to be pooled together. Furthermore, it is possible to use more sophisticated GNN aggregation function such as\n3However, some chemistry molecular graph datasets contain many nodes that are structurally similar, and assignment network is observed to pool together nodes that are far away.\nhigh-order moments [38] to distinguish nodes that are similar in structure and feature space. The overall framework remains unchanged.\nSensitivity of the Pre-defined Maximum Number of Clusters. We found that the assignment varies according to the depth of the network and C, the maximum number of clusters. With larger C, the pooling GNN can model more complex hierarchical structure. The trade-off is that very large C results in more noise and less efficiency. Although the value of C is a pre-defined parameter, the pooling net learns to use the appropriate number of clusters by end-to-end training. In particular, some clusters might not be used by the assignment matrix. Column corresponding to unused cluster has low values for all nodes. This is observed in Figure 2(c), where nodes are assigned predominantly into 3 clusters."
    }, {
      "heading" : "5 Conclusion",
      "text" : "We introduced a differentiable pooling method for GNNs that is able to extract the complex hierarchical structure of real-world graphs. By using the proposed pooling layer in conjunction with existing GNN models, we achieved new state-of-the-art results on several graph classification benchmarks. Interesting future directions include learning hard cluster assignments to further reduce computational cost in higher layers while also ensuring differentiability, and applying the hierarchical pooling method to other downstream tasks that require modeling of the entire graph structure."
    }, {
      "heading" : "Acknowledgement",
      "text" : "This research has been supported in part by DARPA SIMPLEX, Stanford Data Science Initiative, Huawei, JD and Chan Zuckerberg Biohub. Christopher Morris is funded by the German Science Foundation (DFG) within the Collaborative Research Center SFB 876 “Providing Information by Resource-Constrained Data Analysis”, project A6 “Resource-efficient Graph Mining”. The authors also thank Marinka Zitnik for help in visualizing the high-level illustration of the proposed methods."
    } ],
    "references" : [ {
      "title" : "Processing directed acyclic graphs with recursive neural networks",
      "author" : [ "M. Bianchini", "M. Gori", "F. Scarselli" ],
      "venue" : "IEEE Transactions on Neural Networks, 12(6):1464–1470,",
      "citeRegEx" : "1",
      "shortCiteRegEx" : null,
      "year" : 2001
    }, {
      "title" : "Shortest-path kernels on graphs",
      "author" : [ "K.M. Borgwardt", "H.-P. Kriegel" ],
      "venue" : "IEEE International Conference on Data Mining, pages 74–81,",
      "citeRegEx" : "2",
      "shortCiteRegEx" : null,
      "year" : 2005
    }, {
      "title" : "Protein function prediction via graph kernels",
      "author" : [ "K.M. Borgwardt", "C.S. Ong", "S. Schönauer", "S.V.N. Vishwanathan", "A.J. Smola", "H.- P. Kriegel" ],
      "venue" : "Bioinformatics, 21(Supplement 1):i47–i56,",
      "citeRegEx" : "3",
      "shortCiteRegEx" : "3",
      "year" : 2005
    }, {
      "title" : "Geometric deep learning: Going beyond euclidean data",
      "author" : [ "M.M. Bronstein", "J. Bruna", "Y. LeCun", "A. Szlam", "P. Vandergheynst" ],
      "venue" : "IEEE Signal Processing Magazine, 34(4):18–42,",
      "citeRegEx" : "4",
      "shortCiteRegEx" : null,
      "year" : 2017
    }, {
      "title" : "Spectral networks and deep locally connected networks on graphs",
      "author" : [ "J. Bruna", "W. Zaremba", "A. Szlam", "Y. LeCun" ],
      "venue" : "International Conference on Learning Representations,",
      "citeRegEx" : "5",
      "shortCiteRegEx" : null,
      "year" : 2014
    }, {
      "title" : "LIBSVM: A library for support vector machines",
      "author" : [ "C.-C. Chang", "C.-J. Lin" ],
      "venue" : "ACM Transactions on Intelligent Systems and Technology, 2:27:1–27:27,",
      "citeRegEx" : "6",
      "shortCiteRegEx" : null,
      "year" : 2011
    }, {
      "title" : "Discriminative embeddings of latent variable models for structured data",
      "author" : [ "H. Dai", "B. Dai", "L. Song" ],
      "venue" : "International Conference on Machine Learning, pages 2702–2711,",
      "citeRegEx" : "7",
      "shortCiteRegEx" : null,
      "year" : 2016
    }, {
      "title" : "Convolutional neural networks on graphs with fast localized spectral filtering",
      "author" : [ "M. Defferrard", "X. Bresson", "P. Vandergheynst" ],
      "venue" : "Advances in Neural Information Processing Systems, pages 3844–3852,",
      "citeRegEx" : "8",
      "shortCiteRegEx" : null,
      "year" : 2016
    }, {
      "title" : "Weighted graph cuts without eigenvectors a multilevel approach",
      "author" : [ "I.S. Dhillon", "Y. Guan", "B. Kulis" ],
      "venue" : "IEEE Transactions on Pattern Analysis and Machine Intelligence, 29(11):1944–1957,",
      "citeRegEx" : "9",
      "shortCiteRegEx" : null,
      "year" : 2007
    }, {
      "title" : "Distinguishing enzyme structures from non-enzymes without alignments",
      "author" : [ "P.D. Dobson", "A.J. Doig" ],
      "venue" : "Journal of Molecular Biology, 330(4):771 – 783,",
      "citeRegEx" : "10",
      "shortCiteRegEx" : null,
      "year" : 2003
    }, {
      "title" : "Convolutional networks on graphs for learning molecular fingerprints",
      "author" : [ "D.K. Duvenaud", "D. Maclaurin", "J. Iparraguirre", "R. Bombarell", "T. Hirzel", "A. Aspuru-Guzik", "R.P. Adams" ],
      "venue" : "Advances in Neural Information Processing Systems, pages 2224–2232,",
      "citeRegEx" : "11",
      "shortCiteRegEx" : null,
      "year" : 2015
    }, {
      "title" : "Scalable kernels for graphs with continuous attributes",
      "author" : [ "A. Feragen", "N. Kasenburg", "J. Petersen", "M.D. Bruijne", "K.M. Borgwardt" ],
      "venue" : "Advances in Neural Information Processing Systems, pages 216–224,",
      "citeRegEx" : "12",
      "shortCiteRegEx" : null,
      "year" : 2013
    }, {
      "title" : "SplineCNN: Fast geometric deep learning with continuous B-spline kernels",
      "author" : [ "M. Fey", "J.E. Lenssen", "F. Weichert", "H. Müller" ],
      "venue" : "IEEE Conference on Computer Vision and Pattern Recognition,",
      "citeRegEx" : "13",
      "shortCiteRegEx" : null,
      "year" : 2018
    }, {
      "title" : "Protein interface prediction using graph convolutional networks",
      "author" : [ "A. Fout", "J. Byrd", "B. Shariat", "A. Ben-Hur" ],
      "venue" : "Advances in Neural Information Processing Systems, pages 6533–6542,",
      "citeRegEx" : "14",
      "shortCiteRegEx" : null,
      "year" : 2017
    }, {
      "title" : "Neural message passing for quantum chemistry",
      "author" : [ "J. Gilmer", "S.S. Schoenholz", "P.F. Riley", "O. Vinyals", "G.E. Dahl" ],
      "venue" : "International Conference on Machine Learning, pages 1263–1272,",
      "citeRegEx" : "15",
      "shortCiteRegEx" : null,
      "year" : 2017
    }, {
      "title" : "Inductive representation learning on large graphs",
      "author" : [ "W.L. Hamilton", "R. Ying", "J. Leskovec" ],
      "venue" : "Advances in Neural Information Processing Systems, pages 1025–1035,",
      "citeRegEx" : "16",
      "shortCiteRegEx" : null,
      "year" : 2017
    }, {
      "title" : "Representation learning on graphs: Methods and applications",
      "author" : [ "W.L. Hamilton", "R. Ying", "J. Leskovec" ],
      "venue" : "IEEE Data Engineering Bulletin, 40(3):52–74,",
      "citeRegEx" : "17",
      "shortCiteRegEx" : null,
      "year" : 2017
    }, {
      "title" : "Batch normalization: Accelerating deep network training by reducing internal covariate shift",
      "author" : [ "S. Ioffe", "C. Szegedy" ],
      "venue" : "International Conference on Machine Learning, pages 448–456,",
      "citeRegEx" : "18",
      "shortCiteRegEx" : null,
      "year" : 2015
    }, {
      "title" : "Predicting organic reaction outcomes with Weisfeiler-Lehman network",
      "author" : [ "W. Jin", "C.W. Coley", "R. Barzilay", "T.S. Jaakkola" ],
      "venue" : "Advances in Neural Information Processing Systems, pages 2604–2613,",
      "citeRegEx" : "19",
      "shortCiteRegEx" : null,
      "year" : 2017
    }, {
      "title" : "Benchmark data sets for graph kernels, 2016",
      "author" : [ "K. Kersting", "N.M. Kriege", "C. Morris", "P. Mutzel", "M. Neumann" ],
      "venue" : null,
      "citeRegEx" : "20",
      "shortCiteRegEx" : "20",
      "year" : 2016
    }, {
      "title" : "Neural relational inference for interacting systems",
      "author" : [ "T.N. Kipf", "E. Fetaya", "K.C. Wang", "M. Welling", "R. Zemel" ],
      "venue" : "International Conference on Machine Learning,",
      "citeRegEx" : "21",
      "shortCiteRegEx" : null,
      "year" : 2018
    }, {
      "title" : "Semi-supervised classification with graph convolutional networks",
      "author" : [ "T.N. Kipf", "M. Welling" ],
      "venue" : "International Conference on Learning Representations,",
      "citeRegEx" : "22",
      "shortCiteRegEx" : null,
      "year" : 2017
    }, {
      "title" : "On valid optimal assignment kernels and applications to graph classification",
      "author" : [ "N.M. Kriege", "P.-L. Giscard", "R. Wilson" ],
      "venue" : "Advances in Neural Information Processing Systems, pages 1623–1631,",
      "citeRegEx" : "23",
      "shortCiteRegEx" : null,
      "year" : 2016
    }, {
      "title" : "ImageNet classification with deep convolutional neural networks",
      "author" : [ "A. Krizhevsky", "I. Sutskever", "G.E. Hinton" ],
      "venue" : "Advances in Neural Information Processing Systems, pages 1097–1105,",
      "citeRegEx" : "24",
      "shortCiteRegEx" : null,
      "year" : 2012
    }, {
      "title" : "Deriving neural architectures from sequence and graph kernels",
      "author" : [ "T. Lei", "W. Jin", "R. Barzilay", "T.S. Jaakkola" ],
      "venue" : "International Conference on Machine Learning, pages 2024–2033,",
      "citeRegEx" : "25",
      "shortCiteRegEx" : null,
      "year" : 2017
    }, {
      "title" : "Gated graph sequence neural networks",
      "author" : [ "Y. Li", "D. Tarlow", "M. Brockschmidt", "R. Zemel" ],
      "venue" : "International Conference on Learning Representations,",
      "citeRegEx" : "26",
      "shortCiteRegEx" : null,
      "year" : 2016
    }, {
      "title" : "Graph partition neural networks for semi-supervised classification",
      "author" : [ "R. Liao", "M. Brockschmidt", "D. Tarlow", "A.L. Gaunt", "R. Urtasun", "R. Zemel" ],
      "venue" : "International Conference on Learning Representations (Workshop Track),",
      "citeRegEx" : "27",
      "shortCiteRegEx" : null,
      "year" : 2018
    }, {
      "title" : "Deep architectures and deep learning in chemoinformatics: The prediction of aqueous solubility for drug-like molecules",
      "author" : [ "A. Lusci", "G. Pollastri", "P. Baldi" ],
      "venue" : "Journal of Chemical Information and Modeling, 53(7):1563–1575,",
      "citeRegEx" : "28",
      "shortCiteRegEx" : null,
      "year" : 2013
    }, {
      "title" : "Automatic generation of complementary descriptors with molecular graph networks",
      "author" : [ "C. Merkwirth", "T. Lengauer" ],
      "venue" : "Journal of Chemical Information and Modeling, 45(5):1159–1168,",
      "citeRegEx" : "29",
      "shortCiteRegEx" : null,
      "year" : 2005
    }, {
      "title" : "Learning convolutional neural networks for graphs",
      "author" : [ "M. Niepert", "M. Ahmed", "K. Kutzkov" ],
      "venue" : "International Conference on Machine Learning, pages 2014–2023,",
      "citeRegEx" : "30",
      "shortCiteRegEx" : null,
      "year" : 2016
    }, {
      "title" : "The graph neural network model",
      "author" : [ "F. Scarselli", "M. Gori", "A.C. Tsoi", "M. Hagenbuchner", "G. Monfardini" ],
      "venue" : "Transactions on Neural Networks, 20(1):61–80,",
      "citeRegEx" : "31",
      "shortCiteRegEx" : null,
      "year" : 2009
    }, {
      "title" : "Modeling relational data with graph convolutional networks",
      "author" : [ "M. Schlichtkrull", "T.N. Kipf", "P. Bloem", "R. van den Berg", "I. Titov", "M. Welling" ],
      "venue" : "In Extended Semantic Web Conference,",
      "citeRegEx" : "32",
      "shortCiteRegEx" : "32",
      "year" : 2018
    }, {
      "title" : "SchNet: A continuous-filter convolutional neural network for modeling quantum interactions",
      "author" : [ "K. Schütt", "P.J. Kindermans", "H.E. Sauceda", "S. Chmiela", "A. Tkatchenko", "K.R. Müller" ],
      "venue" : "Advances in Neural Information Processing Systems, pages 992–1002,",
      "citeRegEx" : "33",
      "shortCiteRegEx" : null,
      "year" : 2017
    }, {
      "title" : "Weisfeiler-Lehman graph kernels",
      "author" : [ "N. Shervashidze", "P. Schweitzer", "E.J. van Leeuwen", "K. Mehlhorn", "K.M. Borgwardt" ],
      "venue" : "Journal of Machine Learning Research,",
      "citeRegEx" : "34",
      "shortCiteRegEx" : "34",
      "year" : 2011
    }, {
      "title" : "Efficient graphlet kernels for large graph comparison",
      "author" : [ "N. Shervashidze", "S.V.N. Vishwanathan", "T.H. Petri", "K. Mehlhorn", "K.M. Borgwardt" ],
      "venue" : "International Conference on Artificial Intelligence and Statistics, pages 488–495,",
      "citeRegEx" : "35",
      "shortCiteRegEx" : null,
      "year" : 2009
    }, {
      "title" : "Dynamic edge-conditioned filters in convolutional neural networks on graphs",
      "author" : [ "M. Simonovsky", "N. Komodakis" ],
      "venue" : "IEEE Conference on Computer Vision and Pattern Recognition, pages 29–38,",
      "citeRegEx" : "36",
      "shortCiteRegEx" : null,
      "year" : 2017
    }, {
      "title" : "Graph attention networks",
      "author" : [ "P. Veličković", "G. Cucurull", "A. Casanova", "A. Romero", "P. Liò", "Y. Bengio" ],
      "venue" : "International Conference on Learning Representations,",
      "citeRegEx" : "37",
      "shortCiteRegEx" : null,
      "year" : 2018
    }, {
      "title" : "Graph capsule convolutional neural networks",
      "author" : [ "S. Verma", "Z.-L. Zhang" ],
      "venue" : "arXiv preprint arXiv:1805.08090,",
      "citeRegEx" : "38",
      "shortCiteRegEx" : null,
      "year" : 2018
    }, {
      "title" : "Order matters: Sequence to sequence for sets",
      "author" : [ "O. Vinyals", "S. Bengio", "M. Kudlur" ],
      "venue" : "International Conference on Learning Representations,",
      "citeRegEx" : "39",
      "shortCiteRegEx" : null,
      "year" : 2015
    }, {
      "title" : "A structural smoothing framework for robust graph comparison",
      "author" : [ "P. Yanardag", "S.V.N. Vishwanathan" ],
      "venue" : "Advances in Neural Information Processing Systems, pages 2134–2142,",
      "citeRegEx" : "40",
      "shortCiteRegEx" : null,
      "year" : 2015
    }, {
      "title" : "An end-to-end deep learning architecture for graph classification",
      "author" : [ "M. Zhang", "Z. Cui", "M. Neumann", "Y. Chen" ],
      "venue" : "AAAI Conference on Artificial Intelligence,",
      "citeRegEx" : "41",
      "shortCiteRegEx" : null,
      "year" : 2018
    } ],
    "referenceMentions" : [ {
      "referenceID" : 15,
      "context" : "In recent years there has been a surge of interest in developing graph neural networks (GNNs)— general deep learning architectures that can operate over graph structured data, such as social network data [16, 22, 37] or graph-based representations of molecules [7, 11, 15].",
      "startOffset" : 204,
      "endOffset" : 216
    }, {
      "referenceID" : 21,
      "context" : "In recent years there has been a surge of interest in developing graph neural networks (GNNs)— general deep learning architectures that can operate over graph structured data, such as social network data [16, 22, 37] or graph-based representations of molecules [7, 11, 15].",
      "startOffset" : 204,
      "endOffset" : 216
    }, {
      "referenceID" : 36,
      "context" : "In recent years there has been a surge of interest in developing graph neural networks (GNNs)— general deep learning architectures that can operate over graph structured data, such as social network data [16, 22, 37] or graph-based representations of molecules [7, 11, 15].",
      "startOffset" : 204,
      "endOffset" : 216
    }, {
      "referenceID" : 6,
      "context" : "In recent years there has been a surge of interest in developing graph neural networks (GNNs)— general deep learning architectures that can operate over graph structured data, such as social network data [16, 22, 37] or graph-based representations of molecules [7, 11, 15].",
      "startOffset" : 261,
      "endOffset" : 272
    }, {
      "referenceID" : 10,
      "context" : "In recent years there has been a surge of interest in developing graph neural networks (GNNs)— general deep learning architectures that can operate over graph structured data, such as social network data [16, 22, 37] or graph-based representations of molecules [7, 11, 15].",
      "startOffset" : 261,
      "endOffset" : 272
    }, {
      "referenceID" : 14,
      "context" : "In recent years there has been a surge of interest in developing graph neural networks (GNNs)— general deep learning architectures that can operate over graph structured data, such as social network data [16, 22, 37] or graph-based representations of molecules [7, 11, 15].",
      "startOffset" : 261,
      "endOffset" : 272
    }, {
      "referenceID" : 14,
      "context" : "The general approach with GNNs is to view the underlying graph as a computation graph and learn neural network primitives that generate individual node embeddings by passing, transforming, and aggregating node feature information across the graph [15, 16].",
      "startOffset" : 247,
      "endOffset" : 255
    }, {
      "referenceID" : 15,
      "context" : "The general approach with GNNs is to view the underlying graph as a computation graph and learn neural network primitives that generate individual node embeddings by passing, transforming, and aggregating node feature information across the graph [15, 16].",
      "startOffset" : 247,
      "endOffset" : 255
    }, {
      "referenceID" : 15,
      "context" : ", for node classification [16] or link prediction [33], and the whole model can be trained in an end-to-end fashion.",
      "startOffset" : 26,
      "endOffset" : 30
    }, {
      "referenceID" : 32,
      "context" : ", for node classification [16] or link prediction [33], and the whole model can be trained in an end-to-end fashion.",
      "startOffset" : 50,
      "endOffset" : 54
    }, {
      "referenceID" : 6,
      "context" : ", using a simple summation or neural network that operates over sets [7, 11, 15, 26].",
      "startOffset" : 69,
      "endOffset" : 84
    }, {
      "referenceID" : 10,
      "context" : ", using a simple summation or neural network that operates over sets [7, 11, 15, 26].",
      "startOffset" : 69,
      "endOffset" : 84
    }, {
      "referenceID" : 14,
      "context" : ", using a simple summation or neural network that operates over sets [7, 11, 15, 26].",
      "startOffset" : 69,
      "endOffset" : 84
    }, {
      "referenceID" : 25,
      "context" : ", using a simple summation or neural network that operates over sets [7, 11, 15, 26].",
      "startOffset" : 69,
      "endOffset" : 84
    }, {
      "referenceID" : 23,
      "context" : "We develop a graph analogue of the spatial pooling operation in CNNs [24], which allows for deep CNN architectures to iteratively operate on coarser and coarser representations of an image.",
      "startOffset" : 69,
      "endOffset" : 73
    }, {
      "referenceID" : 4,
      "context" : "A wide variety of graph neural network (GNN) models have been proposed in recent years, including methods inspired by convolutional neural networks [5, 8, 11, 16, 22, 25, 30, 37], recurrent neural networks [26], recursive neural networks [1, 31] and loopy belief propagation [7].",
      "startOffset" : 148,
      "endOffset" : 178
    }, {
      "referenceID" : 7,
      "context" : "A wide variety of graph neural network (GNN) models have been proposed in recent years, including methods inspired by convolutional neural networks [5, 8, 11, 16, 22, 25, 30, 37], recurrent neural networks [26], recursive neural networks [1, 31] and loopy belief propagation [7].",
      "startOffset" : 148,
      "endOffset" : 178
    }, {
      "referenceID" : 10,
      "context" : "A wide variety of graph neural network (GNN) models have been proposed in recent years, including methods inspired by convolutional neural networks [5, 8, 11, 16, 22, 25, 30, 37], recurrent neural networks [26], recursive neural networks [1, 31] and loopy belief propagation [7].",
      "startOffset" : 148,
      "endOffset" : 178
    }, {
      "referenceID" : 15,
      "context" : "A wide variety of graph neural network (GNN) models have been proposed in recent years, including methods inspired by convolutional neural networks [5, 8, 11, 16, 22, 25, 30, 37], recurrent neural networks [26], recursive neural networks [1, 31] and loopy belief propagation [7].",
      "startOffset" : 148,
      "endOffset" : 178
    }, {
      "referenceID" : 21,
      "context" : "A wide variety of graph neural network (GNN) models have been proposed in recent years, including methods inspired by convolutional neural networks [5, 8, 11, 16, 22, 25, 30, 37], recurrent neural networks [26], recursive neural networks [1, 31] and loopy belief propagation [7].",
      "startOffset" : 148,
      "endOffset" : 178
    }, {
      "referenceID" : 24,
      "context" : "A wide variety of graph neural network (GNN) models have been proposed in recent years, including methods inspired by convolutional neural networks [5, 8, 11, 16, 22, 25, 30, 37], recurrent neural networks [26], recursive neural networks [1, 31] and loopy belief propagation [7].",
      "startOffset" : 148,
      "endOffset" : 178
    }, {
      "referenceID" : 29,
      "context" : "A wide variety of graph neural network (GNN) models have been proposed in recent years, including methods inspired by convolutional neural networks [5, 8, 11, 16, 22, 25, 30, 37], recurrent neural networks [26], recursive neural networks [1, 31] and loopy belief propagation [7].",
      "startOffset" : 148,
      "endOffset" : 178
    }, {
      "referenceID" : 36,
      "context" : "A wide variety of graph neural network (GNN) models have been proposed in recent years, including methods inspired by convolutional neural networks [5, 8, 11, 16, 22, 25, 30, 37], recurrent neural networks [26], recursive neural networks [1, 31] and loopy belief propagation [7].",
      "startOffset" : 148,
      "endOffset" : 178
    }, {
      "referenceID" : 25,
      "context" : "A wide variety of graph neural network (GNN) models have been proposed in recent years, including methods inspired by convolutional neural networks [5, 8, 11, 16, 22, 25, 30, 37], recurrent neural networks [26], recursive neural networks [1, 31] and loopy belief propagation [7].",
      "startOffset" : 206,
      "endOffset" : 210
    }, {
      "referenceID" : 0,
      "context" : "A wide variety of graph neural network (GNN) models have been proposed in recent years, including methods inspired by convolutional neural networks [5, 8, 11, 16, 22, 25, 30, 37], recurrent neural networks [26], recursive neural networks [1, 31] and loopy belief propagation [7].",
      "startOffset" : 238,
      "endOffset" : 245
    }, {
      "referenceID" : 30,
      "context" : "A wide variety of graph neural network (GNN) models have been proposed in recent years, including methods inspired by convolutional neural networks [5, 8, 11, 16, 22, 25, 30, 37], recurrent neural networks [26], recursive neural networks [1, 31] and loopy belief propagation [7].",
      "startOffset" : 238,
      "endOffset" : 245
    }, {
      "referenceID" : 6,
      "context" : "A wide variety of graph neural network (GNN) models have been proposed in recent years, including methods inspired by convolutional neural networks [5, 8, 11, 16, 22, 25, 30, 37], recurrent neural networks [26], recursive neural networks [1, 31] and loopy belief propagation [7].",
      "startOffset" : 275,
      "endOffset" : 278
    }, {
      "referenceID" : 16,
      "context" : "[17] provides a conceptual review of recent advancements in this area, and Bronstein et al.",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 3,
      "context" : "[4] outlines connections to spectral graph convolutions.",
      "startOffset" : 0,
      "endOffset" : 3
    }, {
      "referenceID" : 15,
      "context" : "GNNs have been applied to a wide variety of tasks, including node classification [16, 22], link prediction [32], graph classification [7, 11, 41], and chemoinformatics [29, 28, 14, 19, 33].",
      "startOffset" : 81,
      "endOffset" : 89
    }, {
      "referenceID" : 21,
      "context" : "GNNs have been applied to a wide variety of tasks, including node classification [16, 22], link prediction [32], graph classification [7, 11, 41], and chemoinformatics [29, 28, 14, 19, 33].",
      "startOffset" : 81,
      "endOffset" : 89
    }, {
      "referenceID" : 31,
      "context" : "GNNs have been applied to a wide variety of tasks, including node classification [16, 22], link prediction [32], graph classification [7, 11, 41], and chemoinformatics [29, 28, 14, 19, 33].",
      "startOffset" : 107,
      "endOffset" : 111
    }, {
      "referenceID" : 6,
      "context" : "GNNs have been applied to a wide variety of tasks, including node classification [16, 22], link prediction [32], graph classification [7, 11, 41], and chemoinformatics [29, 28, 14, 19, 33].",
      "startOffset" : 134,
      "endOffset" : 145
    }, {
      "referenceID" : 10,
      "context" : "GNNs have been applied to a wide variety of tasks, including node classification [16, 22], link prediction [32], graph classification [7, 11, 41], and chemoinformatics [29, 28, 14, 19, 33].",
      "startOffset" : 134,
      "endOffset" : 145
    }, {
      "referenceID" : 40,
      "context" : "GNNs have been applied to a wide variety of tasks, including node classification [16, 22], link prediction [32], graph classification [7, 11, 41], and chemoinformatics [29, 28, 14, 19, 33].",
      "startOffset" : 134,
      "endOffset" : 145
    }, {
      "referenceID" : 28,
      "context" : "GNNs have been applied to a wide variety of tasks, including node classification [16, 22], link prediction [32], graph classification [7, 11, 41], and chemoinformatics [29, 28, 14, 19, 33].",
      "startOffset" : 168,
      "endOffset" : 188
    }, {
      "referenceID" : 27,
      "context" : "GNNs have been applied to a wide variety of tasks, including node classification [16, 22], link prediction [32], graph classification [7, 11, 41], and chemoinformatics [29, 28, 14, 19, 33].",
      "startOffset" : 168,
      "endOffset" : 188
    }, {
      "referenceID" : 13,
      "context" : "GNNs have been applied to a wide variety of tasks, including node classification [16, 22], link prediction [32], graph classification [7, 11, 41], and chemoinformatics [29, 28, 14, 19, 33].",
      "startOffset" : 168,
      "endOffset" : 188
    }, {
      "referenceID" : 18,
      "context" : "GNNs have been applied to a wide variety of tasks, including node classification [16, 22], link prediction [32], graph classification [7, 11, 41], and chemoinformatics [29, 28, 14, 19, 33].",
      "startOffset" : 168,
      "endOffset" : 188
    }, {
      "referenceID" : 32,
      "context" : "GNNs have been applied to a wide variety of tasks, including node classification [16, 22], link prediction [32], graph classification [7, 11, 41], and chemoinformatics [29, 28, 14, 19, 33].",
      "startOffset" : 168,
      "endOffset" : 188
    }, {
      "referenceID" : 10,
      "context" : "Common approaches to this problem include simply summing up or averaging all the node embeddings in a final layer [11], introducing a “virtual node” that is connected to all the nodes in the graph [26], or aggregating the node embeddings using a deep learning architecture that operates over sets [15].",
      "startOffset" : 114,
      "endOffset" : 118
    }, {
      "referenceID" : 25,
      "context" : "Common approaches to this problem include simply summing up or averaging all the node embeddings in a final layer [11], introducing a “virtual node” that is connected to all the nodes in the graph [26], or aggregating the node embeddings using a deep learning architecture that operates over sets [15].",
      "startOffset" : 197,
      "endOffset" : 201
    }, {
      "referenceID" : 14,
      "context" : "Common approaches to this problem include simply summing up or averaging all the node embeddings in a final layer [11], introducing a “virtual node” that is connected to all the nodes in the graph [26], or aggregating the node embeddings using a deep learning architecture that operates over sets [15].",
      "startOffset" : 297,
      "endOffset" : 301
    }, {
      "referenceID" : 29,
      "context" : "Some recent approaches have also proposed applying CNN architectures to the concatenation of all the node embeddings [30, 41], but this requires a specifying (or learning) a canonical ordering over nodes, which is in general very difficult and equivalent to solving graph isomorphism.",
      "startOffset" : 117,
      "endOffset" : 125
    }, {
      "referenceID" : 40,
      "context" : "Some recent approaches have also proposed applying CNN architectures to the concatenation of all the node embeddings [30, 41], but this requires a specifying (or learning) a canonical ordering over nodes, which is in general very difficult and equivalent to solving graph isomorphism.",
      "startOffset" : 117,
      "endOffset" : 125
    }, {
      "referenceID" : 7,
      "context" : "Lastly, there are some recent works that learn hierarchical graph representations by combining GNNs with deterministic graph clustering algorithms [8, 36, 13], following a two-stage approach.",
      "startOffset" : 147,
      "endOffset" : 158
    }, {
      "referenceID" : 35,
      "context" : "Lastly, there are some recent works that learn hierarchical graph representations by combining GNNs with deterministic graph clustering algorithms [8, 36, 13], following a two-stage approach.",
      "startOffset" : 147,
      "endOffset" : 158
    }, {
      "referenceID" : 12,
      "context" : "Lastly, there are some recent works that learn hierarchical graph representations by combining GNNs with deterministic graph clustering algorithms [8, 36, 13], following a two-stage approach.",
      "startOffset" : 147,
      "endOffset" : 158
    }, {
      "referenceID" : 14,
      "context" : "There are many possible implementations of the propagation function M [15, 16].",
      "startOffset" : 70,
      "endOffset" : 78
    }, {
      "referenceID" : 15,
      "context" : "There are many possible implementations of the propagation function M [15, 16].",
      "startOffset" : 70,
      "endOffset" : 78
    }, {
      "referenceID" : 21,
      "context" : "[22] Graph Convolutional Networks (GCNs)—implements M using a combination of linear transformations and ReLU non-linearities: H =M(A,H(k−1);W ) = ReLU(D̃− 1 2 ÃD̃− 1 2H(k−1)W (k−1)), (2)",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 35,
      "context" : "We do not consider edge features, although one can easily extend the algorithm to support edge features using techniques introduced in [36].",
      "startOffset" : 135,
      "endOffset" : 139
    }, {
      "referenceID" : 40,
      "context" : ", using sort pooling [41] or the SET2SET method [15])? Q2 How does DIFFPOOL combined with GNNs compare to the state-of-the-art for graph classification task, including both GNNs and kernel-based methods? Q3 Does DIFFPOOL compute meaningful and interpretable clusters on the input graphs?",
      "startOffset" : 21,
      "endOffset" : 25
    }, {
      "referenceID" : 14,
      "context" : ", using sort pooling [41] or the SET2SET method [15])? Q2 How does DIFFPOOL combined with GNNs compare to the state-of-the-art for graph classification task, including both GNNs and kernel-based methods? Q3 Does DIFFPOOL compute meaningful and interpretable clusters on the input graphs?",
      "startOffset" : 48,
      "endOffset" : 52
    }, {
      "referenceID" : 19,
      "context" : "To probe the ability of DIFFPOOL to learn complex hierarchical structures from graphs in different domains, we evaluate on a variety of relatively large graph data sets chosen from benchmarks commonly used in graph classification [20].",
      "startOffset" : 230,
      "endOffset" : 234
    }, {
      "referenceID" : 2,
      "context" : "We use protein data sets including ENZYMES, PROTEINS [3, 12], D&D [10], the social network data set REDDIT-MULTI-12K [40], and the scientific collaboration data set COLLAB [40].",
      "startOffset" : 53,
      "endOffset" : 60
    }, {
      "referenceID" : 11,
      "context" : "We use protein data sets including ENZYMES, PROTEINS [3, 12], D&D [10], the social network data set REDDIT-MULTI-12K [40], and the scientific collaboration data set COLLAB [40].",
      "startOffset" : 53,
      "endOffset" : 60
    }, {
      "referenceID" : 9,
      "context" : "We use protein data sets including ENZYMES, PROTEINS [3, 12], D&D [10], the social network data set REDDIT-MULTI-12K [40], and the scientific collaboration data set COLLAB [40].",
      "startOffset" : 66,
      "endOffset" : 70
    }, {
      "referenceID" : 39,
      "context" : "We use protein data sets including ENZYMES, PROTEINS [3, 12], D&D [10], the social network data set REDDIT-MULTI-12K [40], and the scientific collaboration data set COLLAB [40].",
      "startOffset" : 117,
      "endOffset" : 121
    }, {
      "referenceID" : 39,
      "context" : "We use protein data sets including ENZYMES, PROTEINS [3, 12], D&D [10], the social network data set REDDIT-MULTI-12K [40], and the scientific collaboration data set COLLAB [40].",
      "startOffset" : 172,
      "endOffset" : 176
    }, {
      "referenceID" : 21,
      "context" : "In our experiments, the GNN model used for DIFFPOOL is built on top of the GRAPHSAGE architecture, as we found this architecture to have superior performance compared to the standard GCN approach as introduced in [22].",
      "startOffset" : 213,
      "endOffset" : 217
    }, {
      "referenceID" : 15,
      "context" : "We use the “mean” variant of GRAPHSAGE [16] and apply a DIFFPOOL layer after every two GRAPHSAGE layers in our architecture.",
      "startOffset" : 39,
      "endOffset" : 43
    }, {
      "referenceID" : 17,
      "context" : "Batch normalization [18] is applied after every layer of GRAPHSAGE.",
      "startOffset" : 20,
      "endOffset" : 24
    }, {
      "referenceID" : 6,
      "context" : "2, we also test an analogous variant of DIFFPOOL on the STRUCTURE2VEC [7] architecture, in order to demonstrate how DIFFPOOL can be applied on top of other GNN models.",
      "startOffset" : 70,
      "endOffset" : 73
    }, {
      "referenceID" : 8,
      "context" : "We also evaluate two simplified versions of DIFFPOOL: • DIFFPOOL-DET, is a DIFFPOOL model where assignment matrices are generated using a deterministic graph clustering algorithm [9].",
      "startOffset" : 179,
      "endOffset" : 182
    }, {
      "referenceID" : 15,
      "context" : "• GRAPHSAGE with global mean-pooling [16].",
      "startOffset" : 37,
      "endOffset" : 41
    }, {
      "referenceID" : 21,
      "context" : "Other GNN variants such as those proposed in [22] are omitted as empirically GraphSAGE obtained higher performance in the task.",
      "startOffset" : 45,
      "endOffset" : 49
    }, {
      "referenceID" : 6,
      "context" : "• STRUCTURE2VEC (S2V) [7] is a state-of-the-art graph representation learning algorithm that combines a latent variable model with GNNs.",
      "startOffset" : 22,
      "endOffset" : 25
    }, {
      "referenceID" : 35,
      "context" : "• Edge-conditioned filters in CNN for graphs (ECC) [36] incorporates edge information into the GCN model and performs pooling using a graph coarsening algorithm.",
      "startOffset" : 51,
      "endOffset" : 55
    }, {
      "referenceID" : 29,
      "context" : "• PATCHYSAN [30] defines a receptive field (neighborhood) for each node, and using a canonical node ordering, applies convolutions on linear sequences of node embeddings.",
      "startOffset" : 12,
      "endOffset" : 16
    }, {
      "referenceID" : 38,
      "context" : "• SET2SET replaces the global mean-pooling in the traditional GNN architectures by the aggregation used in SET2SET [39].",
      "startOffset" : 115,
      "endOffset" : 119
    }, {
      "referenceID" : 14,
      "context" : "Set2Set aggregation has been shown to perform better than mean pooling in previous work [15].",
      "startOffset" : 88,
      "endOffset" : 92
    }, {
      "referenceID" : 40,
      "context" : "• SORTPOOL [41] applies a GNN architecture and then performs a single layer of soft pooling followed by 1D convolution on sorted node embeddings.",
      "startOffset" : 11,
      "endOffset" : 15
    }, {
      "referenceID" : 34,
      "context" : "We use the GRAPHLET [35], the SHORTEST-PATH [2], WEISFEILERLEHMAN kernel (WL) [34], and WEISFEILER-LEHMAN OPTIMAL ASSIGNMENT KERNEL (WLOA) [23] as kernel baselines.",
      "startOffset" : 20,
      "endOffset" : 24
    }, {
      "referenceID" : 1,
      "context" : "We use the GRAPHLET [35], the SHORTEST-PATH [2], WEISFEILERLEHMAN kernel (WL) [34], and WEISFEILER-LEHMAN OPTIMAL ASSIGNMENT KERNEL (WLOA) [23] as kernel baselines.",
      "startOffset" : 44,
      "endOffset" : 47
    }, {
      "referenceID" : 33,
      "context" : "We use the GRAPHLET [35], the SHORTEST-PATH [2], WEISFEILERLEHMAN kernel (WL) [34], and WEISFEILER-LEHMAN OPTIMAL ASSIGNMENT KERNEL (WLOA) [23] as kernel baselines.",
      "startOffset" : 78,
      "endOffset" : 82
    }, {
      "referenceID" : 22,
      "context" : "We use the GRAPHLET [35], the SHORTEST-PATH [2], WEISFEILERLEHMAN kernel (WL) [34], and WEISFEILER-LEHMAN OPTIMAL ASSIGNMENT KERNEL (WLOA) [23] as kernel baselines.",
      "startOffset" : 139,
      "endOffset" : 143
    }, {
      "referenceID" : 5,
      "context" : "We computed the classification accuracies using the C-SVM implementation of LIBSVM [6], using 10-fold cross validation.",
      "startOffset" : 83,
      "endOffset" : 86
    }, {
      "referenceID" : 8,
      "context" : "This is because many collaboration graphs in COLLAB show only single-layer community structures, which can be captured well with pre-computed graph clustering algorithm [9].",
      "startOffset" : 169,
      "endOffset" : 172
    }, {
      "referenceID" : 6,
      "context" : "We ran experiments using S2V with three layer architecture, as reported in [7].",
      "startOffset" : 75,
      "endOffset" : 78
    }, {
      "referenceID" : 26,
      "context" : "Since GNNs can efficiently perform message-passing on dense, clique-like subgraphs (due to their small diameters) [27], pooling together nodes in such a dense subgraph is not likely to lead to any loss of structural information.",
      "startOffset" : 114,
      "endOffset" : 118
    }, {
      "referenceID" : 15,
      "context" : "In practice we rely on the identifiability assumption similar to Theorem 1 in GraphSAGE [16], where nodes are identifiable via their features.",
      "startOffset" : 88,
      "endOffset" : 92
    }, {
      "referenceID" : 37,
      "context" : "high-order moments [38] to distinguish nodes that are similar in structure and feature space.",
      "startOffset" : 19,
      "endOffset" : 23
    } ],
    "year" : 2019,
    "abstractText" : "Recently, graph neural networks (GNNs) have revolutionized the field of graph representation learning through effectively learned node embeddings, and achieved state-of-the-art results in tasks such as node classification and link prediction. However, current GNN methods are inherently flat and do not learn hierarchical representations of graphs—a limitation that is especially problematic for the task of graph classification, where the goal is to predict the label associated with an entire graph. Here we propose DIFFPOOL, a differentiable graph pooling module that can generate hierarchical representations of graphs and can be combined with various graph neural network architectures in an end-to-end fashion. DIFFPOOL learns a differentiable soft cluster assignment for nodes at each layer of a deep GNN, mapping nodes to a set of clusters, which then form the coarsened input for the next GNN layer. Our experimental results show that combining existing GNN methods with DIFFPOOL yields an average improvement of 5–10% accuracy on graph classification benchmarks, compared to all existing pooling approaches, achieving a new state-of-the-art on four out of five benchmark data sets.",
    "creator" : "LaTeX with hyperref package"
  }
}