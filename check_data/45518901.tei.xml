<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/cindy/tmp/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Secure Coding Practices in Java: Challenges and Vulnerabilities</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date type="published" when="2017-09-28">28 Sep 2017</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Na</forename><surname>Meng</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Virginia Tech Blacksburg</orgName>
								<address>
									<addrLine>snagy2,danfeng</addrLine>
									<postCode>24060 {nm8247</postCode>
									<region>Virginia</region>
								</address>
							</affiliation>
							<affiliation key="aff0">
								<orgName type="institution">Virginia Tech Blacksburg</orgName>
								<address>
									<addrLine>snagy2,danfeng</addrLine>
									<postCode>24060 {nm8247</postCode>
									<region>Virginia</region>
								</address>
							</affiliation>
							<affiliation key="aff0">
								<orgName type="institution">Virginia Tech Blacksburg</orgName>
								<address>
									<addrLine>snagy2,danfeng</addrLine>
									<postCode>24060 {nm8247</postCode>
									<region>Virginia</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stefan</forename><surname>Nagy</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Virginia Tech Blacksburg</orgName>
								<address>
									<addrLine>snagy2,danfeng</addrLine>
									<postCode>24060 {nm8247</postCode>
									<region>Virginia</region>
								</address>
							</affiliation>
							<affiliation key="aff0">
								<orgName type="institution">Virginia Tech Blacksburg</orgName>
								<address>
									<addrLine>snagy2,danfeng</addrLine>
									<postCode>24060 {nm8247</postCode>
									<region>Virginia</region>
								</address>
							</affiliation>
							<affiliation key="aff0">
								<orgName type="institution">Virginia Tech Blacksburg</orgName>
								<address>
									<addrLine>snagy2,danfeng</addrLine>
									<postCode>24060 {nm8247</postCode>
									<region>Virginia</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Daphne</forename><surname>Yao</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Virginia Tech Blacksburg</orgName>
								<address>
									<addrLine>snagy2,danfeng</addrLine>
									<postCode>24060 {nm8247</postCode>
									<region>Virginia</region>
								</address>
							</affiliation>
							<affiliation key="aff0">
								<orgName type="institution">Virginia Tech Blacksburg</orgName>
								<address>
									<addrLine>snagy2,danfeng</addrLine>
									<postCode>24060 {nm8247</postCode>
									<region>Virginia</region>
								</address>
							</affiliation>
							<affiliation key="aff0">
								<orgName type="institution">Virginia Tech Blacksburg</orgName>
								<address>
									<addrLine>snagy2,danfeng</addrLine>
									<postCode>24060 {nm8247</postCode>
									<region>Virginia</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wenjie</forename><surname>Zhuang</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Virginia Tech Blacksburg</orgName>
								<address>
									<addrLine>snagy2,danfeng</addrLine>
									<postCode>24060 {nm8247</postCode>
									<region>Virginia</region>
								</address>
							</affiliation>
							<affiliation key="aff0">
								<orgName type="institution">Virginia Tech Blacksburg</orgName>
								<address>
									<addrLine>snagy2,danfeng</addrLine>
									<postCode>24060 {nm8247</postCode>
									<region>Virginia</region>
								</address>
							</affiliation>
							<affiliation key="aff0">
								<orgName type="institution">Virginia Tech Blacksburg</orgName>
								<address>
									<addrLine>snagy2,danfeng</addrLine>
									<postCode>24060 {nm8247</postCode>
									<region>Virginia</region>
								</address>
							</affiliation>
						</author>
						<author role="corresp">
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gustavo</forename><forename type="middle">Arango</forename><surname>Argoty</surname></persName>
							<email>gustavo1@vt.edu</email>
							<affiliation key="aff0">
								<orgName type="institution">Virginia Tech Blacksburg</orgName>
								<address>
									<addrLine>snagy2,danfeng</addrLine>
									<postCode>24060 {nm8247</postCode>
									<region>Virginia</region>
								</address>
							</affiliation>
							<affiliation key="aff0">
								<orgName type="institution">Virginia Tech Blacksburg</orgName>
								<address>
									<addrLine>snagy2,danfeng</addrLine>
									<postCode>24060 {nm8247</postCode>
									<region>Virginia</region>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Secure Coding Practices in Java: Challenges and Vulnerabilities</title>
					</analytic>
					<monogr>
						<imprint>
							<date type="published" when="2017-09-28">28 Sep 2017</date>
						</imprint>
					</monogr>
					<idno type="arXiv">arXiv:1709.09970v1[cs.CR]</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-01-31T12:42+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>CSRF</term>
					<term>SSL/TLS certificate validation</term>
					<term>cryptographic hash functions</term>
					<term>authentication</term>
					<term>authorization</term>
				</keywords>
			</textClass>
			<abstract>
				<p>Java platform and third-party libraries provide various security features to facilitate secure coding. However, misusing these features can cost tremendous time and effort of developers or cause security vulnerabilities in software. Prior research was focused on the misuse of cryptography and SSL APIs, but did not explore the key fundamental research question: what are the biggest challenges and vulnerabilities in secure coding practices? In this paper, we conducted a comprehensive empirical study on StackOverflow posts to understand developers&apos; concerns on Java secure coding, their programming obstacles, and potential vulnerabilities in their code. We observed that developers have shifted their effort to the usage of authentication and authorization features provided by Spring security-a third-party framework designed to secure enterprise applications. Multiple programming challenges are related to APIs or libraries, including the complicated cross-language data handling of cryptography APIs, and the complex Java-based or XML-based approaches to configure Spring security. More interestingly, we identified security vulnerabilities in the suggested code of accepted answers. The vulnerabilities included using insecure hash functions such as MD5, breaking SSL/TLS security through bypassing certificate validation, and insecurely disabling the default protection against Cross Site Request Forgery (CSRF) attacks. Our findings reveal the insufficiency of secure coding assistance and education, and the gap between security theory and coding practices.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>Java platform and third-party libraries or frameworks (e.g., Boun-cyCastle <ref type="bibr">[7]</ref> and Spring <ref type="bibr">Security [53]</ref>) provide various features to facilitate secure coding. However, misusing these libraries and frameworks not only costs excessive debugging effort of developers, but also leads to security vulnerabilities in software <ref type="bibr" target="#b12">[13,</ref><ref type="bibr">63,</ref><ref type="bibr" target="#b88">95,</ref><ref type="bibr" target="#b90">96]</ref>. For example, Veracode identified software errors in the handling of user credentials, including hard-coded password and plaintext passwords in configuration files <ref type="bibr">[63]</ref>. These errors can enable attackers to bypass access controls.</p><p>Prior research mainly focused on the misuse of cryptography and SSL APIs that causes security vulnerabilities <ref type="bibr" target="#b71">[78,</ref><ref type="bibr" target="#b73">80,</ref><ref type="bibr" target="#b76">83,</ref><ref type="bibr" target="#b79">86]</ref>. Specifically, Lazar et al. manually examined 269 published cryptographic vulnerabilities in the CVE database, and observed 83% of them were caused by cryptography API misuse <ref type="bibr" target="#b79">[86]</ref>. Fahl et al. <ref type="bibr" target="#b73">[80]</ref> and Georgiev et al. <ref type="bibr" target="#b76">[83]</ref> separately implemented the man-in-the-middle attack, and detected vulnerable Android applications and software libraries that misused SSL APIs. Nadi et al. further investigated the obstacles developers face while using the Java cryptography APIs, the tasks for which they use the APIs, and the kind of tool support they desire <ref type="bibr" target="#b85">[92]</ref>. Despite these studies, some key questions on secure coding practices remain unanswered. They include (1) whether programmers are equipped with sufficient security knowledge and automatic coding support, and (2) whether the coding practices benefitted from security research over the years.</p><p>For this paper, we conducted a comprehensive in-depth investigation on the common concerns, programming challenges, and security vulnerabilities in developers' secure coding practices by manually inspecting 497 StackOverflow posts related to Java security. We chose StackOverflow [62] because (1) developers usually share and discuss programming issues and solutions on this online platform, and (2) StackOverflow plays an important role in educating developers and impacting their daily coding practices. The main challenge of performing this empirical study is interpreting each security-relevant programming issue or solution within both the program context and security context. To comprehend each post within the program context, we manually checked all mentioned information about the source code, configuration files, and/or execution environments. Then we decided the root cause and solution of the problem. To comprehend each post within the security context, we also identified the security requirement that developers tried to implement and investigated the involved security libraries. Then we determined whether the implementation fulfilled the requirement. Such manual analysis requires so much comprehension and expertise in both software engineering (SE) and security that it is difficult to automate the process.</p><p>With our thorough manual analysis on the 497 posts, we investigated the following three research questions (RQs):</p><p>RQ1 What are the common concerns on Java secure coding? Although there are various security libraries and frameworks <ref type="bibr">[2,</ref><ref type="bibr" target="#b30">32,</ref><ref type="bibr">34,</ref><ref type="bibr">56,</ref><ref type="bibr" target="#b77">84,</ref><ref type="bibr" target="#b86">93]</ref>, several questions are still unanswered, such as (1) which are the popular security features being frequently asked about, and (2) what are the hard-to-implement security defenses in practice? RQ2 What are the common programming challenges? We aim to identify the common obstacles that prevented developers from implementing secure code easily and correctly. This information will help guide SE researchers and tool builders to better develop tools, and to help close the gap between the intended library usage and developers' actual usage. RQ3 What are the common security vulnerabilities? We aim to identify security vulnerabilities in StackOverflow posts, because the bad practices recommended on the platform can become popular and cause profound negative impact. This effort will help raise the security consciousness of secure software practitioners.</p><p>In our study, we made three major observations.</p><p>• There were multiple security vulnerabilities in the recommended code of some accepted answers. For instance, the usage of MD5 and SHA-1 algorithms were repetitively suggested, although these algorithms are notoriously insecure and should not be used anymore. Additionally, developers were advised to trust all incoming SSL/TLS certificates from servers as a workaround to certificate verification errors. Such practice completely disables the security checks of SSL. Although this bad practice was initially reported by researchers in 2012 <ref type="bibr" target="#b73">[80,</ref><ref type="bibr" target="#b76">83]</ref>, developers have still asked for and accepted the practice till now. Furthermore, when implementing authentication with Spring security and getting errors, developers were suggested with a workaround solution to blindly disable the default security protection against Cross Site Request Forgery (CSRF) attacks. • There were various programming challenges related to security libraries. For instance, developers were stuck with cryptography API usage due to clueless error messages, complex cross-language data handling, and delicate implicit API usage constraints. However, when using Spring security, developers struggled a lot with the two alternative ways of configuring security: Java-based or XML-based. • Software developers have shifted their security implementation effort to Spring security since 2012. 261 of the 497 examined posts (53%) were about Spring security. However, we have not seen any research that checks or analyzes the security vulnerabilities related to the framework.</p><p>The significance of this work is that we provided empirical evidence for a significant number of alarming secure coding issues, which have not been previously reported. These issues are due to a variety of reasons, including the rapidly increasing need for enterprise security applications, the lack of security training in the software development workforce, and poorly designed security libraries. We hope our findings can motivate the community to research solutions for helping developers overcome these obstacles in the long term.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">BACKGROUND</head><p>The examined StackOverflow posts were mainly about three perspectives of Java security: Java platform security, Java EE security, and other third-party frameworks. This section introduces the key terminologies used throughout the paper.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Java Platform Security</head><p>The platform defines APIs spanning major security areas, including cryptography, access control, and secure communication <ref type="bibr">[41]</ref>.</p><p>The Java Cryptography Architecture (JCA) contains APIs for hashes, keys and certificates, digital signatures, and encryption <ref type="bibr">[34]</ref>. Nine cryptographic engines are defined to provide either cryptographic operations (encryption, digital signatures, hashes), generators or converters of cryptographic material (keys and algorithm parameters), or objects (keystores or certificates) that encapsulate the cryptographic data.</p><p>The access control architecture protects the access to sensitive resources (e.g., local files) or sensitive application code (e.g., methods in a class). All access control decisions are mediated by a security manager. By default, the security manager uses the AccessController class for access control operations and decisions.</p><p>Secure communication ensures that the data which travels across a network is sent to the appropriate party, without being modified during the transmission. Cryptography forms the basis for secure communication. The Java platform provides API support for standard secure communication protocols like SSL/TLS. HTTPS, or "HTTP secure", is an application-specific implementation that is a combination of HTTP and SSL/TLS.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Java EE Security</head><p>Java EE is an standard specification for enterprise Java extensions <ref type="bibr" target="#b39">[44]</ref>. Various application servers are built to implement this specification, such as JBoss or WildFly <ref type="bibr" target="#b63">[71]</ref>, Glassfish <ref type="bibr" target="#b18">[18]</ref>, WebSphere [69], and WebLogic [3]. A Java EE application consists of components deployed into various containers. The Java EE security specification defines that containers secure components by supporting features like authentication and authorization.</p><p>In particular, authentication defines how communicating entities, such as a client and a server, prove to each other that they are who they say they are. An authenticated user is issued a credential, which includes user information like usernames/passwords or tokens. Authorization ensures that users have permissions to perform operations or access data. When accessing certain resource, a user is authorized if the server can map this user to a security role permitted for the resource.</p><p>Security for Java EE applications can be implemented in the following two ways:</p><p>• Declarative Security expresses an application component's security requirements using either deployment descriptors or annotations. A deployment descriptor is an XML file external to the application. This XML file expresses an application's security structure, including security roles, access control, and authentication requirements. Annotations are used to specify security information in a class file. They can be either used by or overridden by deployment descriptors.</p><p>• Programmatic Security is embedded in an application and is used to make security decisions, when declarative security alone is not sufficient to express the security model.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Other Third-Party Frameworks</head><p>Several frameworks were built to provide authentication, authorization, and other security features for enterprise applications, such as Spring Security <ref type="bibr">[53]</ref>. Different from the Java EE security APIs, these frameworks are container independent, meaning that they do not require containers to implement security. For example, Spring security is installed as a single Filter in the filter chain inside a container to handle requests. There can be multiple security filters inside Spring security. Developers can configure security in an XML-based way, a Java-based way, or a hybrid of the two. Similar to Java EE security, the XML-based way implements security requirements with deployment descriptors and source code, while the Java-based way expresses security with annotations and code.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">METHODOLOGY</head><p>We leveraged Scrapy-an open source python library [50] to crawl posts from the StackOverflow website. <ref type="figure" target="#fig_4">Figure 1</ref> presents the format of a typical StackOverflow post. Each post mainly contains two regions: the question and answers. 1 ○ Question region contains the question description and some metadata. The metadata includes a vote for the question (e.g., 3)indicating whether the question is well-defined or well-representative, and a favorite count (e.g., 1)-showing how many people liking the question.</p><p>2 ○ Answer region contains all answer(s) provided. When one or more answers are provided, the asker decides which answer to accept, and marks it with (✓).</p><p>java class to trust all for sending file to https web service … … ① ② I need to write my own class to tell mule that h3ps connec5on to service (wsdl) is verified. I already have mule project nearly finnished but last piece is missing, sending file at specific url.</p><p>What I want to achieve:</p><p>What worked for me is to set the TrustManagerFactory on the HTTPS connector. Here's how I did it.</p><p>First, create a keystore that contains the cer5ficate of the SSL server you want to trust. You can create the keystore using the tools included with the <ref type="figure" target="#fig_4">Figure 1</ref>: A highly viewed post asking about workarounds to bypass key checking and allow all host names for HTTPS <ref type="bibr" target="#b31">[33]</ref> We obtained 22,195 posts containing keywords "java" and "security". After extracting the question, the answers, and relevant metadata for each post, we refined the data in three ways.</p><p>1) Filtering less useful posts. We automatically refined posts by removing duplicated posts, posts without accepted answers, and posts whose questions received negative votes perhaps because the questions were ill-formed or confusing.</p><p>2) Removing posts without code snippets. We only focused on posts containing code snippets to better understand the questions within the program context. Since our crawled data did not include any metadata to describe the existence of code snippets, we developed an intuitive filter to search for keywords "public" and "class" in each post. Based on our observation, a post usually contains these two keywords when it includes a code snippet.</p><p>3) Discarding irrelevant posts. After applying the above two filters, we manually examined the remaining posts, and decided whether they were relevant to Java secure coding or simply contained the checked keywords accidentally.</p><p>With the above three filters, we finally included 497 posts in our data set. The question asking time of these posts were during 2008-2016. We did not include the posts in 2017, because at the time we conducted experiments, there was only data for the first several months of 2017. When manually filtering retrieved posts, we also characterized relevant posts based on their security concerns, programming challenges, and security vulnerabilities. Based on the characterization, we classified posts and investigated the following three research questions (RQs):</p><p>RQ1: What are the common security concerns of developers? We aimed to investigate: (1) what are the popular security features that developers frequently asked about, and (2) how do developers' security concerns shift over the years? Besides, we also classified posts into three categories based on the number of positive votes and favorite counts their questions received:</p><p>• Neutral: A question does not receive a positive vote or favorite count. The post shown in <ref type="figure" target="#fig_4">Figure 1</ref> is classified as "Favorite" in this way, because its favorite count is one. By combining this category with the identified security concerns, we explore developers' sentiment towards questions related to different concerns. It is possible that although some security features are frequently asked, people do not like the questions, probably because the questions are so complicated and project-specific that most developers cannot learn or benefit from them.</p><p>RQ2: What are the common programming challenges? For each identified security concern, we further characterized each post with the problem (buggy source code, wrongly implemented configuration files, improperly configured execution environment), the root cause and accepted solution of the problem. Then we clustered posts if they had similar characterizations. For the post in <ref type="figure" target="#fig_4">Figure 1</ref>, we identified the problem as asking for a workaround in SSL verification, because apparently the developer did not realize that the SSL verification should not be bypassed. The recommended solution was to first create a keystore that contains the certificates of all trusted SSL servers, and then use the keystore to create a TrustManagerFactory instance and establish connections.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>RQ3: What are the common security vulnerabilities?</head><p>For each post, we also inspected unaccepted answers and the conversational comments between the question asker and other developers, in order to learn about the security context. Based on the </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">MAJOR FINDINGS</head><p>We present our investigation results for the research questions separately in Section 4.1-4.3.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Common Concerns in Security Coding</head><p>Figure 2 presents our classification hierarchy among the 497 posts. At the highest level of the hierarchy, we created two categories: implementation questions vs. understanding questions. The majority-472 questions-were about implementing security functionalities or solving program errors. Only 25 questions were asked to understand why certain features were designed in certain ways (e.g., how does Java string being immutable increase security <ref type="bibr" target="#b22">[22]</ref>).</p><p>Since our focus is on secure coding practice, our further classification expands on the 472 implementation-relevant posts. At the second level of the classification hierarchy, we clustered posts based on the major security platforms or frameworks involved in each post. For instance, Java platform security posts were relevant to the security features of the Java platform and related software libraries extending the features (e.g., BouncyCastle [7]). Java EE security posts were related to the security mechanisms of Java EE platform, and Spring security posts were about the Spring security framework <ref type="bibr">[53]</ref>. The Other category at this level includes posts relevant to other libraries or platforms, such as Shiro <ref type="bibr" target="#b3">[4]</ref> and Android <ref type="bibr" target="#b65">[73]</ref>. Unexpectedly, Spring security posts (261) counted for 55% of the implementation questions. However, no research exists to explore the misuse of Spring security APIs. Although there are many application servers developed to implement the Java EE specifications, developers have many fewer questions concerning Java EE security than Spring security.</p><p>At the third level of the classification hierarchy, we further classified posts separately belonging to the two categories: Java platform security and Spring security, because both categories contained many posts. Among the Java platform security posts, in addition to cryptography and secure communication, we identified a third major concern-access control. Among the Spring security posts, we found the majority (219) related to authentication, with the minority discussing authorization and configuration.</p><p>Finding 1: 55%, 30%, and 12% of the implementationrelevant posts focused on Spring security, Java platform security, and Java EE security, indicating that developers need more help to secure Java enterprise applications.</p><p>Based on the second-and third-level classifications, we identified seven major security concerns: cryptography, access control, secure communication, Java EE security, authentication, authorization, and configuration. The first three concerns correspond to Java platform security, while the last three correspond to Spring security. To reveal developers' security concern trends over the years, we clustered posts based on the year when each question was asked. The total number of posts increased over the years, indicating that more developers were involved with secure coding and faced problems. Specifically, there was only 1 post created in 2008, but 107 posts were created in 2016. During 2009-2011, most posts were about Java platform security. However, since 2012, the major security concern has shifted to securing Java enterprise applications (including both Java EE security and Spring security). Specifically, Spring security has taken up over 50% of the posts published every year since 2013.</p><p>For each security concern, we also clustered posts based on developers' attitudes towards the questions. As mentioned in Section 3, we defined three types of sentiment: neutral, positive, and favorite. <ref type="figure" target="#fig_3">Figure 4</ref> shows the post distribution among different developers' attitudes. In this figure, configuration posts received the highest percentage of neutral opinions (50%). One possible reason is that these posts mainly focused on the problems caused by wrong versions of software libraries and version conflicts between dependent </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Common Programming Challenges</head><p>To understand the common challenges developers faced, we further examined the posts of the most popular five major categories: authentication (219), cryptography (64), Java EE security (58), access control (43), and secure communication (31). We identified posts with similar questions and related answers, and further investigated why developers asked these common questions. This section presents our key findings for each category.</p><p>4.2.1 Authentication. Most posts were on (1) integrating Spring security with different application servers (e.g., JBoss) [58] or frameworks (e.g., Spring MVC) <ref type="bibr" target="#b48">[54]</ref>, (2) configuring security in an XMLbased <ref type="bibr" target="#b49">[55]</ref> or Java-based way <ref type="bibr" target="#b27">[27]</ref>, or (3) converting XML-based configurations to Java-based ones <ref type="bibr">[10]</ref>. Specifically, we observed three challenges.</p><p>Challenge 1: The way to integrate Spring security with different types of applications varies a lot. Although Spring security can be leveraged to secure various applications, the usage varies with the application settings <ref type="bibr" target="#b51">[57]</ref>. What is even worse, some Spring securityrelevant implementations may exhibit different dynamic behaviors in different applications. For instance, by following a standard tutorial example <ref type="bibr" target="#b60">[68]</ref>, a developer defined two custom authentication filters-apiAuthenticationFilter and webAuthenticationFilter-to secure two different sets of URLs of his/her Spring Boot web application as shown below. In Listing 1, lines 3-14 correspond to ApiConfigurationAdapter, a security configuration class that specifies apiAuthenticationFilter to authenticate URLs matching the pattern "/api/**". Lines 15-26 correspond to WebSecurityConfiguration, which configures webAuthentication-Filter to authenticate the other URLs. Ideally, only one filter is invoked given one URL. However, both filters were invoked in reality. The root cause is that each filter is a bean (annotated with @Bean on lines 6 and 18). Spring Boot detects the filters and adds them to a regular filter chain, while Spring security also adds them to its own filter chain. Consequently, both filters are registered twice and can be invoked twice. To solve the problem, developers need to enforce each bean to be registered only once by adding specialized code.</p><p>Challenge 2: The two ways of security configurations (Java-based and XML-based) are hard to implement correctly. Take the Javabased configuration for example. There are lots of annotations and APIs of classes, methods, and fields available to specify different configuration options. Particularly, HttpSecurity has 10 methods, each of which can be invoked on an HttpSecurity instance and then produces another HttpSecurity object. If developers are not careful about the invocation order between these methods, they can get errors <ref type="bibr" target="#b25">[25]</ref>. As shown in Listing 1, the method antMatcher("/api/**'') must be invoked before addFilterAfter(...) (lines 12-13), so that the filter is only applied to URLs matching the pattern "/api/**". Unfortunately, such implicit constraints are not documented in the API specifications <ref type="bibr">[28]</ref>.</p><p>Challenge 3: Converting from XML-based to Java-based configurations is tedious and error-prone. The semantic conflicts between annotations, deployment descriptors, and code implementations are always hard to locate and resolve. Such problems become more serious when developers configure security in a hybrid way of Java-based and XML-based. Since Spring security 3.2, developers are supported to configure Spring-security in a pure Java-based approach, and there is documentation describing how to migrate from XML-based to Java-based configurations <ref type="bibr">[56]</ref>. However, manually applying every migration rule to convert every configuration file is tedious and error-prone.</p><p>Finding 3: Spring security authentication posts were mainly about configuring security for different applications or in different ways (Java-based or XML-based), and converting between these ways. The challenges were due to incomplete documentation and missing tool support for error checking, solution recommendation, and configuration generation.  <ref type="bibr" target="#b17">[17]</ref>, BigIntegers <ref type="bibr" target="#b5">[6]</ref>, a keystore <ref type="bibr" target="#b4">[5]</ref>, or a file <ref type="bibr">[67]</ref>. Some other posts focused on how to compare keys <ref type="bibr" target="#b8">[9]</ref>, print key information <ref type="bibr" target="#b59">[66]</ref>, or initialize a cipher for encryption and decryption <ref type="bibr">[39]</ref>. Specifically, we observed three common challenges of correctly using the cryptography APIs.</p><p>Challenge 1: The error messages did not provide sufficient useful hints about fixes. We found five posts concentrated on the same problem: "get InvalidKeyException: Illegal key size", while the solutions were almost identical: (1) download the "Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files", "lo-cal_policy.jar", and "US_export_policy.jar"; and (2) place the policy files in proper folders <ref type="bibr">[1]</ref>. Developers got the same exception because of missing either of the two steps. Providing a checklist of these necessary steps in the error message could help developers quickly resolve the problem. However, the existing error messages did not provide any constructive suggestion.</p><p>Challenge 2: It is difficult to implement security with multiple programming languages. Three posts were about encrypting data with one language (e.g. PHP or Python) and decrypting data with another language (e.g., Java). Such cross-language data encryption &amp; decryption is challenging, because the format of the generated data by one language requires special handling of another language. Listing 2 is an example to generate an RSA key pair and encrypt data in PHP, and to decrypt data in <ref type="bibr">Java [16]</ref>. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>i n i t ( C i p h e r . DECRYPT_MODE , p r i v a t e K e y ) ; 31 b y t e [ ] p l a i n t e x t = c i p h e r . d o F i n a l ( c i p h e r ) ;</head><p>In this example, when a key pair is generated in PHP (lines 2-11), the public key is easy to retrieve in PHP (lines 13-16). However, retrieving the private key in Java is more complicated (lines 18-30). After reading in the private key string (lines 19-20), the Java implementation first uses Base64Decoder to decode the string into a byte array (line 21), which corresponds to an OpenSSL PEM encoded stream (line 22-23). Because OpenSSL PEM is not a standard data format, the Java code further uses a PEMReader to convert the stream to a PrivateKey instance (lines 24-27) before using the key to initialize a cipher (lines 28-30). Existing documentation seldom describes how the security data format (e.g., key) defined in one language corresponds to that of another language. Unless developers are experts in both languages, it is hard for them to figure out the security data processing across languages.</p><p>Challenge 3: Implicit constraints on API usage cause confusion. Two posts were about getting "InvalidKeySpecException: algid parse error, not a sequence", when obtaining a private key from a file <ref type="bibr">[30]</ref>. The problem is that the key should be in PKCS#8 format when used to create a PKCS8EncodedKeySpec instance, as shown below: The tricky part here is that a private key retrieved from a file always has the data type byte[] even if it is not in PKCS#8 format. If developers invoke the API PKCS8EncodedKeySpec(...) with a non-PKCS#8 formatted key, they will be stuck with the clueless exception. Three solutions were suggested to get a PKCS#8 format key: (1) to implement code to convert the byte array, (2) to use an openssl command to convert the file format, or (3) to use the PEMReader class of Boun-cyCastle to generate a key from the file. Such implicit constraints between an API and its input format are delicate.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Finding 4:</head><p>The cryptography posts were majorly about key generation and usage. Developers asked these questions mainly due to clueless error messages, cross-language data handling, and implicit API usage constraints.</p><p>4.2.3 Java EE security. 33 of the 58 posts were on authentication and authorization. However, the APIs of these two security features were defined differently on different application servers (e.g., WildFly and Glassfish), and developers might use these servers in combination with diverse third-party libraries <ref type="bibr">[48]</ref>. As a result, the posts seldom shared common solutions or code implementation.</p><p>One common challenge we identified is the usage of declarative security and programmatic security. When developers misunderstood annotations, they could use incorrect annotations that conflict with other annotations [35], deployment descriptors <ref type="bibr" target="#b64">[72]</ref>, code implementation [11], or file paths <ref type="bibr" target="#b42">[47]</ref>. Nevertheless, existing error reporting systems only throw exceptions. Unfortunately, there is no tool support that prevents developers from configuring such conflicting settings, or assists developers with diagnosing conflicting usage of annotations and deployment descriptors.</p><p>Finding 5: Java EE security posts were mainly about authentication and authorization. One challenge is the complex usage of declarative security and programmatic security, and any complicated interaction between the two.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2.4">Access Control.</head><p>The 43 posts mainly discussed how to restrict or relax the access permission(s) of a software application for certain resource(s).</p><p>Specifically, 21 questions asked about restricting untrusted code from accessing certain packages [40], classes <ref type="bibr" target="#b37">[42]</ref>, or class members (i.e., methods and fields) <ref type="bibr" target="#b20">[20]</ref>. Two alternative solutions were commonly suggested for these questions: (1) to override the checkXXX() methods of SecurityManager to disallow invalid accesses, or (2) to define a custom policy file to grant limited permissions. Another nine posts were on how to allow applets to perform privileged operations <ref type="bibr" target="#b46">[52]</ref>, because applets are executed in a security sandbox by default and can only perform a set of safe operations. One commonly recommended solution was to digitally sign the applet. Although it seems that there exist common solutions to the most frequently asked questions, the access control implementation is not always intuitive. We identified two common challenges of correctly implementing access control.</p><p>Challenge 1: The effect of access control varies with the program context. We identified two typical scenarios from multiple similar posts. First, the RMI tutorial <ref type="bibr" target="#b29">[29]</ref> suggested that a security manager is needed only when RMI code downloads code from a remote machine. Including a SecurityManager instance in the RMI program which does not download any code can cause an Access-ControlException <ref type="bibr">[37]</ref>. Second, although a signed applet is allowed to perform sensitive operations, it loses its privileges when invoked from Javascript <ref type="bibr" target="#b21">[21]</ref>. As a result, the invocation to the signed applet should be wrapped with an invocation of AccessController. doPrivileged(...).</p><p>Challenge 2: The effect of access control varies with the execution environment. SecurityManager can disallow illegal accesses via reflection only when the program is executed in a controlled environment (i.e., on a trusted server) <ref type="bibr" target="#b7">[8]</ref>. Nevertheless, if the program is executed in an uncontrolled environment (e.g. on an untrusted client machine) and hackers can control how to run the program or manipulate the jar file, the security mechanisms become voided.</p><p>Finding 6: The access control posts were mainly about SecurityManager, AccessController, and the policy file. Configuring and customizing access control policies are challenging.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2.5">Secure Communication.</head><p>Among the 31 examined posts, 22 posts were about SSL/TLS-related issues, discussing how to create <ref type="bibr" target="#b53">[59]</ref>, install <ref type="bibr" target="#b57">[64]</ref>, find [43], or validate an SSL certificate <ref type="bibr" target="#b55">[61]</ref>, how to establish a secure connection <ref type="bibr" target="#b34">[36]</ref>, and how to use SSL together with other libraries, such as JNDI <ref type="bibr" target="#b23">[23]</ref> and PowerMock <ref type="bibr" target="#b62">[70]</ref>.</p><p>In particular, six posts focused on solving the problem of unable to find a valid server certificate to establish an SSL connection with a server <ref type="bibr">[43]</ref>. Instead of suggesting a way to install the required certificates, two accepted answers suggested a highly insecure workaround to disable the SSL verification process, so that any incoming certificate can pass the validation <ref type="bibr" target="#b54">[60]</ref>. Although such workarounds can effectively remove the error, they essentially fail the requirement to secure communication with SSL. In Section 4.3, we will further explain the security vulnerability due to such workarounds. Probably developers tended to accept the vulnerable answers because they felt it challenging to implement the whole process of creating, installing, finding, and validating an SSL certificate.</p><p>Finding 7: Security communication posts mainly discussed the process of establishing SSL/TLS connections. This process contains so many steps that developers were tempted to accept a broken solution to simply bypass the security check.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Common Problems from Security Perspectives</head><p>Among the five categories listed in Section 4.2, we identified security vulnerabilities in the accepted answers of three frequently discussed topics: Spring security's csrf(), SSL/TLS, and password hashing.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3.1">Spring security's csrf().</head><p>Cross-site request forgery (CSRF) is a serious attack that tricks a web browser into executing an unwanted action (e.g., transfer money to another account) in a web application (e.g., a bank website) for which a user is authenticated <ref type="bibr" target="#b96">[102]</ref>. The root cause is that attackers created forged requests that appear to be legitimate requests, and somehow mixed them with the legitimate ones. Since the application cannot distinguish between the two types of requests, it normally responds to the forged requests, performing undesired operations.</p><p>By default, Spring security provides CSRF protection by defining a function csrf() and implicitly enabling the function invocation. Correspondingly, developers should include the CSRF token in all PATCH, POST, PUT, and DELETE methods to leverage the protection <ref type="bibr">[31]</ref>. However, among the 12 examined posts that were relevant to csrf(), 5 posts discussed program failures, while all the accepted answers suggested an insecure solution: disabling the CSRF protection by invoking http.csrf().disable(). In one instance, after accepting the vulnerable solution, an asker commented as "Adding csrf().disable() solved the issue!!! I have no idea why it was enabled by default" <ref type="bibr" target="#b40">[45]</ref>. Unfortunately, the developer happily disabled the security protection without realizing that such workaround would expose the resulting system to CSRF security exploits. 4.3.2 SSL/TLS. We examined 11 posts discussing the usage of SSL/TLS, and observed two important security issues.  Problem 1: Developers commonly trusted all SSL certificates and allowed all hostnames in order to quickly build a prototype in the development environment. SSL is the standard security technology for establishing an encrypted connection between a web server and a browser. <ref type="figure" target="#fig_8">Figure 5</ref> overviews the major steps of establishing an SSL connection <ref type="bibr" target="#b43">[49]</ref>. To activate SSL on the server, developers need to provide all identity information of the website (e.g., the host name) to a Certification Authority (CA) and request for an SSL certificate (Step 1 ○). After validating the website's information, CA issues a digitally signed SSL certificate (Step 2 ○). When a client or browser attempts to connect to the website ((Step 3 ○), the server sends over its certificate (Step 4 ○). The client then conducts several checks, including (1) whether the certificate is issued by a CA the browser trusts, and (2) whether the request hostname matches the hostname associated with the certificate (Step 5 ○). If all these checks are passed, the SSL connection can be established successfully.</p><p>Although ideally, developers should only enable SSL after obtaining a certificate from CA, in reality, they usually implement and test the certificate verification code before obtaining the certificate. Therefore, a well-accepted recommended solution without CA-signed certificates is to create a self-signed certificate and use the certificate to drive the implementation of SSL certificate verification <ref type="bibr" target="#b53">[59]</ref>. However, 9 of the 11 examined posts accepted an insecure solution to bypass security checks by trusting all certificates and/or allowing all hostnames, as demonstrated by Listing 4.</p><p>Listing 4: A typical implementation to disable SSL certificate validation <ref type="bibr" target="#b45">[51]</ref> // Create a trust manager that does not validate certificate chains 2 T r u s t M a n a g e r [ ] t r u s t A l l C e r t s = new T r u s t M a n a g e r [ ] { new X 5 0 9 T r u s t M a n a g e r ( Disabling the SSL certificate validation process in a client can thoroughly invalidate the secure communication protocol, leaving clients susceptible to the man-in-the-middle (MITM) attack <ref type="bibr" target="#b76">[83]</ref>. Namely, by secretly relaying and possibly altering the communication (e.g., through DNS poisoning) between the client and server, attackers can trick the SSL-client to instead connect to an attacker-controlled server <ref type="bibr" target="#b76">[83]</ref>. Although the insecure coding practice was shown to induce the MITM attack in 2012 <ref type="bibr" target="#b76">[83]</ref>, there are three examined posts created after 2012 still discussing the bad practice. This indicates a significant gap between security theory and coding practices. Some developers justified their checking-bypass logic by saying "Because I needed a quick solution for debugging purposes only. I would not use this in production due to the security concerns . . . " <ref type="bibr" target="#b58">[65]</ref>. However, as pointed by another user of StackOverflow <ref type="bibr" target="#b58">[65]</ref> and demonstrated by prior research <ref type="bibr" target="#b73">[80,</ref><ref type="bibr" target="#b76">83]</ref>, a lot of these implementations find their way into production, and have yielded radically insecure systems as a result.</p><p>Problem 2: Developers were unaware of the best usage of SSL/TLS. TLS is SSL's successor. It is so different from SSL that the two protocols do not interoperate. To maintain the backwards compatibility with SSL 3.0 and interoperate with systems supporting SSL, most SSL/TLS implementations allow for protocol version negotiation: if a client and a server cannot connect via TLS, they will fall back to using the older protocol SSL 3.0. In 2014, Möller et al. reported the POODLE attack which exploits the SSL 3.0 fallback <ref type="bibr" target="#b84">[91]</ref>. Specifically, there is a design vulnerability in the way SSL 3.0 handles block cipher mode padding, which can be exploited by attackers to decrypt encrypted messages. With the POODLE attack, a hacker can intentionally trigger a TLS connection failure and force usage of SSL 3.0, allowing decryption of encrypted messages.</p><p>Ever since 2014, researchers have recommended developers to disable SSL 3.0 support and configure systems to present the SSL 3.0 fallback. The US government (NIST) mandates to ceasing usage of SSL in the protection of Federal information <ref type="bibr" target="#b19">[19]</ref>. In reality, nevertheless, none of the 11 posts mentioned the POODLE attack.</p><p>Both of the two examined posts created in 2016 were about SSL usage.</p><p>Finding 9: 9 of 11 SSL/TLS-relevant posts discussed insecure code to bypass security checks. We observed two important security threats: (1) StackOverflow contains a lot of obsolete and insecure coding practices; and (2) secure programmers are unaware of the state-of-the-art security knowledge.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3.3">Password</head><p>Hashing. We found six posts related to hashing passwords with MD5 or SHA-1 to store the user credentials in a database. However, these hashing functions were found insecure <ref type="bibr" target="#b93">[99,</ref><ref type="bibr" target="#b94">100]</ref>. They are vulnerable to offline dictionary attacks <ref type="bibr" target="#b13">[14]</ref>. After obtaining a password hash H from a compromised database, a hacker can use brute-force methods to enumerate a list of password guesses, until finding the password P whose hash value is H . By impersonating a valid user to login a server, the attacker can conduct malicious behaviors. Researchers recommended key-stretching algorithms (e.g., PBKDF2, bcrypt, and scrypt) as the best practice for secure password hashing, because these algorithms are specially crafted to slow down the hash computation by orders of magnitude <ref type="bibr" target="#b66">[74,</ref><ref type="bibr" target="#b75">82,</ref><ref type="bibr" target="#b92">98]</ref>, which substantially increases the difficulty of dictionary attacks.</p><p>Unfortunately, only three of the six posts (50%) mentioned the best practice in the accepted answers, indicating that many posts on secure hashing suggested insecure hash functions. We found one post which asked about using MD5 hashing in Android <ref type="bibr" target="#b41">[46]</ref>. Within the comment conversation between developers, although people recommended to avoid MD5, the asker kept justifying his/her choice of MD5. The asker even shared a completely wrong understanding of secure hashing: "The security of hash algorithms really is MD5 (strongest) &gt; SHA-1 &gt; SHA-256 &gt; SHA-512 (weakest)", although the opposite is true, which is MD5 &lt; SHA-1 &lt; SHA-256 &lt; SHA-512. Among these posts, some developers misunderstood security APIs and ignored the security consequences of their security API choices. Such StackOverflow posts can have profound negative impact, because they convey the wrong information and may mislead people.</p><p>Finding 10: Three of six hashing-relevant posts accepted vulnerable solutions as correct answers, indicating that developers were unaware of the best practice of secure programming. Their wrong knowledge or practice can propagate among StackOverflow users and negatively influence people.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">RELATED WORK</head><p>This section describes related work on analyzing, detecting, and preventing security vulnerabilities due to Java library misuse.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Analyzing Security Vulnerabilities</head><p>Prior studies showed that the API misuse of cryptography, SSL, and Java reflection caused many security vulnerabilities <ref type="bibr">[63,</ref><ref type="bibr" target="#b79">86,</ref><ref type="bibr" target="#b81">88,</ref><ref type="bibr" target="#b95">101]</ref>. For instance, Long identified several Java features whose misuse or improper implementation can compromise security <ref type="bibr" target="#b81">[88]</ref>. One feature he identified is the Java reflection API which enables fields that are not normally accessible to be accessed and thus can cause potential vulnerabilities. Lazar et al. manually examined 269 published cryptographic vulnerabilities in the CVE database, and observed 83% of them were caused by the misuse of cryptographic libraries, including low encryption strength, insufficient randomness, and inadequate checks <ref type="bibr" target="#b79">[86]</ref>. Veracode reported that 39% of all applications used broken or risky cryptographic algorithms <ref type="bibr">[63]</ref>. The study by Yang et al. <ref type="bibr" target="#b95">[101]</ref> is most relevant to our research. They used an advanced topic model approach, Latent Dirichlet Allocation (LDA) tuned using Genetic Algorithm (GA), to cluster security-related StackOverflow questions based on the text. They identified frequently mentioned security topics like "Password" and "Hash" for categorization purposes. In comparison, we investigate the programming challenges and security vulnerabilities among the topics. Our SE and security findings have more technical depth.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Detecting Security Vulnerabilities</head><p>Approaches were built to detect security vulnerabilities caused by API misuse <ref type="bibr" target="#b67">[75,</ref><ref type="bibr" target="#b71">78,</ref><ref type="bibr" target="#b73">80,</ref><ref type="bibr" target="#b74">81,</ref><ref type="bibr" target="#b76">83,</ref><ref type="bibr" target="#b78">85,</ref><ref type="bibr" target="#b80">87,</ref><ref type="bibr" target="#b87">94]</ref>. For instance, Egele et al. implemented a static checker for six well defined Android cryptographic API usage rules, such as "Do not use ECB mode for encryption", and analyzed 11,748 Android applications for any rule violation <ref type="bibr" target="#b71">[78]</ref>. They found 88% of the applications violating at least one checked rule. Fischer et al. extracted Android security-related code snippets from StackOverflow, and manually labeled a subset of the data as "secure" or "insecure" <ref type="bibr" target="#b74">[81]</ref>. The labeled data allowed them to train a classifier and efficiently judge whether a code snippet is secure or not for the whole data set. Next, they searched for code clones of the snippets in 1.3 million Android apps, and found many clones of the insecure code. Fahl et al. <ref type="bibr" target="#b73">[80]</ref> and Georgiev et al. <ref type="bibr" target="#b76">[83]</ref> separately implemented an attack model: man-in-themiddle attack, and detected vulnerable Android applications and popular software libraries which misused SSL APIs. Both research groups observed that developers disabled certification validation for testing with self-signed and/or trusted certificates. He et al. developed SSLINT, an automatic static analysis tool, to identify the misuse of TLS/SSL APIs in client-side applications <ref type="bibr" target="#b78">[85]</ref>.</p><p>Compared with prior research, our study has two new contributions. First, our scope is broader. We report new challenges on secure coding practices, such as complex security configurations in Spring security, poor error messages, and multilingual programs. Second, our investigation on the online forum provides a new social and community perspective about secure coding. The unique insights cannot be discovered through analyzing code.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">Preventing Security Vulnerabilities</head><p>Various techniques were proposed to prevent developers from implementing vulnerable code and misusing APIs <ref type="bibr" target="#b69">[76,</ref><ref type="bibr" target="#b70">77,</ref><ref type="bibr" target="#b72">79,</ref><ref type="bibr" target="#b82">89,</ref><ref type="bibr" target="#b83">90,</ref><ref type="bibr" target="#b91">97]</ref>. For example, Mettler et al. designed Joe-E-a security-oriented subset of Java-to support secure software development by removing any encapsulation-breaking features from Java (e.g., reflection), and by enforcing the least privilege principle (i.e., by default, each Joe-E object has no privilege to access system resources, unless another entity passes it a reference to a system resource object) <ref type="bibr" target="#b82">[89]</ref>. Keyczar is a library designed to simplify the usage of cryptography, and thus to prevent API misuse <ref type="bibr" target="#b70">[77]</ref>. Below shows how Keyczar APIs are used to decrypt data:</p><p>Listing 5: Simple decryption with Keyczar APIs 1 C r y p t e r c r y p t e r =new C r y p t e r ( " / r s a k e y s " ) ; 2 S t r i n g p l a i n t e x t = c r y p t e r . d e c r y p t ( c i p h e r t e x t ) ;</p><p>Compared with the decryption code shown in Listing 2 (lines 18-31), this implementation is much simpler and more intuitive. All details about data format conversion and cipher initialization are hidden, while a default strong block cipher is used to properly decrypt data.</p><p>Some approaches were developed to apply formal verification techniques and analyze the security properties of cryptographic protocol specifications <ref type="bibr" target="#b69">[76,</ref><ref type="bibr" target="#b83">90]</ref> and cryptographic API implementations <ref type="bibr" target="#b72">[79,</ref><ref type="bibr" target="#b91">97]</ref>. For instance, Protocol Composition Logic (PCL) is a logic for proving security properties, like network protocols that use public and symmetric key cryptography <ref type="bibr" target="#b69">[76]</ref>. The logic is designed around a process calculus with actions for possible protocol steps including generating new random numbers, sending and receiving messages, and performing decryption and digital signature verification actions. The proof system consists of axioms about individual protocol actions and inference rules that yield assertions about protocols composed of multiple steps.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">OUR RECOMMENDATIONS</head><p>By analyzing the StackOverflow posts relevant to Java security from both software engineering and security perspectives, we observed the gap between the intended usage of APIs and the actual problematic API usage by developers, sensed developers' frustration when they spent tremendous time figuring out the correct usage of APIs (e.g., two weeks as mentioned in <ref type="bibr" target="#b48">[54]</ref>), and observed terrible security consequences of library misuse. Below are our recommendations based on the analysis. For Security Developers. Conduct security testing to check whether the implemented features work as expected. Do not disable security checks (e.g., SSL certificate validation) to implement a temporary workaround in the testing or development environment. Be cautious when following the StackOverflow accepted answers to implement secure code, because these solutions may be unsafe and outdated. For administrators of StackOverflow, we recommend them to carefully handle the posts that suggest vulnerable code, because these posts can play an influential negative role when educating security programmers.</p><p>For Library Designers. Remove or deprecate the APIs whose security protection is broken (e.g., MD5). Design clean and helpful error reporting interfaces which show not only the error, but also the possible root causes and solutions. Design simplified APIs with strong security defenses implemented by default.</p><p>For Tool Builders. Develop automatic tools to diagnose security errors, locate buggy code, and suggest security patches or solutions. Build vulnerability prevention techniques that compare peer applications that use the same set of APIs to infer and warn potential misuses. Explore approaches that check and enforce the semantic consistency between security-relevant annotations, code, and configurations. Build new approaches to transform between the implementations of declarative security and programmatic security.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">THREATS TO VALIDITY</head><p>This study is mainly based on our manual inspection of Java securityrelevant posts, so the observations may be subject to human bias. To alleviate the problem, the first author of the paper carefully inspected all posts relevant to implementation questions multiple times, while the second author also examined the posts related to security vulnerabilities (mentioned in Section 4.3) multiple times.</p><p>To remove posts without code snippets, we defined a filter to search for keywords "public" and "class". If a post does not contain both words, the filter automatically removes the post from our data set. This filter may incorrectly remove some relevant posts that contain code. In future, we will improve our crawling technique to keep the &lt;code&gt; tags around code snippets in the raw data, and then rely on these tags to filter posts more precisely.</p><p>We conservatively mentioned posts whose accepted answers will cause security vulnerabilities, although there might be more accepted answers that suffer from known security attacks. Due to the limited available program and environment information in each post, and our limited knowledge about frameworks and potential security attacks, we decided not to mention the suspicious posts whose accepted answers might lead to security vulnerabilities.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">CONCLUSION</head><p>Our work aimed at assessing the current secure coding practices, and identifying potential gaps between theory and practice and between specification and implementation. Our analysis of hundreds of posts on the popular developer forum (StackOverflow) revealed a worrisome reality in the software development industry.</p><p>• A substantial number of developers do not appear to understand the security implications of coding options, showing a lack of cybersecurity training. This situation creates frustration in developers, who sometimes end up choosing completely insecure-but-easy fixes. Examples of such easy fixes include using obsolete cryptographic hash functions, disabling cross-site request forgery protection, trusting all certificates in HTTPS verification, or using obsolete communication protocols. These poor coding practices, if used in production code, will seriously compromise the security of software products. • We provided substantial empirical evidences showing that APIs in Spring security (designed for enterprise security applications) are overly complicated and poorly documented, and error reports from runtime systems cause confusion. In addition, multi-language support for securing data is rather weak. The multi-language situation is common in security applications, as oftentimes the data is encrypted in one programming language (e.g., Python) and decrypted in another (e.g., Java). These issues can seriously hinder developers' productivity, resulting in great frustration and confusion. • Interestingly, we found that the social dynamics among askers and responders can impact people's security choices. Some influential posts are not secure. For example, we observed that in some cases an insecure suggestion by a user with a high reputation score was selected as the accepted answer, as opposed to the correct fix by a user with a lower reputation score <ref type="bibr" target="#b24">[24]</ref>. Sometimes insecure answers have many positive StackOverflow votes (as the quick fixes indeed make error messages go away) <ref type="bibr" target="#b45">[51]</ref>, which is quite misleading.</p><p>We described several possible solutions to improve secure coding practices in the paper. However, efforts (e.g., workforce retraining) to correct these alarming security issues may take a while to take effect. Our future work is on building automatic or semi-automatic security bug detection and fixing tools.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>•</head><label></label><figDesc>Positive: A question receives at least one positive vote but zero favorite count.• Favorite: A question receives at least one favorite vote.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>Taxonomy of StackOverflow postsrecommended security coding practice and the investigated security context, we decided whether the accepted solution was security vulnerable. The post shown inFigure 1contains a secure accepted answer, although the question asker originally asked for a vulnerable implementation as an easy fix.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 :</head><label>3</label><figDesc>The post distribution during 2008-2016 Figure 3 presents the post distribution among 2008-2016.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 4 :</head><label>4</label><figDesc>The post distribution among developers' sentiment towards the security features: neutral, positive, and favorite libraries. Since such problems are usually specific to programmers' software development environments, they are not representative or relevant to many developers' security interests. In comparison, secure communication posts received the lowest percentage of neutral opinions (16%), but the highest percentage of favorite (61%), indicating that the questions were more representative, focusing more on security implementation instead of environment settings.Finding 2: Developers' major security concern has shifted from Java platform security to enterprise application security over the years, especially to Spring security. Compared with others, secure communication posts received the highest percentage (61%) of favorite votes, indicating that the questions are important and representative.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Listing 1 :</head><label>1</label><figDesc>An exemplar implementation working unexpectedly in Spring Boot applications 1 @ En ab leW eb Se cur it y 2 p u b l i c c l a s s S e c u r i t y C o n f i g u r a t i o n { 3 @ C o n f i g u r a t i o n @Order ( 1 ) 4 p u b l i c s t a t i c c l a s s A p i C o n f i g u r a t i o n A d a p t e r 5 e x t e n d s W e b S e c u r i t y C o n f i g u r e r A d a p t e r { 6 @Bean 7 p u b l i c G e n e r i c F i l t e r B e a n 8 a p i A u t h e n t i c a t i o n F i l t e r ( ) { . . . } 9 @Override 10 p r o t e c t e d v o i d c o n f i g u r e ( H t t p S e c u r i t y h t t p ) 11 t h r o w s E x c e p t i o n { 12 h t t p . a n t M a t c h e r ( " / a p i / * * " ) 13 . a d d F i l t e r A f t e r ( a p i A u t h e n t i c a t i o n F i l t e r ( ) . . . ) 14 . s e s s i o n M a n a g e m e n t ( ) . . . ; } } 15 @ C o n f i g u r a t i o n @Order ( 2 ) 16 p u b l i c s t a t i c c l a s s W e b S e c u r i t y C o n f i g u r a t i o n 17 e x t e n d s W e b S e c u r i t y C o n f i g u r e r A d a p t e r { @Bean 19 p u b l i c G e n e r i c F i l t e r B e a n 20 w e b A u t h e n t i c a t i o n F i l t e r ( ) { . . . } @Override 22 p r o t e c t e d v o i d c o n f i g u r e ( H t t p S e c u r i t y h t t p ) 23 t h r o w s E x c e p t i o n { 24 h t t p . a n t M a t c h e r ( " / " ) 25 . a d d F i l t e r A f t e r ( w e b A u t h e n t i c a t i o n F i l t e r ( ) . . . ) 26 . a u t h o r i z e R e q u e s t s ( ) . . . ; } } }</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Listing 2 :</head><label>2</label><figDesc>Encryption in PHP and decryption in Java // *****keypair.php ***** 2 i f ( f i l e _ e x i s t s ( ' p r i v a t e . key ' ) ) { 3 echo f i l e _ g e t _ c o n t e n t s ( ' p r i v a t e . key ' ) ; } 4 e l s e { 5 i n c l u d e ( ' C r y p t / RSA . php ' ) ; 6 $ r s a = new Crypt_RSA ( ) ; 7 $ r e s = $ r s a −&gt; c r e a t e K e y ( ) ; 8 $ p r i v a t e K e y = $ r e s [ ' p r i v a t e k e y ' ] ; 9 $ p u b l i c K e y = $ r e s [ ' p u b l i c k e y ' ] ; 10 f i l e _ p u t _ c o n t e n t s ( ' p u b l i c . key ' , $ p u b l i c K e y ) ; 11 f i l e _ p u t _ c o n t e n t s ( ' p r i v a t e . key ' , $ p r i v a t e K e y ) ; } // *****encrypt.php ***** 13 i n c l u d e ( ' C r y p t / RSA . php ' ) ; 14 $ r s a = new Crypt_RSA ( ) ; 15 $ r s a −&gt; s e t E n c r y p t i o n M o d e ( CRYPT_RSA_ENCRYPTION_OAEP ) ; 16 $ r s a −&gt; l o a d K e y ( f i l e _ g e t _ c o n t e n t s ( ' p u b l i c . key ' ) ) ; 17 // *****MainClass.java ***** 18 BASE64Decoder d e c o d e r =new BASE64Decoder ( ) ; 19 S t r i n g b 6 4 P r i v a t e K e y = g e t C o n t e n t s ( 20 " h t t p : / / l o c a l h o s t / a p i / k e y p a i r . php " ) . t r i m ( ) ; 21 b y t e [ ] decodedKey = d e c o d e r . d e c o d e B u f f e r ( b 6 4 P r i v a t e K e y ) ; 22 B u f f e r e d R e a d e r b r =new B u f f e r e d R e a d e r ( 23 new S t r i n g R e a d e r ( new S t r i n g ( decodedKey ) ) ) ; 24 PEMReader p r =new PEMReader ( b r ) ; 25 K e y P a i r kp = ( K e y P a i r ) p r . r e a d O b j e c t ( ) ; 26 p r . c l o s e ( ) ; 27 P r i v a t e K e y p r i v a t e K e y =kp . g e t P r i v a t e ( ) ; 28 C i p h e r c i p h e r = C i p h e r . g e t I n s t a n c e ( 29 " RSA / None / OAEPWithSHA1AndMGF1Padding " , " BC " ) ; 30 c i p h e r .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Listing 3 :</head><label>3</label><figDesc>Consistency between the key format and keyspec 1 / / p r i v K e y s h o u l d be i n PKCS #8 f o r m a t 2 b y t e [ ] p r i v K e y = . . . ; 3 PKCS8EncodedKeySpec k e y S p e c = 4 new PKCS8EncodedKeySpec ( p r i v K e y ) ;</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Finding 8 :</head><label>8</label><figDesc>In 5 of the 12 csrf()-relevant posts, developers took the suggestion to irresponsibly disable the default CSRF protection. Developers are unaware of the security consequences of their insecure coding.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 5 :</head><label>5</label><figDesc>Simplified overview of creating an SSL connection</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head></head><label></label><figDesc>l i c j a v a . s e c u r i t y . c e r t . X 5 0 9 C e r t i f i c a t e [ ] g e t A c c e p t e d I s s u e r s ( ) { r e t u r n n u l l ; } 5 p u b l i c v o i d c h e c k C l i e n t T r u s t e d ( . . . ) { } 6 p u b l i c v o i d c h e c k S e r v e r T r u s t e d ( . . . ) { } } } ; 7 // Install the all-trusting trust manager 8 t r y { 9 S S L C o n t e x t s c = S S L C o n t e x t . g e t I n s t a n c e ( " SSL " ) ; 10 s c . i n i t ( n u l l , t r u s t A l l C e r t s , new j a v a . s e c u r i t y . SecureRandom ( ) ) ; 11 H t t p s U R L C o n n e c t i o n . s e t D e f a u l t S S L S o c k e t F a c t o r y ( s c . g e t S o c k e t F a c t o r y ( ) ) ; 12 } c a t c h ( E x c e p t i o n e ) { } 13 // Access an https URL without having the certificate in the 14 // truststore 15 t r y { 16 URL u r l =new URL ( " h t t p s : / / hostname / i n d e x . html " ) ; 17 } c a t c h ( M a l f o r m e d U R L E x c e p t i o n e ) { }</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head></head><label></label><figDesc>4.2.2 Cryptography. Many posts were about key generation and usage. For instance, some posts discussed how to create a key from scratch [38], or how to generate or retrieve a key from a random number [26], a byte array [12], a string [15], a certificate</figDesc><table /><note></note></figure>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<ptr target="https://stackoverflow.com/questions/12833826/aes-256-implementation-in-gae." />
		<title level="m">AES-256 implementation in GAE</title>
		<imprint/>
	</monogr>
	<note>n. d.</note>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Apache</forename><surname>Shiro Documentation</surname></persName>
		</author>
		<ptr target="https://shiro.apache.org/documentation.html." />
		<imprint/>
	</monogr>
	<note>n. d.</note>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title/>
		<ptr target="https://www.oracle.com/middleware/weblogic/index.html." />
	</analytic>
	<monogr>
		<title level="j">Application Server -Oracle WebLogic Server</title>
		<imprint/>
	</monogr>
	<note>n. d.</note>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">authc filter is not calling MyRealm in shiro with spring</title>
		<ptr target="https://stackoverflow.com/questions/30463057/authc-filter-is-not-calling-myrealm-in-shiro-with-spring." />
		<imprint/>
	</monogr>
	<note>n. d.</note>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">Basic Program for encrypt/Decrypt : javax.crypto.BadPaddingException: Decryption error</title>
		<ptr target="https://stackoverflow.com/questions/39518979/basic-program-for-encrypt-decrypt-javax-crypto-badpaddingexception-decryption." />
		<imprint/>
	</monogr>
	<note>n. d.. n. d.</note>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<ptr target="https://stackoverflow.com/questions/10271164/biginteger-to-key." />
		<title level="m">BigInteger to Key</title>
		<imprint/>
	</monogr>
	<note>n. d.. n. d.</note>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bouncy</forename><surname>Castle</surname></persName>
		</author>
		<ptr target="https://www.bouncycastle.org." />
		<imprint/>
	</monogr>
	<note>n. d.</note>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">Can a secret be hidden in a &apos;safe&apos; java class offering access credentials?</title>
		<ptr target="https://stackoverflow.com/questions/5761519/can-a-secret-be-hidden-in-a-safe-java-class-offering-access-credentials." />
		<imprint/>
	</monogr>
	<note>n. d.</note>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">Compare two Public Key values in java</title>
		<ptr target="https://stackoverflow.com/questions/37439695/compare-two-public-key-values-in-java." />
		<imprint/>
	</monogr>
	<note>n. d.. n. d.</note>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<ptr target="https://stackoverflow.com/questions/20961600/configure-spring-security-without-xml-in-spring-4." />
		<title level="m">Configure Spring Security without XML in Spring 4</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">@Context injection in Stateless EJB used by JAX-RS</title>
		<ptr target="https://stackoverflow.com/questions/29132547/context-injection-in-stateless-ejb-used-by-jax-rs." />
		<imprint/>
	</monogr>
	<note>n. d.</note>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">Converted secret key into bytes, how to convert it back to secrect key?</title>
		<ptr target="https://stackoverflow.com/questions/5364338/converted-secret-key-into-bytes-how-to-convert-it-back-to-secrect-key." />
		<imprint/>
	</monogr>
	<note>n. d.</note>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">CWE-227: Improper Fulfillment of API Contract</title>
		<ptr target="https://cwe.mitre.org/data/definitions/227.html." />
		<imprint/>
	</monogr>
	<note>n. d.. n. d.</note>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title/>
		<ptr target="https://blog.codinghorror.com/dictionary-attacks-101/." />
	</analytic>
	<monogr>
		<title level="j">Dictionary Attacks</title>
		<imprint>
			<biblScope unit="volume">101</biblScope>
		</imprint>
	</monogr>
	<note>n. d.</note>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">Edit code sample to specify DES key value</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Editcodesampletospecifydeskeyvalue</surname></persName>
		</author>
		<imprint/>
	</monogr>
	<note>n. d.</note>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Php</forename><surname>Encryption</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Decryption</forename><surname>Java</surname></persName>
		</author>
		<ptr target="https://stackoverflow.com/questions/15639442/encryption-php-decryption-java." />
		<imprint/>
	</monogr>
	<note>n. d.</note>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">Get public and private key from ASN1 encrypted pem certificate</title>
		<ptr target="https://stackoverflow.com/questions/30392114/get-public-and-private-key-from-asn1-encrypted-pem-certificate." />
		<imprint/>
	</monogr>
	<note>n. d.. n. d.</note>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Glassfish</surname></persName>
		</author>
		<ptr target="https://javaee.github.io/glassfish/." />
		<imprint/>
	</monogr>
	<note>n. d.</note>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<ptr target="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-52r1.pdf." />
		<title level="m">Guidelines for the Selection, Configuration, and Use of Transport Layer Security (TLS) Implementations</title>
		<imprint/>
	</monogr>
	<note>n. d.. n. d.</note>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<title level="m" type="main">Hiding my security key from java reflection</title>
		<ptr target="https://stackoverflow.com/questions/14903318/hiding-my-security-key-from-java-reflection." />
		<imprint/>
	</monogr>
	<note>n. d.. n. d.</note>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title level="m" type="main">How can I get a signed Java Applet to perform privileged operations when</title>
		<ptr target="https://stackoverflow.com/questions/1006674/how-can-i-get-a-signed-java-applet-to-perform-privileged-operations-when-called." />
		<imprint/>
	</monogr>
	<note>n. d.. n. d.</note>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
		<ptr target="https://stackoverflow.com/questions/15274874/how-does-java-string-being-immutable-increase-security." />
		<title level="m">How does Java string being immutable increase security</title>
		<imprint/>
	</monogr>
	<note>n. d.</note>
</biblStruct>

<biblStruct xml:id="b23">
	<monogr>
		<title level="m" type="main">how to accept self-signed certificates for JNDI/L-DAP connections?</title>
		<ptr target="https://stackoverflow.com/questions/4615163/how-to-accept-self-signed-certificates-for-jndi-ldap-connections." />
		<imprint/>
	</monogr>
	<note>n. d.</note>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<title level="m" type="main">How to add MD5 or SHA hash to spring security?</title>
		<ptr target="https://stackoverflow.com/questions/18581463/how-to-add-md5-or-sha-hash-to-spring-security." />
		<imprint/>
	</monogr>
	<note>n. d.. n. d.</note>
</biblStruct>

<biblStruct xml:id="b25">
	<monogr>
		<title level="m" type="main">How to apply spring security filter only on se</title>
		<ptr target="https://stackoverflow.com/questions/36795894/how-to-apply-spring-security-filter-only-on-secured-endpoints." />
		<imprint/>
	</monogr>
	<note>n. d.]). [26] [n. d.</note>
</biblStruct>

<biblStruct xml:id="b26">
	<monogr>
		<title level="m" type="main">How to generate secret key using SecureRandom</title>
		<ptr target="https://stackoverflow.com/questions/37244064/how-to-generate-secret-key-using-securerandom-getinstancestrong." />
		<imprint/>
	</monogr>
	<note>getInstanceStrong(. n. d.</note>
</biblStruct>

<biblStruct xml:id="b27">
	<monogr>
		<title level="m" type="main">How to override Spring Security default configuration in Spring Boot</title>
		<ptr target="https://stackoverflow.com/questions/35600488/how-to-override-spring-security-default-configuration-in-spring-boot." />
		<imprint/>
	</monogr>
	<note>n. d.</note>
</biblStruct>

<biblStruct xml:id="b28">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Httpsecurity</surname></persName>
		</author>
		<ptr target="https://docs.spring.io/spring-security/site/docs/current/apidocs/org/springframework/security/config/annotation/web/builders/HttpSecurity.html." />
		<imprint/>
	</monogr>
	<note>Spring Security 4.2.3.RELEASE API. n. d.</note>
</biblStruct>

<biblStruct xml:id="b29">
	<monogr>
		<title level="m" type="main">Implementing a Remote Interface</title>
		<ptr target="http://docs.oracle.com/javase/tutorial/rmi/implementing.html." />
		<imprint/>
	</monogr>
	<note>n. d.. n. d.</note>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title/>
		<ptr target="https://docs.oracle.com/javase/8/docs/technotes/guides/security/jaas/JAASRefGuide.html." />
	</analytic>
	<monogr>
		<title level="j">Java Authentication and Authorization Service</title>
		<imprint/>
	</monogr>
	<note>JAAS) Reference Guide. n. d.</note>
</biblStruct>

<biblStruct xml:id="b31">
	<monogr>
		<title level="m" type="main">java class to trust all for sending file to https web service</title>
		<ptr target="https://stackoverflow.com/questions/21156929/java-class-to-trust-all-for-sending-file-to-https-web-service." />
		<imprint/>
	</monogr>
	<note>n. d.</note>
</biblStruct>

<biblStruct xml:id="b32">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Java Cryptography Architecture</surname></persName>
		</author>
		<ptr target="http://docs.oracle.com/javase/7/docs/technotes/guides/security/crypto/CryptoSpec.html." />
		<imprint/>
	</monogr>
	<note>n. d.</note>
</biblStruct>

<biblStruct xml:id="b33">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">E</forename><surname>Java</surname></persName>
		</author>
		<ptr target="https://stackoverflow.com/questions/30504131/java-ee-7-ejb-security-not-working." />
		<imprint/>
	</monogr>
	<note>n. d.</note>
</biblStruct>

<biblStruct xml:id="b34">
	<monogr>
		<title level="m" type="main">server =&gt; Exception in thread &quot;main&quot; javax.mail</title>
		<ptr target="https://stackoverflow.com/questions/25017050/java-mail-get-mails-with-pop3-from-exchange-server-exception-in-thread-main." />
		<imprint/>
	</monogr>
	<note>n. d.</note>
</biblStruct>

<biblStruct xml:id="b35">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rmi</forename><surname>Java</surname></persName>
		</author>
		<ptr target="https://stackoverflow.com/questions/36570012/java-rmi-access-denied." />
		<imprint/>
	</monogr>
	<note>n. d.</note>
</biblStruct>

<biblStruct xml:id="b36">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Java</forename><surname>Security Overview</surname></persName>
		</author>
		<ptr target="http://docs.oracle.com/javase/8/docs/technotes/guides/security/overview/jsoverview.html." />
		<imprint/>
	</monogr>
	<note>n. d.</note>
</biblStruct>

<biblStruct xml:id="b37">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Java</forename><surname>Security</surname></persName>
		</author>
		<ptr target="https://stackoverflow.com/questions/3947558/java-security-sandboxing-plugins-loaded-via-urlclassloader." />
		<title level="m">Sandboxing plugins loaded via URL-ClassLoader</title>
		<imprint/>
	</monogr>
	<note>n. d.</note>
</biblStruct>

<biblStruct xml:id="b38">
	<monogr>
		<title level="m" type="main">InstallCert recognizes certificate, but still &quot;unable to find valid certification path</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ssl -</forename><surname>Java</surname></persName>
		</author>
		<ptr target="https://stackoverflow.com/questions/11087121/java-ssl-installcert-recognizes-certificate-but-still-unable-to-find-valid-c." />
		<imprint/>
	</monogr>
	<note>n. d.</note>
</biblStruct>

<biblStruct xml:id="b39">
	<monogr>
		<title level="m" type="main">JSR-000366 Java Platform, Enterprise Edition 8 Public Review Specification</title>
		<ptr target="http://download.oracle.com/otndocs/jcp/java_ee-8-pr-spec/." />
		<imprint/>
	</monogr>
	<note>n. d.. n. d.</note>
</biblStruct>

<biblStruct xml:id="b40">
	<monogr>
		<title level="m" type="main">logout call -Spring security logout call</title>
		<ptr target="https://stackoverflow.com/questions/24530603/spring-security-logout-call." />
		<imprint/>
	</monogr>
	<note>n. d.. n. d.</note>
</biblStruct>

<biblStruct xml:id="b41">
	<monogr>
		<ptr target="https://stackoverflow.com/questions/4846484/md5-hashing-in-android." />
		<title level="m">MD5 hashing in Android</title>
		<imprint/>
	</monogr>
	<note>n. d.. n. d.</note>
</biblStruct>

<biblStruct xml:id="b42">
	<monogr>
		<title level="m" type="main">PicketLink / Deltaspike security does not work in SOAP (JAX-WS) layer (CDI vs EJB?</title>
		<ptr target="https://stackoverflow.com/questions/32392702/picketlink-deltaspike-security-does-not-work-in-soap-jax-ws-layer-cdi-vs-ej." />
		<imprint/>
	</monogr>
	<note>n. d.</note>
</biblStruct>

<biblStruct xml:id="b43">
	<monogr>
		<title level="m" type="main">RF 6101 -The Secure Sockets Layer (SSL) Protocol Version 3</title>
		<ptr target="https://tools.ietf.org/html/rfc6101." />
		<imprint/>
	</monogr>
	<note>n. d.. n. d.</note>
</biblStruct>

<biblStruct xml:id="b44">
	<monogr>
		<title level="m" type="main">Fast and Powerful Scraping and Web Crawling Framework</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">|</forename><surname>Scrapy</surname></persName>
		</author>
		<ptr target="https://scrapy.org." />
		<imprint/>
	</monogr>
	<note>n. d.</note>
</biblStruct>

<biblStruct xml:id="b45">
	<monogr>
		<title level="m" type="main">security -Allowing Java to use an untrusted certificate for SS-L/HTTPS connection</title>
		<ptr target="https://stackoverflow.com/questions/1201048/allowing-java-to-use-an-untrusted-certificate-for-ssl-https-connection." />
		<imprint/>
	</monogr>
	<note>n. d.. n. d.</note>
</biblStruct>

<biblStruct xml:id="b46">
	<monogr>
		<title level="m" type="main">security exception when loading web image in jar</title>
		<ptr target="https://stackoverflow.com/questions/2011407/security-exception-when-loading-web-image-in-jar." />
		<imprint/>
	</monogr>
	<note>n. d.. n. d.</note>
</biblStruct>

<biblStruct xml:id="b47">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Spring</forename><surname>Security</surname></persName>
		</author>
		<ptr target="https://projects.spring.io/spring-security/." />
		<imprint/>
	</monogr>
	<note>n. d.</note>
</biblStruct>

<biblStruct xml:id="b48">
	<monogr>
		<title level="m" type="main">Spring Security 4 xml configuration UserDetailsService authentication not working</title>
		<ptr target="https://stackoverflow.com/questions/41321176/spring-security-4-xml-configuration-userdetailsservice-authentication-not-workin." />
		<imprint/>
	</monogr>
	<note>n. d.</note>
</biblStruct>

<biblStruct xml:id="b49">
	<monogr>
		<title level="m" type="main">Spring security JDK based proxy issue while using @Secured annotation on Controller method</title>
		<ptr target="https://stackoverflow.com/questions/35860442/spring-security-jdk-based-proxy-issue-while-using-secured-annotation-on-control." />
		<imprint/>
	</monogr>
	<note>n. d.. n. d.</note>
</biblStruct>

<biblStruct xml:id="b50">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Spring</forename><surname>Security Reference</surname></persName>
		</author>
		<ptr target="http://docs.spring.io/spring-security/site/docs/3.2.4.RELEASE/reference/htmlsingle/#jc-httpsecurity." />
		<imprint/>
	</monogr>
	<note>n. d.</note>
</biblStruct>

<biblStruct xml:id="b51">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Spring</forename><surname>Security Tutorial</surname></persName>
		</author>
		<ptr target="http://www.mkyong.com/tutorials/spring-security-tutorials/." />
		<imprint/>
	</monogr>
	<note>n. d.</note>
</biblStruct>

<biblStruct xml:id="b52">
	<monogr>
		<ptr target="https://stackoverflow.com/questions/28172056/spring-security-using-jboss-security-domain." />
		<title level="m">Spring Security using JBoss &lt;security-domain&gt;</title>
		<imprint/>
	</monogr>
	<note>n. d.</note>
</biblStruct>

<biblStruct xml:id="b53">
	<monogr>
		<title level="m" type="main">SSL Certificate Verification : javax.net.ssl</title>
		<ptr target="https://stackoverflow.com/questions/25079751/ssl-certificate-verification-javax-net-ssl-sslhandshakeexception." />
		<imprint/>
	</monogr>
	<note>n. d.. n. d.</note>
</biblStruct>

<biblStruct xml:id="b54">
	<monogr>
		<title level="m" type="main">Ssl handshake fails with unable to find valid certification path to requested target</title>
		<ptr target="https://stackoverflow.com/questions/40977556/ssl-handshake-fails-with-unable-to-find-valid-certification-path-to-requested-ta." />
		<imprint/>
	</monogr>
	<note>n. d.. n. d.</note>
</biblStruct>

<biblStruct xml:id="b55">
	<monogr>
		<title level="m" type="main">SSL Socket Connection working even though client is not sending certificate?</title>
		<ptr target="https://stackoverflow.com/questions/26761966/ssl-socket-connection-working-even-though-client-is-not-sending-certificate." />
		<imprint/>
	</monogr>
	<note>n. d.</note>
</biblStruct>

<biblStruct xml:id="b56">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Stackoverflow</surname></persName>
		</author>
		<ptr target="https://stackoverflow.com." />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b57">
	<monogr>
		<title level="m" type="main">The Webserver I talk to updated its SSL cert and now my app can&apos;t talk to it</title>
		<ptr target="https://stackoverflow.com/questions/5758812/the-webserver-i-talk-to-updated-its-ssl-cert-and-now-my-app-cant-talk-to-it." />
		<imprint/>
	</monogr>
	<note>n. d.</note>
</biblStruct>

<biblStruct xml:id="b58">
	<monogr>
		<title level="m" type="main">Trusting all certificates using HttpClient over HTTPS</title>
		<ptr target="https://stackoverflow.com/questions/2642777/trusting-all-certificates-using-httpclient-over-https." />
		<imprint/>
	</monogr>
	<note>n. d.</note>
</biblStruct>

<biblStruct xml:id="b59">
	<monogr>
		<title level="m" type="main">Use of ECC in Java SE 1</title>
		<ptr target="https://stackoverflow.com/questions/24383637/use-of-ecc-in-java-se-1-7." />
		<imprint/>
	</monogr>
	<note>n. d.. n. d.</note>
</biblStruct>

<biblStruct xml:id="b60">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Web</forename><forename type="middle">Security</forename><surname>Samples</surname></persName>
		</author>
		<ptr target="https://github.com/spring-projects/spring-security-javaconfig/blob/master/samples-web.md#sample-multi-http-web-configuration." />
		<imprint/>
	</monogr>
	<note>n. d.</note>
</biblStruct>

<biblStruct xml:id="b61">
	<analytic>
		<title/>
		<ptr target="http://www-03.ibm.com/software/products/en/appserv-was." />
	</analytic>
	<monogr>
		<title level="j">WebSphere Application Server -IBM</title>
		<imprint/>
	</monogr>
	<note>n. d.</note>
</biblStruct>

<biblStruct xml:id="b62">
	<analytic>
		<title/>
	</analytic>
	<monogr>
		<title level="j">When a TrustManagerFactory is not a TrustManager-Factory</title>
		<imprint>
			<publisher>Java</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b63">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Wildfly</surname></persName>
		</author>
		<ptr target="http://wildfly.org." />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b64">
	<monogr>
		<title level="m" type="main">Wildfly 9 security domains won&apos;t work</title>
		<ptr target="https://stackoverflow.com/questions/37425056/wildfly-9-security-domains-wont-work." />
		<imprint/>
	</monogr>
	<note>n. d.. n. d.</note>
</biblStruct>

<biblStruct xml:id="b65">
	<monogr>
		<title level="m" type="main">Your implementation of PreferenceActivity is vulnerable to fragment injection</title>
		<ptr target="https://stackoverflow.com/questions/41278592/your-implementation-of-preferenceactivity-is-vulnerable-to-fragment-injection." />
		<imprint/>
	</monogr>
	<note>n. d.</note>
</biblStruct>

<biblStruct xml:id="b66">
	<analytic>
		<title level="a" type="main">Security of passwords</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sirapat</forename><surname>Boonkrong</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Information Technology Journal</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="page" from="112" to="117" />
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b67">
	<analytic>
		<title level="a" type="main">Evaluation of Cryptography Usage in Android Applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alexia</forename><surname>Chatzikonstantinou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christoforos</forename><surname>Ntantogian</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Georgios</forename><surname>Karopoulos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christos</forename><surname>Xenakis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 9th EAI International Conference on Bio-inspired Information and Communications Technologies (Formerly BIONETICS) (BICT&apos;15)</title>
		<meeting>the 9th EAI International Conference on Bio-inspired Information and Communications Technologies (Formerly BIONETICS) (BICT&apos;15)</meeting>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b68">
	<monogr>
		<title/>
		<idno type="DOI">10.4108/eai.3-12-2015.2262471</idno>
		<ptr target="https://doi.org/10.4108/eai.3-12-2015.2262471" />
		<imprint>
			<publisher>ICST</publisher>
			<biblScope unit="page" from="83" to="90" />
			<pubPlace>Brussels, Belgium, Belgium</pubPlace>
		</imprint>
		<respStmt>
			<orgName>ICST (Institute for Computer Sciences, Social-Informatics and Telecommunications Engineering</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b69">
	<analytic>
		<title level="a" type="main">Electronic Notes in Theoretical Computer Science</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Anupam</forename><surname>Datta</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ante</forename><surname>Derek</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">John</forename><forename type="middle">C</forename><surname>Mitchell</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Arnab</forename><surname>Roy</surname></persName>
		</author>
		<idno type="DOI">10.1016/j.entcs.2007.02.012</idno>
		<ptr target="https://doi.org/10.1016/j.entcs.2007.02.012" />
	</analytic>
	<monogr>
		<title level="m">Computation, Meaning, and Logic: Articles dedicated to Gordon Plotkin</title>
		<imprint>
			<date type="published" when="2007" />
			<biblScope unit="volume">172</biblScope>
			<biblScope unit="page" from="311" to="358" />
		</imprint>
	</monogr>
	<note>Protocol Composition Logic (PCL)</note>
</biblStruct>

<biblStruct xml:id="b70">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Arkajit</forename><surname>Dey</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stephen</forename><surname>Weis</surname></persName>
		</author>
		<title level="m">Keyczar: A Cryptographic Toolkit</title>
		<imprint/>
	</monogr>
	<note>n. d.</note>
</biblStruct>

<biblStruct xml:id="b71">
	<analytic>
		<title level="a" type="main">An Empirical Study of Cryptographic Misuse in Android Applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Manuel</forename><surname>Egele</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Brumley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yanick</forename><surname>Fratantonio</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christopher</forename><surname>Kruegel</surname></persName>
		</author>
		<idno type="DOI">10.1145/2508859.2516693</idno>
		<ptr target="https://doi.org/10.1145/2508859.2516693" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2013 ACM SIGSAC Conference on Computer &amp;#38; Communications Security (CCS &apos;13)</title>
		<meeting>the 2013 ACM SIGSAC Conference on Computer &amp;#38; Communications Security (CCS &apos;13)<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2013" />
			<biblScope unit="page" from="73" to="84" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b72">
	<analytic>
		<title level="a" type="main">Pragmatic Equivalence and Safety Checking in Cryptol</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Levent</forename><surname>Erkök</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">John</forename><surname>Matthews</surname></persName>
		</author>
		<idno type="DOI">10.1145/1481848.1481860</idno>
		<ptr target="https://doi.org/10.1145/1481848.1481860" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 3rd Workshop on Programming Languages Meets Program Verification (PLPV &apos;09)</title>
		<meeting>the 3rd Workshop on Programming Languages Meets Program Verification (PLPV &apos;09)<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2008" />
			<biblScope unit="page" from="73" to="82" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b73">
	<analytic>
		<title level="a" type="main">Why Eve and Mallory Love Android: An Analysis of Android SSL (in)Security</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sascha</forename><surname>Fahl</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Marian</forename><surname>Harbach</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thomas</forename><surname>Muders</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lars</forename><surname>Baumgärtner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bernd</forename><surname>Freisleben</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Matthew</forename><surname>Smith</surname></persName>
		</author>
		<idno type="DOI">10.1145/2382196.2382205</idno>
		<ptr target="https://doi.org/10.1145/2382196.2382205" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2012 ACM Conference on Computer and Communications Security (CCS &apos;12)</title>
		<meeting>the 2012 ACM Conference on Computer and Communications Security (CCS &apos;12)<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2012" />
			<biblScope unit="page" from="50" to="61" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b74">
	<analytic>
		<title level="a" type="main">Stack Overflow Considered Harmful? The Impact of Copy&amp;Paste on Android Application Security</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Felix</forename><surname>Fischer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Konstantin</forename><surname>Bâĺottinger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Huang</forename><surname>Xiao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christian</forename><surname>Stransky</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">38th IEEE Symposium on Security and Privacy (S&amp;P &apos;17</title>
		<imprint>
			<date type="published" when="2017-05-22" />
		</imprint>
	</monogr>
	<note>Yasemin Acar, Michael Backes, and Sascha Fahl</note>
</biblStruct>

<biblStruct xml:id="b75">
	<analytic>
		<title level="a" type="main">Implementing Security and Cryptography</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cory</forename><surname>Gackenheimer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Node. js Recipes</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2013" />
			<biblScope unit="page" from="133" to="160" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b76">
	<analytic>
		<title level="a" type="main">The Most Dangerous Code in the World: Validating SSL Certificates in Non-browser Software</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Martin</forename><surname>Georgiev</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Subodh</forename><surname>Iyengar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Suman</forename><surname>Jana</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rishita</forename><surname>Anubhai</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dan</forename><surname>Boneh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vitaly</forename><surname>Shmatikov</surname></persName>
		</author>
		<idno type="DOI">10.1145/2382196.2382204</idno>
		<ptr target="https://doi.org/10.1145/2382196.2382204" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2012 ACM Conference on Computer and Communications Security (CCS &apos;12)</title>
		<meeting>the 2012 ACM Conference on Computer and Communications Security (CCS &apos;12)<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2012" />
			<biblScope unit="page" from="38" to="49" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b77">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Li</forename><surname>Gong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gary</forename><surname>Ellison</surname></persName>
		</author>
		<title level="m">Inside Java(TM) 2 Platform Security: Architecture, API Design, and Implementation</title>
		<imprint>
			<publisher>Pearson Education</publisher>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
	<note>2nd ed.</note>
</biblStruct>

<biblStruct xml:id="b78">
	<analytic>
		<title level="a" type="main">Vetting SSL Usage in Applications with SSLINT</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>He</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Rastogi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Cao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><forename type="middle">N</forename><surname>Venkatakrishnan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Zhang</surname></persName>
		</author>
		<idno type="DOI">10.1109/SP.2015.38</idno>
		<ptr target="https://doi.org/10.1109/SP.2015.38" />
	</analytic>
	<monogr>
		<title level="m">2015 IEEE Symposium on Security and Privacy</title>
		<imprint>
			<date type="published" when="2015" />
			<biblScope unit="page" from="519" to="534" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b79">
	<analytic>
		<title level="a" type="main">Why Does Cryptographic Software Fail?: A Case Study and Open Problems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Lazar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Haogang</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Xi</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nickolai</forename><surname>Zeldovich</surname></persName>
		</author>
		<idno type="DOI">10.1145/2637166.2637237</idno>
		<ptr target="https://doi.org/10.1145/2637166.2637237" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of 5th Asia-Pacific Workshop on Systems (APSys &apos;14)</title>
		<meeting>5th Asia-Pacific Workshop on Systems (APSys &apos;14)<address><addrLine>New York, NY, USA, Article</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b80">
	<monogr>
		<title level="m" type="main">iCryptoTracer: Dynamic Analysis on Misuse of Cryptography Functions in iOS Applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yong</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yuanyuan</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Juanru</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dawu</forename><surname>Gu</surname></persName>
		</author>
		<idno type="DOI">10.1007/978-3-319-11698-3_27</idno>
		<ptr target="https://doi.org/10.1007/978-3-319-11698-3_27" />
		<imprint>
			<date type="published" when="2014" />
			<publisher>Springer International Publishing</publisher>
			<biblScope unit="page" from="349" to="362" />
			<pubPlace>Cham</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b81">
	<monogr>
		<title level="m" type="main">Software Vulnerabilities in Java</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Fred</forename><surname>Long</surname></persName>
		</author>
		<idno>CMU/SEI-2005- TN-044</idno>
		<ptr target="http://resources.sei.cmu.edu/library/asset-view.cfm?AssetID=7573" />
		<imprint>
			<date type="published" when="2005" />
			<pubPlace>Pittsburgh, PA</pubPlace>
		</imprint>
		<respStmt>
			<orgName>Software Engineering Institute, Carnegie Mellon University</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b82">
	<analytic>
		<title level="a" type="main">Joe-E: A Security-Oriented Subset of Java</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Adrian</forename><surname>Mettler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Wagner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tyler</forename><surname>Close</surname></persName>
		</author>
		<ptr target="http://www.truststc.org/pubs/652.html" />
	</analytic>
	<monogr>
		<title level="m">Network and Distributed Systems Symposium. Internet Society</title>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b83">
	<analytic>
		<title level="a" type="main">Automated Analysis of Cryptographic Protocols Using Mur/Spl Phi</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">C</forename><surname>Mitchell</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Mitchell</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><surname>Stern</surname></persName>
		</author>
		<ptr target="http://dl.acm.org/citation.cfm?id=882493.884384" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 1997 IEEE Symposium on Security and Privacy (SP &apos;97)</title>
		<meeting>the 1997 IEEE Symposium on Security and Privacy (SP &apos;97)<address><addrLine>Washington, DC, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="1997" />
			<biblScope unit="page">141</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b84">
	<monogr>
		<title level="m" type="main">This POODLE bites: exploiting the SSL 3.0 fallback</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bodo</forename><surname>Möller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thai</forename><surname>Duong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Krzysztof</forename><surname>Kotowicz</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2014" />
			<biblScope unit="page" from="1" to="4" />
		</imprint>
	</monogr>
	<note type="report_type">PDF online</note>
</biblStruct>

<biblStruct xml:id="b85">
	<analytic>
		<title level="a" type="main">Jumping Through Hoops: Why Do Java Developers Struggle with Cryptography APIs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sarah</forename><surname>Nadi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stefan</forename><surname>Krüger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mira</forename><surname>Mezini</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eric</forename><surname>Bodden</surname></persName>
		</author>
		<idno type="DOI">10.1145/2884781.2884790</idno>
		<ptr target="https://doi.org/10.1145/2884781.2884790" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 38th International Conference on Software Engineering (ICSE &apos;16)</title>
		<meeting>the 38th International Conference on Software Engineering (ICSE &apos;16)<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2016" />
			<biblScope unit="page" from="935" to="946" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b86">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Scott</forename><surname>Oaks</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1998" />
			<publisher>Java Security. O&apos;Reilly &amp; Associates, Inc</publisher>
			<pubPlace>Sebastopol, CA, USA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b87">
	<analytic>
		<title level="a" type="main">Danger is My Middle Name: Experimenting with SSL Vulnerabilities in Android Apps</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lucky</forename><surname>Onwuzurike</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Emiliano</forename><surname>De Cristofaro</surname></persName>
		</author>
		<idno type="DOI">10.1145/2766498.2766522</idno>
		<ptr target="https://doi.org/10.1145/2766498.2766522" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 8th ACM Conference on Security &amp; Privacy in Wireless and Mobile Networks (WiSec &apos;15)</title>
		<meeting>the 8th ACM Conference on Security &amp; Privacy in Wireless and Mobile Networks (WiSec &apos;15)<address><addrLine>New York, NY, USA, Article</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2015" />
			<biblScope unit="volume">15</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b88">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Fahmida</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Rashid</surname></persName>
		</author>
		<imprint/>
	</monogr>
	<note>n. d.</note>
</biblStruct>

<biblStruct xml:id="b89">
	<monogr>
		<ptr target="http://www.infoworld.com/article/3003197/security/library-misuse-exposes-leading-java-platforms-to-attack.html." />
		<title level="m">Library misuse exposes leading Java platforms to attack</title>
		<imprint/>
	</monogr>
	<note>n. d.</note>
</biblStruct>

<biblStruct xml:id="b90">
	<analytic>
		<title level="a" type="main">Modelling Analysis and Auto-detection of Cryptographic Misuse in Android Applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shao</forename><surname>Shuai</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dong</forename><surname>Guowei</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Guo</forename><surname>Tao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yang</forename><surname>Tianchang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shi</forename><surname>Chenjie</surname></persName>
		</author>
		<idno type="DOI">10.1109/DASC.2014.22</idno>
		<ptr target="https://doi.org/10.1109/DASC.2014.22" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2014 IEEE 12th International Conference on Dependable</title>
		<meeting>the 2014 IEEE 12th International Conference on Dependable<address><addrLine>Washington, DC, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2014" />
			<biblScope unit="page" from="75" to="80" />
		</imprint>
	</monogr>
	<note>Autonomic and Secure Computing (DASC &apos;14)</note>
</biblStruct>

<biblStruct xml:id="b91">
	<analytic>
		<title level="a" type="main">Automatic Formal Verification of Block Cipher Implementations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Smith</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">L</forename><surname>Dill</surname></persName>
		</author>
		<idno type="DOI">10.1109/FMCAD.2008.ECP.10</idno>
		<ptr target="https://doi.org/10.1109/FMCAD.2008.ECP.10" />
	</analytic>
	<monogr>
		<title level="j">Formal Methods in Computer-Aided Design. 1</title>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b92">
	<monogr>
		<title level="m" type="main">Password storage cheat sheet</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Steven</surname></persName>
		</author>
		<ptr target="https://www.owasp.org/index.php/Password_Storage_Cheat_Sheet" />
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b93">
	<monogr>
		<title level="m" type="main">The first collision for full SHA-1. IACR Cryptology ePrint Archive</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Marc</forename><surname>Stevens</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Elie</forename><surname>Bursztein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pierre</forename><surname>Karpman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ange</forename><surname>Albertini</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yarik</forename><surname>Markov</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2017" />
			<biblScope unit="page">190</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b94">
	<analytic>
		<title level="a" type="main">Collisions for Hash Functions MD4, MD5, HAVAL-128 and RIPEMD</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Xiaoyun</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dengguo</forename><surname>Feng</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Xuejia</forename><surname>Lai</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hongbo</forename><surname>Yu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IACR Cryptology ePrint Archive</title>
		<imprint>
			<biblScope unit="page">199</biblScope>
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b95">
	<analytic>
		<title level="a" type="main">What Security Questions Do Developers Ask? A Large-Scale Study of Stack Overflow Posts</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Xin-Li</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Lo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Xin</forename><surname>Xia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jian-Ling</forename><surname>Zhi-Yuan Wan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Sun</surname></persName>
		</author>
		<idno type="DOI">10.1007/s11390-016-1672-0</idno>
		<ptr target="https://doi.org/10.1007/s11390-016-1672-0" />
	</analytic>
	<monogr>
		<title level="j">Journal of Computer Science and Technology</title>
		<imprint>
			<biblScope unit="volume">31</biblScope>
			<biblScope unit="page" from="910" to="924" />
			<date type="published" when="2016-09-01" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b96">
	<monogr>
		<title level="m" type="main">Cross-Site Request Forgeries: Exploitation and prevention</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">William</forename><surname>Zeller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Edward W Felten</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
	<note>n. d.. n. d.</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
