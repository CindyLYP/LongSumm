{
  "name" : "63993374.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "Image-to-Image Translation with Conditional Adversarial Networks",
    "authors" : [ "Phillip Isola", "Jun-Yan Zhu", "Tinghui Zhou", "Alexei A. Efros" ],
    "emails" : [ "isola@eecs.berkeley.edu", "junyanz@eecs.berkeley.edu", "tinghuiz@eecs.berkeley.edu", "efros@eecs.berkeley.edu" ],
    "sections" : [ {
      "heading" : null,
      "text" : "We investigate conditional adversarial networks as a general-purpose solution to image-to-image translation problems. These networks not only learn the mapping from input image to output image, but also learn a loss function to train this mapping. This makes it possible to apply the same generic approach to problems that traditionally would require very different loss formulations. We demonstrate that this approach is effective at synthesizing photos from label maps, reconstructing objects from edge maps, and colorizing images, among other tasks. As a community, we no longer hand-engineer our mapping functions, and this work suggests we can achieve reasonable results without hand-engineering our loss functions either.\nMany problems in image processing, computer graphics, and computer vision can be posed as “translating” an input image into a corresponding output image. Just as a concept\nmay be expressed in either English or French, a scene may be rendered as an RGB image, a gradient field, an edge map, a semantic label map, etc. In analogy to automatic language translation, we define automatic image-to-image translation as the problem of translating one possible representation of a scene into another, given sufficient training data (see Figure 1). One reason language translation is difficult is because the mapping between languages is rarely one-to-one – any given concept is easier to express in one language than another. Similarly, most image-to-image translation problems are either many-to-one (computer vision) – mapping photographs to edges, segments, or semantic labels, or one-to-many (computer graphics) – mapping labels or sparse user inputs to realistic images. Traditionally, each of these tasks has been tackled with separate, special-purpose machinery (e.g., [7, 15, 11, 1, 3, 37, 21, 26, 9, 42, 46]), despite the fact that the setting is always the same: predict pixels from pixels. Our goal in this paper is to develop a common framework for all these problems.\n1\nar X\niv :1\n61 1.\nThe community has already taken significant steps in this direction, with convolutional neural nets (CNNs) becoming the common workhorse behind a wide variety of image prediction problems. CNNs learn to minimize a loss function – an objective that scores the quality of results – and although the learning process is automatic, a lot of manual effort still goes into designing effective losses. In other words, we still have to tell the CNN what we wish it to minimize. But, just like Midas, we must be careful what we wish for! If we take a naive approach, and ask the CNN to minimize Euclidean distance between predicted and ground truth pixels, it will tend to produce blurry results [29, 46]. This is because Euclidean distance is minimized by averaging all plausible outputs, which causes blurring. Coming up with loss functions that force the CNN to do what we really want – e.g., output sharp, realistic images – is an open problem and generally requires expert knowledge.\nIt would be highly desirable if we could instead specify only a high-level goal, like “make the output indistinguishable from reality”, and then automatically learn a loss function appropriate for satisfying this goal. Fortunately, this is exactly what is done by the recently proposed Generative Adversarial Networks (GANs) [14, 5, 30, 36, 47]. GANs learn a loss that tries to classify if the output image is real or fake, while simultaneously training a generative model to minimize this loss. Blurry images will not be tolerated since they look obviously fake. Because GANs learn a loss that adapts to the data, they can be applied to a multitude of tasks that traditionally would require very different kinds of loss functions.\nIn this paper, we explore GANs in the conditional setting. Just as GANs learn a generative model of data, conditional GANs (cGANs) learn a conditional generative model [14]. This makes cGANs suitable for image-to-image translation tasks, where we condition on an input image and generate a corresponding output image.\nGANs have been vigorously studied in the last two years and many of the techniques we explore in this paper have been previously proposed. Nonetheless, earlier papers have focused on specific applications, and it has remained unclear how effective image-conditional GANs can be as a general-purpose solution for image-toimage translation. Our primary contribution is to demonstrate that on a wide variety of problems, conditional GANs produce reasonable results. Our second contribution is to present a simple framework sufficient to achieve good results, and to analyze the effects of several important architectural choices. Code is available at https://github.com/phillipi/pix2pix."
    }, {
      "heading" : "1. Related work",
      "text" : "Structured losses for image modeling Image-to-image translation problems are often formulated as per-pixel clas-\nsification or regression [26, 42, 17, 23, 46]. These formulations treat the output space as “unstructured” in the sense that each output pixel is considered conditionally independent from all others given the input image. Conditional GANs instead learn a structured loss. Structured losses penalize the joint configuration of the output. A large body of literature has considered losses of this kind, with popular methods including conditional random fields [2], the SSIM metric [40], feature matching [6], nonparametric losses [24], the convolutional pseudo-prior [41], and losses based on matching covariance statistics [19]. Our conditional GAN is different in that the loss is learned, and can, in theory, penalize any possible structure that differs between output and target.\nConditional GANs We are not the first to apply GANs in the conditional setting. Previous works have conditioned GANs on discrete labels [28], text [32], and, indeed, images. The image-conditional models have tackled inpainting [29], image prediction from a normal map [39], image manipulation guided by user constraints [49], future frame prediction [27], future state prediction [48], product photo generation [43], and style transfer [25]. Each of these methods was tailored for a specific application. Our framework differs in that nothing is application-specific. This makes our setup considerably simpler than most others.\nOur method also differs from these prior works in several architectural choices for the generator and discriminator. Unlike past work, for our generator we use a “U-Net”based architecture [34], and for our discriminator we use a convolutional “PatchGAN” classifier, which only penalizes structure at the scale of image patches. A similar PatchGAN architecture was previously proposed in [25], for the purpose of capturing local style statistics. Here we show that this approach is effective on a wider range of problems, and we investigate the effect of changing the patch size."
    }, {
      "heading" : "2. Method",
      "text" : "GANs are generative models that learn a mapping from random noise vector z to output image y: G : z → y [14]. In contrast, conditional GANs learn a mapping from observed image x and random noise vector z, to y: G : {x, z} → y. The generator G is trained to produce outputs that cannot be distinguished from “real” images by an adversarially trained discrimintor, D, which is trained to do as well as possible at detecting the generator’s “fakes”. This training procedure is diagrammed in Figure 2."
    }, {
      "heading" : "2.1. Objective",
      "text" : "The objective of a conditional GAN can be expressed as\nLcGAN (G,D) =Ex,y∼pdata(x,y)[logD(x, y)]+ Ex∼pdata(x),z∼pz(z)[log(1−D(x,G(x, z))],\n(1)\nwhere G tries to minimize this objective against an adversarial D that tries to maximize it, i.e. G∗ = argminG maxD LcGAN (G,D).\nTo test the importance of conditioning the discrimintor, we also compare to an unconditional variant in which the discriminator does not observe x:\nLGAN (G,D) =Ey∼pdata(y)[logD(y)]+ Ex∼pdata(x),z∼pz(z)[log(1−D(G(x, z))].\n(2)\nPrevious approaches to conditional GANs have found it beneficial to mix the GAN objective with a more traditional loss, such as L2 distance [29]. The discriminator’s job remains unchanged, but the generator is tasked to not only fool the discriminator but also to be near the ground truth output in an L2 sense. We also explore this option, using L1 distance rather than L2 as L1 encourages less blurring:\nLL1(G) = Ex,y∼pdata(x,y),z∼pz(z)[‖y −G(x, z)‖1]. (3)\nOur final objective is\nG∗ = argmin G max D LcGAN (G,D) + λLL1(G). (4)\nWithout z, the net could still learn a mapping from x to y, but would produce deterministic outputs, and therefore fail to match any distribution other than a delta function. Past conditional GANs have acknowledged this and provided Gaussian noise z as an input to the generator, in addition to x (e.g., [39]). In initial experiments, we did not find\nthis strategy effective – the generator simply learned to ignore the noise – which is consistent with Mathieu et al. [27]. Instead, for our final models, we provide noise only in the form of dropout, applied on several layers of our generator at both training and test time. Despite the dropout noise, we observe very minor stochasticity in the output of our nets. Designing conditional GANs that produce stochastic output, and thereby capture the full entropy of the conditional distributions they model, is an important question left open by the present work."
    }, {
      "heading" : "2.2. Network architectures",
      "text" : "We adapt our generator and discriminator architectures from those in [30]. Both generator and discriminator use modules of the form convolution-BatchNorm-ReLu [18]. Details of the architecture are provided in the appendix, with key features discussed below."
    }, {
      "heading" : "2.2.1 Generator with skips",
      "text" : "A defining feature of image-to-image translation problems is that they map a high resolution input grid to a high resolution output grid. In addition, for the problems we consider, the input and output differ in surface appearance, but both are renderings of the same underlying structure. Therefore, structure in the input is roughly aligned with structure in the output. We design the generator architecture around these considerations.\nMany previous solutions [29, 39, 19, 48, 43] to problems in this area have used an encoder-decoder network [16]. In such a network, the input is passed through a series of layers that progressively downsample, until a bottleneck layer, at which point the process is reversed (Figure 3). Such a network requires that all information flow pass through all the layers, including the bottleneck. For many image translation problems, there is a great deal of low-level information shared between the input and output, and it would be\ndesirable to shuttle this information directly across the net. For example, in the case of image colorizaton, the input and output share the location of prominent edges.\nTo give the generator a means to circumvent the bottleneck for information like this, we add skip connections, following the general shape of a “U-Net” [34] (Figure 3). Specifically, we add skip connections between each layer i and layer n− i, where n is the total number of layers. Each skip connection simply concatenates all channels at layer i with those at layer n− i."
    }, {
      "heading" : "2.2.2 Markovian discriminator (PatchGAN)",
      "text" : "It is well known that the L2 loss – and L1, see Figure 4 – produces blurry results on image generation problems [22]. Although these losses fail to encourage highfrequency crispness, in many cases they nonetheless accurately capture the low frequencies. For problems where this is the case, we do not need an entirely new framework to enforce correctness at the low frequencies. L1 will already do.\nThis motivates restricting the GAN discriminator to only model high-frequency structure, relying on an L1 term to force low-frequency correctness (Eqn. 4). In order to model high-frequencies, it is sufficient to restrict our attention to the structure in local image patches. Therefore, we design a discriminator architecture – which we term a PatchGAN – that only penalizes structure at the scale of patches. This discriminator tries to classify if each N × N patch in an image is real or fake. We run this discriminator convolutationally across the image, averaging all responses to provide the ultimate output of D.\nIn Section 3.4, we demonstrate that N can be much smaller than the full size of the image and still produce high quality results. This is advantageous because a smaller PatchGAN has fewer parameters, runs faster, and can be applied on arbitrarily large images.\nSuch a discriminator effectively models the image as a Markov random field, assuming independence between pixels separated by more than a patch diameter. This connection was previously explored in [25], and is also the common assumption in models of texture [8, 12] and style [7, 15, 13, 24]. Our PatchGAN can therefore be understood as a form of texture/style loss."
    }, {
      "heading" : "2.3. Optimization and inference",
      "text" : "To optimize our networks, we follow the standard approach from [14]: we alternate between one gradient descent step on D, then one step on G. We use minibatch SGD and apply the Adam solver [20].\nAt inference time, we run the generator net in exactly the same manner as during the training phase. This differs from the usual protocol in that we apply dropout at test time,\nand we apply batch normalization [18] using the statistics of the test batch, rather than aggregated statistics of the training batch. This approach to batch normalization, when the batch size is set to 1, has been termed “instance normalization” and has been demonstrated to be effective at image generation tasks [38]. In our experiments, we use batch size 1 for certain experiments and 4 for others, noting little difference between these two conditions."
    }, {
      "heading" : "3. Experiments",
      "text" : "To explore the generality of conditional GANs, we test the method on a variety of tasks and datasets, including both graphics tasks, like photo generation, and vision tasks, like semantic segmentation:\n• Semantic labels↔photo, trained on the Cityscapes dataset [4]. • Architectural labels→photo, trained on the CMP Fa-\ncades dataset [31]. • Map↔aerial photo, trained on data scraped from\nGoogle Maps. • BW→color photos, trained on [35]. • Edges→photo, trained on data from [49] and [44]; bi-\nnary edges generated using the HED edge detector [42] plus postprocessing. • Sketch→photo: tests edges→photo models on human-\ndrawn sketches from [10]. • Day→night, trained on [21].\nDetails of training on each of these datasets are provided in the Appendix. In all cases, the input and output are simply 1-3 channel images. Qualitative results are shown in Figures 8, 9, 10, 11, 12, 14, 15, 16, and 13. Several failure cases are highlighted in Figure 17. More comprehensive results are available at https://phillipi.github.io/pix2pix/.\nData requirements and speed We note that decent results can often be obtained even on small datasets. Our facade training set consists of just 400 images (see results in Figure 12), and the day to night training set consists of only 91 unique webcams (see results in Figure 13). On datasets of this size, training can be very fast: for example, the results shown in Figure 12 took less than two hours of training on a single Pascal Titan X GPU. At test time, all models run in well under a second on this GPU."
    }, {
      "heading" : "3.1. Evaluation metrics",
      "text" : "Evaluating the quality of synthesized images is an open and difficult problem [36]. Traditional metrics such as perpixel mean-squared error do not assess joint statistics of the result, and therefore do not measure the very structure that structured losses aim to capture.\nIn order to more holistically evaluate the visual quality of our results, we employ two tactics. First, we run\n“real vs fake” perceptual studies on Amazon Mechanical Turk (AMT). For graphics problems like colorization and photo generation, plausibility to a human observer is often the ultimate goal. Therefore, we test our map generation, aerial photo generation, and image colorization using this approach.\nSecond, we measure whether or not our synthesized cityscapes are realistic enough that off-the-shelf recognition system can recognize the objects in them. This metric is similar to the “inception score” from [36], the object detection evaluation in [39], and the “semantic interpretability” measure in [46].\nAMT perceptual studies For our AMT experiments, we followed the protocol from [46]: Turkers were presented with a series of trials that pitted a “real” image against a “fake” image generated by our algorithm. On each trial, each image appeared for 1 second, after which the images disappeared and Turkers were given unlimited time to respond as to which was fake. The first 10 images of each session were practice and Turkers were given feedback. No feedback was provided on the 40 trials of the main experiment. Each session tested just one algorithm at a time, and Turkers were not allowed to complete more than one session. ∼ 50 Turkers evaluated each algorithm. All images were presented at 256 × 256 resolution. Unlike [46], we did not include vigilance trials. For our colorization experiments, the real and fake images were generated from the same grayscale input. For map↔aerial photo, the real and fake images were not generated from the same input, in order to make the task more difficult and avoid floor-level results.\nFCN-score While quantitative evaluation of generative models is known to be challenging, recent works [36, 39, 46] have tried using pre-trained semantic classifiers to measure the discriminability of the generated images as a pseudo-metric. The intuition is that if the generated images are realistic, classifiers trained on real images will be able to classify the synthesized image correctly as well. To this end, we adopt the popular FCN-8s [26] architecture for semantic segmentation, and train it on the cityscapes dataset. We then score synthesized photos by the classification accuracy against the labels these photos were synthesized from."
    }, {
      "heading" : "3.2. Analysis of the objective function",
      "text" : "Which components of the objective in Eqn. 4 are important? We run ablation studies to isolate the effect of the L1 term, the GAN term, and to compare using a discriminator conditioned on the input (cGAN, Eqn. 1) against using an unconditional discriminator (GAN, Eqn. 2).\nFigure 4 shows the qualitative effects of these variations on two labels→photo problems. L1 alone leads to reasonable but blurry results. The cGAN alone (setting λ = 0 in Eqn. 4) gives much sharper results, but results in some artifacts in facade synthesis. Adding both terms together (with λ = 100) reduces these artifacts.\nWe quantify these observations using the FCN-score on the cityscapes labels→photo task (Table 1): the GAN-based objectives achieve higher scores, indicating that the synthesized images include more recognizable structure. We also test the effect of removing conditioning from the discriminator (labeled as GAN). In this case, the loss does not penalize mismatch between the input and output; it only cares that the output look realistic. This variant results in very poor performance; examining the results reveals that the generator collapsed into producing nearly the exact same output regardless of input photograph. Clearly it is important, in this case, that the loss measure the quality of the match between input and output, and indeed cGAN performs much better than GAN. Note, however, that adding an L1 term also encourages that the output respect the input, since the L1 loss penalizes the distance between ground truth outputs, which match the input, and synthesized outputs, which may not. Correspondingly, L1+GAN is also effective at creating realistic renderings that respect the in-\nL1 1x1 16x16 70x70 256x256\nFigure 6: Patch size variations. Uncertainty in the output manifests itself differently for different loss functions. Uncertain regions become blurry and desaturated under L1. The 1x1 PixelGAN encourages greater color diversity but has no effect on spatial statistics. The 16x16 PatchGAN creates locally sharp results, but also leads to tiling artifacts beyond the scale it can observe. The 70x70 PatchGAN forces outputs that are sharp, even if incorrect, in both the spatial and spectral (coforfulness) dimensions. The full 256x256 ImageGAN produces results that are visually similar to the 70x70 PatchGAN, but somewhat lower quality according to our FCN-score metric (Table 2). Please see https://phillipi.github.io/pix2pix/ for additional examples.\nput label maps. Combining all terms, L1+cGAN, performs similarly well.\nColorfulness A striking effect of conditional GANs is that they produce sharp images, hallucinating spatial structure even where it does not exist in the input label map. One might imagine cGANs have a similar effect on “sharpening” in the spectral dimension – i.e. making images more colorful. Just as L1 will incentivize a blur when it is uncertain where exactly to locate an edge, it will also incentivize an average, grayish color when it is uncertain which of several plausible color values a pixel should take on. Specially, L1 will be minimized by choosing the median of of the conditional probability density function over possible colors. An adversarial loss, on the other hand, can in principle become aware that grayish outputs are unrealistic, and encourage matching the true color distribution [14]. In Figure 7, we investigate if our cGANs actually achieve this effect on the Cityscapes dataset. The plots show the marginal distri-\nbutions over output color values in Lab color space. The ground truth distributions are shown with a dotted line. It is apparent that L1 leads to a narrower distribution than the ground truth, confirming the hypothesis that L1 encourages average, grayish colors. Using a cGAN, on the other hand, pushes the output distribution closer to the ground truth."
    }, {
      "heading" : "3.3. Analysis of the generator architecture",
      "text" : "A U-Net architecture allows low-level information to shortcut across the network. Does this lead to better results? Figure 5 compares the U-Net against an encoder-decoder on cityscape generation U-Net. The encoder-decoder is created simply by severing the skip connections in the U-Net. The encoder-decoder is unable to learn to generate realistic images in our experiments, and indeed collapses to producing nearly identical results for each input label map. The advantages of the U-Net appear not to be specific to conditional GANs: when both U-Net and encoder-decoder are trained\n648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701\n702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755\nCVPR #385\nCVPR #385\nCVPR 2016 Submission #385. CONFIDENTIAL REVIEW COPY. DO NOT DISTRIBUTE.\n70 90 110 130 150 −11\n−9\n−7\n−5\n−3\n−1\nb\n70 90 110 130 −11\n−9\n−7\n−5\n−3\n−1\na 0 20 40 60 80 100\n−11\n−9\n−7\n−5\n−3\n−1\nL\nL1 cGAN L1+cGAN L1+pixelcGAN Ground truth\n(a)\n70 90 110 130 150 −11\n−9\n−7\n−5\n−3\n−1\nb\n70 90 110 130 −11\n−9\n−7\n−5\n−3\n−1\na 0 20 40 60 80 100\n−11\n−9\n−7\n−5\n−3\n−1\nL\nL1 cGAN L1+cGAN L1+pixelcGAN Ground truth\n(b)\n70 90 110 130 150 −11\n−9\n−7\n−5\n−3\n−1\nb\n70 90 110 130 −11\n−9\n−7\n−5\n−3\n−1\na 0 20 40 60 80 100\n−11\n−9\n−7\n−5\n−3\n−1\nL\nL1 cGAN L1+cGAN L1+pixelcGAN Ground truth\n(c)\nHistogram intersection against ground truth\nLoss L a b L1 0.81 0.69 0.70 cGAN 0.87 0.74 0.84 L1+cGAN 0.86 0.84 0.82 PixelGAN 0.83 0.68 0.78\n(d) Figure 5: Color distribution matching property of the cGAN, tested on Cityscapes. (c.f. Figure 1 of the original GAN paper [14]). Note that the histogram intersection scores are dominated by differences in the high probability region, which are imperceptible in the plots, which show log probability and therefore emphasize differences in the low probability regions.\nL1 1x1 16x16 70x70 256x256\nFigure 6: Patch size variations. Uncertainty in the output manifests itself differently for different loss functions. Uncertain regions become blurry and desaturated under L1. The 1x1 PixelGAN encourages greater color diversity but has no effect on spatial statistics. The 16x16 PatchGAN creates locally sharp results, but also leads to tiling artifacts beyond the scale it can observe. The 70x70 PatchGAN forces outputs that are sharp, even if incorrect, in both the spatial and spectral (coforfulness) dimensions. The full 256x256 ImageGAN produces results that are visually similar to the 70x70 PatchGAN, but somewhat lower quality according to our FCN-score metric (Table 2).\nClassification Ours L2 [44] (rebal.) [44] (L1 + cGAN) Ground truth\nFigure 7: Colorization results of conditional GANs versus the L2 regression from [44] and the full method (classification with rebalancing) from [46]. The cGANs can produce compelling colorizations (first two rows), but have a common failure mode of producing a grayscale or desaturated result (last row).\nTo begin to test this, we train a cGAN (with/without L1 loss) on cityscape photo!labels. Figure 8 shows qualitative results, and quantitative classification accuracies are reported in Table 4. Interestingly, cGANs, trained without the L1 loss, are able to solve this problem at a reasonable degree of accuracy. To our knowledge, this is the first demonstration of GANs successfully generating “labels”, which are\nInput Ground truth L1 cGAN\nFigure 8: Applying a conditional GAN to semantic segmentation. The cGAN produces sharp images that look at glance like the ground truth, but in fact include many small, hallucinated objects.\nnearly discrete, rather than “images”, with their continuousvalued variation. Although cGANs achieve some success, they are far from the best available method for solving this\nproblem: simply using L1 regression gets better scores than\nusing a cGAN, as shown in Table 4. We argue that for vision\nproblems, the goal (i.e. predicting output close to ground\ntruth) may be less ambiguous than graphics tasks, and re-\nconstruction losses like L1 are mostly sufficient.\n4. Conclusion\nThe results in this paper suggest that conditional adver-\nsarial networks are a promising approach for many imageto-image translation tasks, especially those involving highly structured graphical outputs. These networks learn a loss adapted to the task and data at hand, which makes them applicable in a wide variety of settings.\n7\nlo g\nP (L\n)\nlo g\nP (a\n)\nlo g\nP (b\n)\nL a b\n(a) 48 49 50 51 52 53 54 55 56 57 58 59 60\n661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701\n702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755\n#385 CVPR #385\nCVPR 2016 Submission #385. CONFIDENTIAL REVIEW COPY. DO NOT DISTRIBUTE.\n70 90 110 130 150 −11\n−9\n−7\n−5\n−3\n−1\nb\n70 90 110 130 −11\n−9\n−7\n−5\n−3\n−1\na 0 20 40 60 80 100\n− 1\n−9\n−7\n−5\n−3\n−1\nL\nL1 cGAN L1+cGAN L1+pixelcGAN Ground truth\n(a)\n70 90 110 130 150 − 1\n−9\n−7\n−5\n−3\n−1\nb\n70 90 110 130 −11\n−9\n−7\n−5\n−3\n−1\na 0 20 40 60 80 100\n−11\n−9\n−7\n−5\n−3\n−1\nL\nL1 cGAN L1+cGAN L1+pixelcGAN Ground truth\n(b)\n70 90 110 130 150 −11\n−9\n−7\n−5\n−3\n−1\nb\n70 90 110 130 −11\n−9\n−7\n−5\n−3\n−1\na 0 20 40 60 80 100\n−11\n−9\n−7\n−5\n−3\n−1\nL\nL1 cGAN L1+cGAN L1+pixelcGAN Ground truth\n(c)\nHistogram int rsection against ground truth\nLoss L a b L1 0.81 0.69 .70 cGAN 0.87 0.74 0.84 L1+cGAN 0.86 0.84 0.82 PixelGAN 0.83 0.68 0.78\n(d) Figure 5: Color distribution matching property of the cGAN, tested on Cityscapes. (c.f. Figure 1 of the original GAN aper [14]). Note that the histogram intersection scores are dominated by diff rences in the high pro ability region, which are imperceptible in the plots,\nhich show log probability and therefore emphasize differences in the low probability regions.\nL1 1x1 16x16 70x70 256x256\nFigure 6: Patch size variations. Uncertainty in the output manifests itself differently for different loss functions. Uncertain regions become blurry and desaturated under L1. The 1x1 PixelGAN encourages greater color diversity but has no effect on spatial statistics. The 16x16 PatchGAN creates locally sharp results, but also leads to tiling artifacts beyond the scale it can observe. The 70x70 PatchGAN forces outputs that are sharp, even if incorrect, in both the spatial and spectral (coforfulness) dimensions. The full 256x256 ImageGAN produces results that are visually similar to the 70x70 PatchGAN, but somewhat lower quality according to our FCN-score metric (Table 2).\nClassification Ours L2 [44] (rebal.) [44] (L1 + cGAN) Ground truth\nFigure 7: Colorization results of conditional GANs versus the L2 regression from [44] and the full method (classification with rebalancing) from [46]. The cGANs can produce compelling colorizations (first two rows), but have a common failure mode of producing a grayscale or desaturated result (last row).\nTo begin to test this, we train a cGAN (with/without L1 loss) on cityscape photo!labels. Figure 8 shows qualitative results, and quantitative classification accuracies are reported in Table 4. Interestingly, cGANs, trained without the L1 loss, are able to solve this problem at a reasonable degree of accuracy. To our knowledge, this is the first demonstration of GANs successfully generating “labels”, which are\nInput Ground truth L1 cGAN\nFigure 8: Applying a conditional GAN to semantic segmentation. The cGAN produces sharp images that look at glance like the ground truth, but in fact include many small, hallucinated objects.\nnearly discrete, rather than “images”, with their continuousvalued variation. Although cGANs achieve some success, they are far from the best available method for solving this\nproblem: simply using L1 regression gets better scores than\nusing a cGAN, as shown in Table 4. We argue that for vision\nproblems, the goal (i.e. predicting output close to ground\ntruth) may be less ambiguous than graphics tasks, and re-\nconstruction losses like L1 are mostly sufficient.\n4. Conclusion\nThe results in this paper suggest that conditional adversarial networks are a promising approach for many imageto-image translation tasks, especially those involving highly structured graphical outputs. These networks learn a loss adapted to the task and data at hand, which makes them ap-\nplicable in a wide variety of settings.\n7\nlo g\nP (L\n)\nlo g\nP (a\n)\nlo g\nP (b\n)\nL a b\n(b) 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 6 8 699 700 701\n702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755\nCVPR #385\nCVPR #385\nCVPR 2016 Sub ission #385. CONFIDENTIAL REVIE COPY. DO NOT DISTRIBUTE.\n70 90 110 130 150 −11\n−9\n−7\n−5\n−3\n−1\nb\n70 90 110 130 −11\n−9\n−7\n−5\n−3\n−1\na 0 20 40 60 80 100\n−11\n−9\n−7\n−5\n−3\n−1\nL\nL1 cGAN L1+cGAN L1+pixelcGAN Ground truth\n(a)\n70 90 110 130 150 −11\n−9\n−7\n−5\n−3\n−1\nb\n70 90 110 130 −11\n−9\n−7\n−5\n−3\n−1\na 0 20 40 60 80 100\n−11\n−9\n−7\n−5\n−3\n−1\nL\nL1 cGAN L1+cGAN L1+pixelcGAN Ground truth\n(b)\n70 90 110 130 150 −11\n−9\n−7\n−5\n−3\n−1\nb\n70 90 110 130 −11\n−9\n−7\n−5\n−3\n−1\na 0 20 40 60 80 100\n−11\n−9\n−7\n−5\n−3\n−1\nL\nL1 cGAN L1+cGAN L1+pixelcGAN Ground truth\n(c)\nHistogram intersection against ground truth\nLoss L a b L1 0.81 0.69 0.70 cGAN 0.87 0.74 0.84 L1+cGAN 0.86 0.84 0.82 PixelGAN 0.83 0.68 0.78\n(d) Figure 5: Color distribution matching property of the cGAN, tested on Cityscapes. (c.f. Figure 1 of the original GAN paper [14]). Note that the histogram intersection scores are dominated by differences in the high probability region, which are imperceptible in the plots, which show log probability and therefore emphasize differences in the low probability regions.\nL1 1x1 16x16 70x70 256x256\nFigure 6: Patch size variations. Uncertainty in the output manifests itself differently for different loss functions. Uncertain regions become blurry and desaturated under L1. The 1x1 PixelGAN encourages greater color diversity but has no effect on spatial statistics. The 16x16 PatchGAN creates locally sharp results, but also leads to tiling artifacts beyond the scale it can observe. The 70x70 PatchGAN forces outputs that are sharp, even if incorrect, in both the spatial and spectral (coforfulness) dimensions. The full 256x256 ImageGAN produces results that are visually similar to the 70x70 PatchGAN, but somewhat lower quality according to our FCN-score metric (Table 2).\nClassification Ours L2 [44] (rebal.) [44] (L1 + cGAN) Ground truth\nFigure 7: C lorizatio results of conditional GANs versus the L2 regression from [44] and the full method (classification with rebal ncing) from [46]. The cGANs can produce compelling colorizat ons (first two rows), but hav a common failure mode of producing a grayscale or desaturated result (last row).\nT begin to t st this, we train a cGAN (with/without L1 loss) on cityscape pho o!labels. F gure 8 show qualitative results, and quantitative classification accuracies are reported in T l 4. Interestingly, cGANs, trained without the L1 loss, are able to solve this problem at a reasonable degree of accuracy. To our knowledge, this is the first demonstration of GANs successfully generating “labels”, which are\nInput Ground truth L1 cGAN\nFigure 8: Applying a conditional GAN to semantic segmentation. The cGAN produces sharp images that look at glance like the ground truth, but in fact include many small, hallucinated objects.\nnearly discrete, rather than “images”, with their continuousvalued variation. Although cGANs achieve some success,\nthey are far from the best available method for solving this\nproblem: simply using L1 regression gets better scores than\nusing a cGAN, as shown in Table 4. We argue that for vision\nproblems, th goal (i.e. predicting output clo e to ground\ntruth) may be less ambiguous than graphics tasks, and re-\nconstruction losses like L1 are mostly sufficient.\n4. Conclusion\nThe results in this paper suggest t at conditional adversarial networks are a promising approach f r many imageto-image tr nslation task , especially th se involving highly structured gr phical outputs. These network learn a loss\nadapted to the task and data at hand, which makes them ap-\nplicable in a wide variety of settings.\n7\nlo g\nP (L\n)\nlo g\nP (a\n)\nlo g\nP (b\n)\nL a b\n(c)\nHistogram intersection against ground truth\nLoss L a b L1 0.81 0.69 0.70 cGAN 0.87 0.74 0.84 L1+cGAN 0.86 0.84 0.82 PixelGAN 0.83 0.68 0.78\n(d)\nFigure 7: Color distribution matching property of the cGAN, tested on Cityscapes. (c.f. Figure 1 of the original GAN paper [14]). Note that the histogram intersection scores are dominated by differences in the high probability region, which are imperceptible in the plots, which show log probability and therefore emphasize differences in the low probability regions.\nwith an L1 loss, the U-Net again achieves the superior results (Figure 5)."
    }, {
      "heading" : "3.4. From PixelGANs to PatchGans to Imag GANs",
      "text" : "We test e effect of varying the patch size N of our discriminator recepti e fields, from a 1 × 1 “Pixel ” to a full 256 × 256 “ImageGAN”1. Figure 6 shows qualitative results of this analysis and Table 2 quantifies the effects using the FCN-score. Note that elsewhere in this paper, unless specified, all experiments use 70× 70 PatchGANs, and for this section all experiments use an L1+cGAN loss.\nThe PixelGAN has no effect on spatial sharpness, but does increase the colorfulness of the results (quantified in Figure 7). For example, the bus in Figure 6 is painted gray when the net is trained with an L1 loss, but becomes red with the PixelGAN loss. Color histogram matching is a common problem in image processing [33], and PixelGANs may be a promising lightweight solution.\nUsing a 16×16 PatchGAN is sufficient to promote sharp outputs, but also leads to tiling artifacts. The 70×70 PatchGAN alleviates these artifacts. Scaling beyond this, to the full 256× 256 ImageGAN, does not appear to improve the visual quality of the results, and in fact gets a considerably lower FCN-score (Table 2). This may be because the ImageGAN has many more parameters and greater depth than the 70× 70 PatchGAN, and may be harder to train.\nFully- volutional translation An advantage of the PatchGAN is that a fixed-size patch discriminator can be applied to arbitrarily large images. We may also apply the generator convolutionally, on larger images than those on which it was trained. We test this on the map↔aerial photo task. After training a generator on 256×256 images, we test it on 512×512 images. The results in Figure 8 demonstrate the effectiveness of this approach.\n1We achieve this variation in patch size by adjusting th depth of the GAN discriminator. Details of this process, and the discriminator architectures are provided in the appendix\nClassification Ours L2 [46] (rebal.) [46] (L1 + cGAN) Ground truth\nFigure 9: Colorization results of conditional GANs versus the L2 regression from [46] and the full method (classification with rebalancing) from [48]. The cGANs can produce compelling colorizations (first two rows), but have a common failure mode of producing a grayscale or desaturated result (last row).\nPhoto→Map Map→ Photo Loss % Turkers labeled real % Turkers labeled real L1 2.8% ± 1.0% 0.8% ± 0.3% L1+cGAN 6.1% ± 1.3% 18.9% ± 2.5%\nTable 3: AMT “real vs fake” test on m ps↔aerial photos.\nMeth d % Turkers labeled real L2 regression from [46] 16.3% ± 2.4% Zhang et al. 2016 [46] 27.8% ± 2.7% Ours 22.5% ± 1.6%\nTable 4: AMT “real vs fake” test on colorization."
    }, {
      "heading" : "3.5. Perceptual validation",
      "text" : "We validate the perceptual realism of our results on the tasks of map↔aerial photograph and grayscale→color. Results of our AMT experiment for map↔photo are given in Table 3. The aerial photos generated by our method fooled participants on 18.9% of trials, significantly above the L1 baseline, which produces blurry results and nearly never fooled participants. In contrast, in the photo→map directionm our method only fooled participants on 6.1% of trials, and this was not significantly different than the performance of the L1 baseline (based on bootstrap test). This may be because minor structural errors are more visible in maps, which have rigid geometry, than in aerial photographs, which are more chaotic.\nWe trained colorization on ImageNet [35], and tested on the test split introduced by [46, 23]. Our method, with L1+cGAN loss, fooled participants on 22.5% of trials (Table 4). We also tested the results of [46] and a variant of their method that used an L2 loss (see [46] for details). The conditional GAN scored similarly to the L2 variant of [46] (difference insignificant by bootstrap test), but fell short of [46]’s full method, which fooled participants on 27.8% of trials in our experiment. We note that their method was specifically engineered to do well on colorization."
    }, {
      "heading" : "3.6. Semantic segmentation",
      "text" : "Conditional GANs appear to be effective on problems where the output is highly detailed or photographic, as is common in image processing and graphics tasks. What about vision problems, like semantic segmentation, where the output is instead less complex than the input?\nTo begin to test this, we train a cGAN (with/without L1 loss) on cityscape photo→labels. Figure 10 shows qualitative results, and quantitative classification accuracies are reported in Table 5. Interestingly, cGANs, trained without the L1 loss, are able to solve this problem at a reasonable degree of accuracy. To our knowledge, this is the first demonstration of GANs successfully generating “labels”, which are nearly discrete, rather than “images”, with their continuousvalued variation2. Although cGANs achieve some success, they are far from the best available method for solving this problem: simply using L1 regression gets better scores than using a cGAN, as shown in Table 5. We argue that for vision problems, the goal (i.e. predicting output close to ground truth) may be less ambiguous than graphics tasks, and reconstruction losses like L1 are mostly sufficient."
    }, {
      "heading" : "4. Conclusion",
      "text" : "The results in this paper suggest that conditional adversarial networks are a promising approach for many imageto-image translation tasks, especially those involving highly structured graphical outputs. These networks learn a loss adapted to the task and data at hand, which makes them applicable in a wide variety of settings.\nAcknowledgments: We thank Richard Zhang and Deepak Pathak for helpful discussions. This work was supported in part by NSF SMA1514512, NGA NURI, IARPA via Air Force Research Laboratory, Intel Corp, and hardware donations by nVIDIA. Disclaimer: The views and conclusions contained herein are those of the authors and should not be interpreted as necessarily representing the official policies or endorsements, either expressed or implied, of IARPA, AFRL or the U.S. Government.\n2Note that the label maps we train on are not exactly discrete valued, as they are resized from the original maps using bilinear interpolation and saved as jpeg images, with some compression artifacts."
    }, {
      "heading" : "5. Appendix",
      "text" : ""
    }, {
      "heading" : "5.1. Network architectures",
      "text" : "We adapt our network architectures from those in [30]. Code for the models is available at https://github.com/phillipi/pix2pix.\nLet Ck denote a Convolution-BatchNorm-ReLU layer with k filters. CDk denotes a a Convolution-BatchNormDropout-ReLU layer with a dropout rate of 50%. All convolutions are 4× 4 spatial filters applied with stride 2. Convolutions in the encoder, and in the discriminator, downsample by a factor of 2, whereas in the decoder they upsample by a factor of 2."
    }, {
      "heading" : "5.1.1 Generator architectures",
      "text" : "The encoder-decoder architecture consists of: encoder: C64-C128-C256-C512-C512-C512-C512-C512 decoder: CD512-CD512-CD512-C512-C512-C256-C128 -C64\nAfter the last layer in the decoder, a convolution is applied to map to the number of output channels (3 in general, except in colorization, where it is 2), followed by a Tanh function. As an exception to the above notation, BatchNorm is not applied to the first C64 layer in the encoder. All ReLUs in the encoder are leaky, with slope 0.2, while ReLUs in the decoder are not leaky.\nThe U-Net architecture is identical except with skip connections between each layer i in the encoder and layer n− i in the decoder, where n is the total number of layers. The skip connections concatenate activations from layer i to layer n − i. This changes the number of channels in the decoder:\nU-Net decoder: CD512-CD1024-CD1024-C1024-C1024-C512 -C256-C128"
    }, {
      "heading" : "5.1.2 Discriminator architectures",
      "text" : "The 70× 70 discriminator architecture is: C64-C128-C256-C512\nAfter the last layer, a convolution is applied to map to a 1 dimensional output, followed by a Sigmoid function. As an exception to the above notation, BatchNorm is not applied to the first C64 layer. All ReLUs are leaky, with slope 0.2.\nAll other discriminators follow the same basic architecture, with depth varied to modify the receptive field size:\n1× 1 discriminator: C64-C128 (note, in this special case, all convolutions are 1× 1 spatial filters) 16× 16 discriminator: C64-C128\n256× 256 discriminator: C64-C128-C256-C512-C512-C512\nNote the the 256×256 discriminator has receptive fields that could cover up to 574 × 574 pixels, if they were available, but since the input images are only 256 × 256 pixels, only 256×256 pixels are seen, and so we refer to this setting as the 256× 256 discriminator."
    }, {
      "heading" : "5.2. Training details",
      "text" : "Random jitter was applied by resizing the 256×256 input images to 286 × 286 and then randomly cropping back to size 256× 256.\nAll networks were trained from scratch. Weights were initialized from a Gaussian distribution with mean 0 and standard deviation 0.02.\nSemantic labels→photo 2975 training images from the Cityscapes training set [4], trained for 200 epochs, batch size 1, with random jitter and mirroring. We used the Cityscapes val set for testing.\nArchitectural labels→photo 400 training images from [31], trained for 200 epochs, batch size 1, with random jitter and mirroring. Data from was split into train and test randomly.\nMaps↔aerial photograph 1096 training images scraped from Google Maps, trained for 200 epochs, batch size 1, with random jitter and mirroring. Images were sampled from in and around New York City. Data was then split into train and test about the median latitude of the sampling region (with a buffer region added to ensure that no training pixel appeared in the test set).\nBW→color 1.2 million training images (Imagenet training set [35]), trained for∼ 6 epochs, batch size 4, with only mirroring, no random jitter. Tested on subset of Imagenet val set, following protocol of [46] and [23].\nEdges→shoes 50k training images from UT Zappos50K dataset [45] trained for 15 epochs, batch size 4. Data from was split into train and test randomly.\nEdges→Handbag 137K Amazon Handbag images from [49], trained for 15 epochs, batch size 4. Data from was split into train and test randomly.\nDay→night 17823 training images extracted from 91 webcams, from [21] trained for 17 epochs, batch size 4, with random jitter and mirroring. We use 91 webcams as training, and 10 webcams for test."
    } ],
    "references" : [ {
      "title" : "A non-local algorithm for image denoising",
      "author" : [ "A. Buades", "B. Coll", "J.-M. Morel" ],
      "venue" : "In CVPR,",
      "citeRegEx" : "1",
      "shortCiteRegEx" : "1",
      "year" : 2005
    }, {
      "title" : "Semantic image segmentation with deep convolutional nets and fully connected crfs",
      "author" : [ "L.-C. Chen", "G. Papandreou", "I. Kokkinos", "K. Murphy", "A.L. Yuille" ],
      "venue" : "In ICLR,",
      "citeRegEx" : "2",
      "shortCiteRegEx" : "2",
      "year" : 2015
    }, {
      "title" : "Sketch2photo: internet image montage",
      "author" : [ "T. Chen", "M.-M. Cheng", "P. Tan", "A. Shamir", "S.-M. Hu" ],
      "venue" : "ACM Transactions on Graphics (TOG),",
      "citeRegEx" : "3",
      "shortCiteRegEx" : "3",
      "year" : 2009
    }, {
      "title" : "The cityscapes dataset for semantic urban scene understanding",
      "author" : [ "M. Cordts", "M. Omran", "S. Ramos", "T. Rehfeld", "M. Enzweiler", "R. Benenson", "U. Franke", "S. Roth", "B. Schiele" ],
      "venue" : "In CVPR),",
      "citeRegEx" : "4",
      "shortCiteRegEx" : "4",
      "year" : 2016
    }, {
      "title" : "Deep generative image models using a laplacian pyramid of adversarial networks",
      "author" : [ "E.L. Denton", "S. Chintala", "R. Fergus" ],
      "venue" : "In NIPS,",
      "citeRegEx" : "5",
      "shortCiteRegEx" : "5",
      "year" : 2015
    }, {
      "title" : "Generating images with perceptual similarity metrics based on deep networks",
      "author" : [ "A. Dosovitskiy", "T. Brox" ],
      "venue" : "arXiv preprint arXiv:1602.02644,",
      "citeRegEx" : "6",
      "shortCiteRegEx" : "6",
      "year" : 2016
    }, {
      "title" : "Image quilting for texture synthesis and transfer",
      "author" : [ "A.A. Efros", "W.T. Freeman" ],
      "venue" : "In SIGGRAPH,",
      "citeRegEx" : "7",
      "shortCiteRegEx" : "7",
      "year" : 2001
    }, {
      "title" : "Texture synthesis by nonparametric sampling",
      "author" : [ "A.A. Efros", "T.K. Leung" ],
      "venue" : "In ICCV,",
      "citeRegEx" : "8",
      "shortCiteRegEx" : "8",
      "year" : 1999
    }, {
      "title" : "Predicting depth, surface normals and semantic labels with a common multi-scale convolutional architecture",
      "author" : [ "D. Eigen", "R. Fergus" ],
      "venue" : "In Proceedings of the IEEE International Conference on Computer Vision,",
      "citeRegEx" : "9",
      "shortCiteRegEx" : "9",
      "year" : 2015
    }, {
      "title" : "How do humans sketch objects",
      "author" : [ "M. Eitz", "J. Hays", "M. Alexa" ],
      "venue" : null,
      "citeRegEx" : "10",
      "shortCiteRegEx" : "10",
      "year" : 2012
    }, {
      "title" : "Removing camera shake from a single photograph",
      "author" : [ "R. Fergus", "B. Singh", "A. Hertzmann", "S.T. Roweis", "W.T. Freeman" ],
      "venue" : "In ACM Transactions on Graphics (TOG),",
      "citeRegEx" : "11",
      "shortCiteRegEx" : "11",
      "year" : 2006
    }, {
      "title" : "Texture synthesis and the controlled generation of natural stimuli using convolutional neural networks",
      "author" : [ "L.A. Gatys", "A.S. Ecker", "M. Bethge" ],
      "venue" : "arXiv preprint arXiv:1505.07376,",
      "citeRegEx" : "12",
      "shortCiteRegEx" : "12",
      "year" : 2015
    }, {
      "title" : "Image style transfer using convolutional neural networks. CVPR, 2016",
      "author" : [ "L.A. Gatys", "A.S. Ecker", "M. Bethge" ],
      "venue" : null,
      "citeRegEx" : "13",
      "shortCiteRegEx" : "13",
      "year" : 2016
    }, {
      "title" : "Generative adversarial nets",
      "author" : [ "I. Goodfellow", "J. Pouget-Abadie", "M. Mirza", "B. Xu", "D. Warde-Farley", "S. Ozair", "A. Courville", "Y. Bengio" ],
      "venue" : "In NIPS,",
      "citeRegEx" : "14",
      "shortCiteRegEx" : "14",
      "year" : 2014
    }, {
      "title" : "Image analogies",
      "author" : [ "A. Hertzmann", "C.E. Jacobs", "N. Oliver", "B. Curless", "D.H. Salesin" ],
      "venue" : "In SIGGRAPH,",
      "citeRegEx" : "15",
      "shortCiteRegEx" : "15",
      "year" : 2001
    }, {
      "title" : "Reducing the dimensionality of data with neural networks",
      "author" : [ "G.E. Hinton", "R.R. Salakhutdinov" ],
      "venue" : "Science, 313(5786):504–507,",
      "citeRegEx" : "16",
      "shortCiteRegEx" : "16",
      "year" : 2006
    }, {
      "title" : "Let there be Color!: Joint End-to-end Learning of Global and Local Image Priors for Automatic Image Colorization with Simultaneous Classification",
      "author" : [ "S. Iizuka", "E. Simo-Serra", "H. Ishikawa" ],
      "venue" : "ACM Transactions on Graphics (TOG),",
      "citeRegEx" : "17",
      "shortCiteRegEx" : "17",
      "year" : 2016
    }, {
      "title" : "Batch normalization: Accelerating deep network training by reducing internal covariate shift",
      "author" : [ "S. Ioffe", "C. Szegedy" ],
      "venue" : null,
      "citeRegEx" : "18",
      "shortCiteRegEx" : "18",
      "year" : 2015
    }, {
      "title" : "Perceptual losses for real-time style transfer and super-resolution",
      "author" : [ "J. Johnson", "A. Alahi", "L. Fei-Fei" ],
      "venue" : null,
      "citeRegEx" : "19",
      "shortCiteRegEx" : "19",
      "year" : 2016
    }, {
      "title" : "Adam: A method for stochastic optimization",
      "author" : [ "D. Kingma", "J. Ba" ],
      "venue" : "ICLR,",
      "citeRegEx" : "20",
      "shortCiteRegEx" : "20",
      "year" : 2015
    }, {
      "title" : "Transient attributes for high-level understanding and editing of outdoor scenes",
      "author" : [ "P.-Y. Laffont", "Z. Ren", "X. Tao", "C. Qian", "J. Hays" ],
      "venue" : "ACM Transactions on Graphics (TOG),",
      "citeRegEx" : "21",
      "shortCiteRegEx" : "21",
      "year" : 2014
    }, {
      "title" : "Autoencoding beyond pixels using a learned similarity metric",
      "author" : [ "A.B.L. Larsen", "S.K. Sønderby", "O. Winther" ],
      "venue" : "arXiv preprint arXiv:1512.09300,",
      "citeRegEx" : "22",
      "shortCiteRegEx" : "22",
      "year" : 2015
    }, {
      "title" : "Learning representations for automatic colorization",
      "author" : [ "G. Larsson", "M. Maire", "G. Shakhnarovich" ],
      "venue" : "ECCV, 2016",
      "citeRegEx" : "23",
      "shortCiteRegEx" : "23",
      "year" : 2016
    }, {
      "title" : "Combining markov random fields and convolutional neural networks for image synthesis",
      "author" : [ "C. Li", "M. Wand" ],
      "venue" : "CVPR, 2016",
      "citeRegEx" : "24",
      "shortCiteRegEx" : "24",
      "year" : 2016
    }, {
      "title" : "Precomputed real-time texture synthesis with markovian generative adversarial networks",
      "author" : [ "C. Li", "M. Wand" ],
      "venue" : "ECCV, 2016",
      "citeRegEx" : "25",
      "shortCiteRegEx" : "25",
      "year" : 2016
    }, {
      "title" : "Fully convolutional networks for semantic segmentation",
      "author" : [ "J. Long", "E. Shelhamer", "T. Darrell" ],
      "venue" : "In CVPR,",
      "citeRegEx" : "26",
      "shortCiteRegEx" : "26",
      "year" : 2015
    }, {
      "title" : "Deep multi-scale video prediction beyond mean square error",
      "author" : [ "M. Mathieu", "C. Couprie", "Y. LeCun" ],
      "venue" : "ICLR, 2016",
      "citeRegEx" : "27",
      "shortCiteRegEx" : "27",
      "year" : 2016
    }, {
      "title" : "Conditional generative adversarial nets",
      "author" : [ "M. Mirza", "S. Osindero" ],
      "venue" : "arXiv preprint arXiv:1411.1784,",
      "citeRegEx" : "28",
      "shortCiteRegEx" : "28",
      "year" : 2014
    }, {
      "title" : "Context encoders: Feature learning by inpainting",
      "author" : [ "D. Pathak", "P. Krahenbuhl", "J. Donahue", "T. Darrell", "A.A. Efros" ],
      "venue" : "CVPR, 2016",
      "citeRegEx" : "29",
      "shortCiteRegEx" : "29",
      "year" : 2016
    }, {
      "title" : "Unsupervised representation learning with deep convolutional generative adversarial networks",
      "author" : [ "A. Radford", "L. Metz", "S. Chintala" ],
      "venue" : "arXiv preprint arXiv:1511.06434,",
      "citeRegEx" : "30",
      "shortCiteRegEx" : "30",
      "year" : 2015
    }, {
      "title" : "Radim Tyleček. Spatial pattern templates for recognition of objects with regular structure",
      "author" : [ "Š. R" ],
      "venue" : "In Proc. GCPR, Saarbrucken, Germany,",
      "citeRegEx" : "31",
      "shortCiteRegEx" : "31",
      "year" : 2013
    }, {
      "title" : "Generative adversarial text to image synthesis",
      "author" : [ "S. Reed", "Z. Akata", "X. Yan", "L. Logeswaran", "B. Schiele", "H. Lee" ],
      "venue" : "arXiv preprint arXiv:1605.05396,",
      "citeRegEx" : "32",
      "shortCiteRegEx" : "32",
      "year" : 2016
    }, {
      "title" : "Color transfer between images",
      "author" : [ "E. Reinhard", "M. Ashikhmin", "B. Gooch", "P. Shirley" ],
      "venue" : "IEEE Computer Graphics and Applications,",
      "citeRegEx" : "33",
      "shortCiteRegEx" : "33",
      "year" : 2001
    }, {
      "title" : "U-net: Convolutional networks for biomedical image segmentation",
      "author" : [ "O. Ronneberger", "P. Fischer", "T. Brox" ],
      "venue" : "In MIC- CAI,",
      "citeRegEx" : "34",
      "shortCiteRegEx" : "34",
      "year" : 2015
    }, {
      "title" : "Imagenet large scale visual recognition",
      "author" : [ "O. Russakovsky", "J. Deng", "H. Su", "J. Krause", "S. Satheesh", "S. Ma", "Z. Huang", "A. Karpathy", "A. Khosla", "M. Bernstein" ],
      "venue" : "challenge. IJCV,",
      "citeRegEx" : "35",
      "shortCiteRegEx" : "35",
      "year" : 2015
    }, {
      "title" : "Improved techniques for training gans",
      "author" : [ "T. Salimans", "I. Goodfellow", "W. Zaremba", "V. Cheung", "A. Radford", "X. Chen" ],
      "venue" : "arXiv preprint arXiv:1606.03498,",
      "citeRegEx" : "36",
      "shortCiteRegEx" : "36",
      "year" : 2016
    }, {
      "title" : "Data-driven hallucination of different times of day from a single outdoor photo",
      "author" : [ "Y. Shih", "S. Paris", "F. Durand", "W.T. Freeman" ],
      "venue" : "ACM Transactions on Graphics (TOG),",
      "citeRegEx" : "37",
      "shortCiteRegEx" : "37",
      "year" : 2013
    }, {
      "title" : "Instance normalization: The missing ingredient for fast stylization",
      "author" : [ "D. Ulyanov", "A. Vedaldi", "V. Lempitsky" ],
      "venue" : "arXiv preprint arXiv:1607.08022,",
      "citeRegEx" : "38",
      "shortCiteRegEx" : "38",
      "year" : 2016
    }, {
      "title" : "Generative image modeling using style and structure adversarial networks",
      "author" : [ "X. Wang", "A. Gupta" ],
      "venue" : "ECCV, 2016",
      "citeRegEx" : "39",
      "shortCiteRegEx" : "39",
      "year" : 2016
    }, {
      "title" : "Image quality assessment: from error visibility to structural similarity",
      "author" : [ "Z. Wang", "A.C. Bovik", "H.R. Sheikh", "E.P. Simoncelli" ],
      "venue" : "IEEE Transactions on Image Processing,",
      "citeRegEx" : "40",
      "shortCiteRegEx" : "40",
      "year" : 2004
    }, {
      "title" : "Top-down learning for structured labeling with convolutional pseudoprior",
      "author" : [ "S. Xie", "X. Huang", "Z. Tu" ],
      "venue" : null,
      "citeRegEx" : "41",
      "shortCiteRegEx" : "41",
      "year" : 2015
    }, {
      "title" : "Holistically-nested edge detection",
      "author" : [ "S. Xie", "Z. Tu" ],
      "venue" : "In ICCV,",
      "citeRegEx" : "42",
      "shortCiteRegEx" : "42",
      "year" : 2015
    }, {
      "title" : "Pixellevel domain transfer",
      "author" : [ "D. Yoo", "N. Kim", "S. Park", "A.S. Paek", "I.S. Kweon" ],
      "venue" : "ECCV, 2016",
      "citeRegEx" : "43",
      "shortCiteRegEx" : "43",
      "year" : 2016
    }, {
      "title" : "Fine-Grained Visual Comparisons with Local Learning",
      "author" : [ "A. Yu", "K. Grauman" ],
      "venue" : "In CVPR,",
      "citeRegEx" : "44",
      "shortCiteRegEx" : "44",
      "year" : 2014
    }, {
      "title" : "Fine-grained visual comparisons with local learning",
      "author" : [ "A. Yu", "K. Grauman" ],
      "venue" : "In CVPR, pages 192–199,",
      "citeRegEx" : "45",
      "shortCiteRegEx" : "45",
      "year" : 2014
    }, {
      "title" : "Colorful image colorization",
      "author" : [ "R. Zhang", "P. Isola", "A.A. Efros" ],
      "venue" : "ECCV, 2016",
      "citeRegEx" : "46",
      "shortCiteRegEx" : "46",
      "year" : 2016
    }, {
      "title" : "Energy-based generative adversarial network",
      "author" : [ "J. Zhao", "M. Mathieu", "Y. LeCun" ],
      "venue" : "arXiv preprint arXiv:1609.03126,",
      "citeRegEx" : "47",
      "shortCiteRegEx" : "47",
      "year" : 2016
    }, {
      "title" : "Learning temporal transformations from time-lapse videos",
      "author" : [ "Y. Zhou", "T.L. Berg" ],
      "venue" : "In ECCV, 2016",
      "citeRegEx" : "48",
      "shortCiteRegEx" : "48",
      "year" : 2016
    }, {
      "title" : "Generative visual manipulation on the natural image manifold",
      "author" : [ "J.-Y. Zhu", "P. Krähenbühl", "E. Shechtman", "A.A. Efros" ],
      "venue" : "In ECCV, 2016",
      "citeRegEx" : "49",
      "shortCiteRegEx" : "49",
      "year" : 2016
    } ],
    "referenceMentions" : [ {
      "referenceID" : 6,
      "context" : ", [7, 15, 11, 1, 3, 37, 21, 26, 9, 42, 46]), despite the fact that the setting is always the same: predict pixels from pixels.",
      "startOffset" : 2,
      "endOffset" : 42
    }, {
      "referenceID" : 14,
      "context" : ", [7, 15, 11, 1, 3, 37, 21, 26, 9, 42, 46]), despite the fact that the setting is always the same: predict pixels from pixels.",
      "startOffset" : 2,
      "endOffset" : 42
    }, {
      "referenceID" : 10,
      "context" : ", [7, 15, 11, 1, 3, 37, 21, 26, 9, 42, 46]), despite the fact that the setting is always the same: predict pixels from pixels.",
      "startOffset" : 2,
      "endOffset" : 42
    }, {
      "referenceID" : 0,
      "context" : ", [7, 15, 11, 1, 3, 37, 21, 26, 9, 42, 46]), despite the fact that the setting is always the same: predict pixels from pixels.",
      "startOffset" : 2,
      "endOffset" : 42
    }, {
      "referenceID" : 2,
      "context" : ", [7, 15, 11, 1, 3, 37, 21, 26, 9, 42, 46]), despite the fact that the setting is always the same: predict pixels from pixels.",
      "startOffset" : 2,
      "endOffset" : 42
    }, {
      "referenceID" : 36,
      "context" : ", [7, 15, 11, 1, 3, 37, 21, 26, 9, 42, 46]), despite the fact that the setting is always the same: predict pixels from pixels.",
      "startOffset" : 2,
      "endOffset" : 42
    }, {
      "referenceID" : 20,
      "context" : ", [7, 15, 11, 1, 3, 37, 21, 26, 9, 42, 46]), despite the fact that the setting is always the same: predict pixels from pixels.",
      "startOffset" : 2,
      "endOffset" : 42
    }, {
      "referenceID" : 25,
      "context" : ", [7, 15, 11, 1, 3, 37, 21, 26, 9, 42, 46]), despite the fact that the setting is always the same: predict pixels from pixels.",
      "startOffset" : 2,
      "endOffset" : 42
    }, {
      "referenceID" : 8,
      "context" : ", [7, 15, 11, 1, 3, 37, 21, 26, 9, 42, 46]), despite the fact that the setting is always the same: predict pixels from pixels.",
      "startOffset" : 2,
      "endOffset" : 42
    }, {
      "referenceID" : 41,
      "context" : ", [7, 15, 11, 1, 3, 37, 21, 26, 9, 42, 46]), despite the fact that the setting is always the same: predict pixels from pixels.",
      "startOffset" : 2,
      "endOffset" : 42
    }, {
      "referenceID" : 45,
      "context" : ", [7, 15, 11, 1, 3, 37, 21, 26, 9, 42, 46]), despite the fact that the setting is always the same: predict pixels from pixels.",
      "startOffset" : 2,
      "endOffset" : 42
    }, {
      "referenceID" : 28,
      "context" : "But, just like Midas, we must be careful what we wish for! If we take a naive approach, and ask the CNN to minimize Euclidean distance between predicted and ground truth pixels, it will tend to produce blurry results [29, 46].",
      "startOffset" : 217,
      "endOffset" : 225
    }, {
      "referenceID" : 45,
      "context" : "But, just like Midas, we must be careful what we wish for! If we take a naive approach, and ask the CNN to minimize Euclidean distance between predicted and ground truth pixels, it will tend to produce blurry results [29, 46].",
      "startOffset" : 217,
      "endOffset" : 225
    }, {
      "referenceID" : 13,
      "context" : "Fortunately, this is exactly what is done by the recently proposed Generative Adversarial Networks (GANs) [14, 5, 30, 36, 47].",
      "startOffset" : 106,
      "endOffset" : 125
    }, {
      "referenceID" : 4,
      "context" : "Fortunately, this is exactly what is done by the recently proposed Generative Adversarial Networks (GANs) [14, 5, 30, 36, 47].",
      "startOffset" : 106,
      "endOffset" : 125
    }, {
      "referenceID" : 29,
      "context" : "Fortunately, this is exactly what is done by the recently proposed Generative Adversarial Networks (GANs) [14, 5, 30, 36, 47].",
      "startOffset" : 106,
      "endOffset" : 125
    }, {
      "referenceID" : 35,
      "context" : "Fortunately, this is exactly what is done by the recently proposed Generative Adversarial Networks (GANs) [14, 5, 30, 36, 47].",
      "startOffset" : 106,
      "endOffset" : 125
    }, {
      "referenceID" : 46,
      "context" : "Fortunately, this is exactly what is done by the recently proposed Generative Adversarial Networks (GANs) [14, 5, 30, 36, 47].",
      "startOffset" : 106,
      "endOffset" : 125
    }, {
      "referenceID" : 13,
      "context" : "Just as GANs learn a generative model of data, conditional GANs (cGANs) learn a conditional generative model [14].",
      "startOffset" : 109,
      "endOffset" : 113
    }, {
      "referenceID" : 25,
      "context" : "Structured losses for image modeling Image-to-image translation problems are often formulated as per-pixel classification or regression [26, 42, 17, 23, 46].",
      "startOffset" : 136,
      "endOffset" : 156
    }, {
      "referenceID" : 41,
      "context" : "Structured losses for image modeling Image-to-image translation problems are often formulated as per-pixel classification or regression [26, 42, 17, 23, 46].",
      "startOffset" : 136,
      "endOffset" : 156
    }, {
      "referenceID" : 16,
      "context" : "Structured losses for image modeling Image-to-image translation problems are often formulated as per-pixel classification or regression [26, 42, 17, 23, 46].",
      "startOffset" : 136,
      "endOffset" : 156
    }, {
      "referenceID" : 22,
      "context" : "Structured losses for image modeling Image-to-image translation problems are often formulated as per-pixel classification or regression [26, 42, 17, 23, 46].",
      "startOffset" : 136,
      "endOffset" : 156
    }, {
      "referenceID" : 45,
      "context" : "Structured losses for image modeling Image-to-image translation problems are often formulated as per-pixel classification or regression [26, 42, 17, 23, 46].",
      "startOffset" : 136,
      "endOffset" : 156
    }, {
      "referenceID" : 1,
      "context" : "A large body of literature has considered losses of this kind, with popular methods including conditional random fields [2], the SSIM metric [40], feature matching [6], nonparametric losses [24], the convolutional pseudo-prior [41], and losses based on matching covariance statistics [19].",
      "startOffset" : 120,
      "endOffset" : 123
    }, {
      "referenceID" : 39,
      "context" : "A large body of literature has considered losses of this kind, with popular methods including conditional random fields [2], the SSIM metric [40], feature matching [6], nonparametric losses [24], the convolutional pseudo-prior [41], and losses based on matching covariance statistics [19].",
      "startOffset" : 141,
      "endOffset" : 145
    }, {
      "referenceID" : 5,
      "context" : "A large body of literature has considered losses of this kind, with popular methods including conditional random fields [2], the SSIM metric [40], feature matching [6], nonparametric losses [24], the convolutional pseudo-prior [41], and losses based on matching covariance statistics [19].",
      "startOffset" : 164,
      "endOffset" : 167
    }, {
      "referenceID" : 23,
      "context" : "A large body of literature has considered losses of this kind, with popular methods including conditional random fields [2], the SSIM metric [40], feature matching [6], nonparametric losses [24], the convolutional pseudo-prior [41], and losses based on matching covariance statistics [19].",
      "startOffset" : 190,
      "endOffset" : 194
    }, {
      "referenceID" : 40,
      "context" : "A large body of literature has considered losses of this kind, with popular methods including conditional random fields [2], the SSIM metric [40], feature matching [6], nonparametric losses [24], the convolutional pseudo-prior [41], and losses based on matching covariance statistics [19].",
      "startOffset" : 227,
      "endOffset" : 231
    }, {
      "referenceID" : 18,
      "context" : "A large body of literature has considered losses of this kind, with popular methods including conditional random fields [2], the SSIM metric [40], feature matching [6], nonparametric losses [24], the convolutional pseudo-prior [41], and losses based on matching covariance statistics [19].",
      "startOffset" : 284,
      "endOffset" : 288
    }, {
      "referenceID" : 27,
      "context" : "Previous works have conditioned GANs on discrete labels [28], text [32], and, indeed, images.",
      "startOffset" : 56,
      "endOffset" : 60
    }, {
      "referenceID" : 31,
      "context" : "Previous works have conditioned GANs on discrete labels [28], text [32], and, indeed, images.",
      "startOffset" : 67,
      "endOffset" : 71
    }, {
      "referenceID" : 28,
      "context" : "The image-conditional models have tackled inpainting [29], image prediction from a normal map [39], image manipulation guided by user constraints [49], future frame prediction [27], future state prediction [48], product photo generation [43], and style transfer [25].",
      "startOffset" : 53,
      "endOffset" : 57
    }, {
      "referenceID" : 38,
      "context" : "The image-conditional models have tackled inpainting [29], image prediction from a normal map [39], image manipulation guided by user constraints [49], future frame prediction [27], future state prediction [48], product photo generation [43], and style transfer [25].",
      "startOffset" : 94,
      "endOffset" : 98
    }, {
      "referenceID" : 48,
      "context" : "The image-conditional models have tackled inpainting [29], image prediction from a normal map [39], image manipulation guided by user constraints [49], future frame prediction [27], future state prediction [48], product photo generation [43], and style transfer [25].",
      "startOffset" : 146,
      "endOffset" : 150
    }, {
      "referenceID" : 26,
      "context" : "The image-conditional models have tackled inpainting [29], image prediction from a normal map [39], image manipulation guided by user constraints [49], future frame prediction [27], future state prediction [48], product photo generation [43], and style transfer [25].",
      "startOffset" : 176,
      "endOffset" : 180
    }, {
      "referenceID" : 47,
      "context" : "The image-conditional models have tackled inpainting [29], image prediction from a normal map [39], image manipulation guided by user constraints [49], future frame prediction [27], future state prediction [48], product photo generation [43], and style transfer [25].",
      "startOffset" : 206,
      "endOffset" : 210
    }, {
      "referenceID" : 42,
      "context" : "The image-conditional models have tackled inpainting [29], image prediction from a normal map [39], image manipulation guided by user constraints [49], future frame prediction [27], future state prediction [48], product photo generation [43], and style transfer [25].",
      "startOffset" : 237,
      "endOffset" : 241
    }, {
      "referenceID" : 24,
      "context" : "The image-conditional models have tackled inpainting [29], image prediction from a normal map [39], image manipulation guided by user constraints [49], future frame prediction [27], future state prediction [48], product photo generation [43], and style transfer [25].",
      "startOffset" : 262,
      "endOffset" : 266
    }, {
      "referenceID" : 33,
      "context" : "Unlike past work, for our generator we use a “U-Net”based architecture [34], and for our discriminator we use a convolutional “PatchGAN” classifier, which only penalizes structure at the scale of image patches.",
      "startOffset" : 71,
      "endOffset" : 75
    }, {
      "referenceID" : 24,
      "context" : "A similar PatchGAN architecture was previously proposed in [25], for the purpose of capturing local style statistics.",
      "startOffset" : 59,
      "endOffset" : 63
    }, {
      "referenceID" : 13,
      "context" : "GANs are generative models that learn a mapping from random noise vector z to output image y: G : z → y [14].",
      "startOffset" : 104,
      "endOffset" : 108
    }, {
      "referenceID" : 28,
      "context" : "Previous approaches to conditional GANs have found it beneficial to mix the GAN objective with a more traditional loss, such as L2 distance [29].",
      "startOffset" : 140,
      "endOffset" : 144
    }, {
      "referenceID" : 33,
      "context" : "The “U-Net” [34] is an encoder-decoder with skip connections between mirrored layers in the encoder and decoder stacks.",
      "startOffset" : 12,
      "endOffset" : 16
    }, {
      "referenceID" : 29,
      "context" : "We adapt our generator and discriminator architectures from those in [30].",
      "startOffset" : 69,
      "endOffset" : 73
    }, {
      "referenceID" : 17,
      "context" : "Both generator and discriminator use modules of the form convolution-BatchNorm-ReLu [18].",
      "startOffset" : 84,
      "endOffset" : 88
    }, {
      "referenceID" : 28,
      "context" : "Many previous solutions [29, 39, 19, 48, 43] to problems in this area have used an encoder-decoder network [16].",
      "startOffset" : 24,
      "endOffset" : 44
    }, {
      "referenceID" : 38,
      "context" : "Many previous solutions [29, 39, 19, 48, 43] to problems in this area have used an encoder-decoder network [16].",
      "startOffset" : 24,
      "endOffset" : 44
    }, {
      "referenceID" : 18,
      "context" : "Many previous solutions [29, 39, 19, 48, 43] to problems in this area have used an encoder-decoder network [16].",
      "startOffset" : 24,
      "endOffset" : 44
    }, {
      "referenceID" : 47,
      "context" : "Many previous solutions [29, 39, 19, 48, 43] to problems in this area have used an encoder-decoder network [16].",
      "startOffset" : 24,
      "endOffset" : 44
    }, {
      "referenceID" : 42,
      "context" : "Many previous solutions [29, 39, 19, 48, 43] to problems in this area have used an encoder-decoder network [16].",
      "startOffset" : 24,
      "endOffset" : 44
    }, {
      "referenceID" : 15,
      "context" : "Many previous solutions [29, 39, 19, 48, 43] to problems in this area have used an encoder-decoder network [16].",
      "startOffset" : 107,
      "endOffset" : 111
    }, {
      "referenceID" : 33,
      "context" : "To give the generator a means to circumvent the bottleneck for information like this, we add skip connections, following the general shape of a “U-Net” [34] (Figure 3).",
      "startOffset" : 152,
      "endOffset" : 156
    }, {
      "referenceID" : 21,
      "context" : "It is well known that the L2 loss – and L1, see Figure 4 – produces blurry results on image generation problems [22].",
      "startOffset" : 112,
      "endOffset" : 116
    }, {
      "referenceID" : 24,
      "context" : "This connection was previously explored in [25], and is also the common assumption in models of texture [8, 12] and style [7, 15, 13, 24].",
      "startOffset" : 43,
      "endOffset" : 47
    }, {
      "referenceID" : 7,
      "context" : "This connection was previously explored in [25], and is also the common assumption in models of texture [8, 12] and style [7, 15, 13, 24].",
      "startOffset" : 104,
      "endOffset" : 111
    }, {
      "referenceID" : 11,
      "context" : "This connection was previously explored in [25], and is also the common assumption in models of texture [8, 12] and style [7, 15, 13, 24].",
      "startOffset" : 104,
      "endOffset" : 111
    }, {
      "referenceID" : 6,
      "context" : "This connection was previously explored in [25], and is also the common assumption in models of texture [8, 12] and style [7, 15, 13, 24].",
      "startOffset" : 122,
      "endOffset" : 137
    }, {
      "referenceID" : 14,
      "context" : "This connection was previously explored in [25], and is also the common assumption in models of texture [8, 12] and style [7, 15, 13, 24].",
      "startOffset" : 122,
      "endOffset" : 137
    }, {
      "referenceID" : 12,
      "context" : "This connection was previously explored in [25], and is also the common assumption in models of texture [8, 12] and style [7, 15, 13, 24].",
      "startOffset" : 122,
      "endOffset" : 137
    }, {
      "referenceID" : 23,
      "context" : "This connection was previously explored in [25], and is also the common assumption in models of texture [8, 12] and style [7, 15, 13, 24].",
      "startOffset" : 122,
      "endOffset" : 137
    }, {
      "referenceID" : 13,
      "context" : "To optimize our networks, we follow the standard approach from [14]: we alternate between one gradient descent step on D, then one step on G.",
      "startOffset" : 63,
      "endOffset" : 67
    }, {
      "referenceID" : 19,
      "context" : "We use minibatch SGD and apply the Adam solver [20].",
      "startOffset" : 47,
      "endOffset" : 51
    }, {
      "referenceID" : 17,
      "context" : "This differs from the usual protocol in that we apply dropout at test time, and we apply batch normalization [18] using the statistics of the test batch, rather than aggregated statistics of the training batch.",
      "startOffset" : 109,
      "endOffset" : 113
    }, {
      "referenceID" : 37,
      "context" : "This approach to batch normalization, when the batch size is set to 1, has been termed “instance normalization” and has been demonstrated to be effective at image generation tasks [38].",
      "startOffset" : 180,
      "endOffset" : 184
    }, {
      "referenceID" : 3,
      "context" : "• Semantic labels↔photo, trained on the Cityscapes dataset [4].",
      "startOffset" : 59,
      "endOffset" : 62
    }, {
      "referenceID" : 30,
      "context" : "• Architectural labels→photo, trained on the CMP Facades dataset [31].",
      "startOffset" : 65,
      "endOffset" : 69
    }, {
      "referenceID" : 48,
      "context" : "• Edges→photo, trained on data from [49] and [44]; binary edges generated using the HED edge detector [42] plus postprocessing.",
      "startOffset" : 36,
      "endOffset" : 40
    }, {
      "referenceID" : 43,
      "context" : "• Edges→photo, trained on data from [49] and [44]; binary edges generated using the HED edge detector [42] plus postprocessing.",
      "startOffset" : 45,
      "endOffset" : 49
    }, {
      "referenceID" : 41,
      "context" : "• Edges→photo, trained on data from [49] and [44]; binary edges generated using the HED edge detector [42] plus postprocessing.",
      "startOffset" : 102,
      "endOffset" : 106
    }, {
      "referenceID" : 9,
      "context" : "• Sketch→photo: tests edges→photo models on humandrawn sketches from [10].",
      "startOffset" : 69,
      "endOffset" : 73
    }, {
      "referenceID" : 35,
      "context" : "Evaluating the quality of synthesized images is an open and difficult problem [36].",
      "startOffset" : 78,
      "endOffset" : 82
    }, {
      "referenceID" : 35,
      "context" : "This metric is similar to the “inception score” from [36], the object detection evaluation in [39], and the “semantic interpretability” measure in [46].",
      "startOffset" : 53,
      "endOffset" : 57
    }, {
      "referenceID" : 38,
      "context" : "This metric is similar to the “inception score” from [36], the object detection evaluation in [39], and the “semantic interpretability” measure in [46].",
      "startOffset" : 94,
      "endOffset" : 98
    }, {
      "referenceID" : 45,
      "context" : "This metric is similar to the “inception score” from [36], the object detection evaluation in [39], and the “semantic interpretability” measure in [46].",
      "startOffset" : 147,
      "endOffset" : 151
    }, {
      "referenceID" : 45,
      "context" : "AMT perceptual studies For our AMT experiments, we followed the protocol from [46]: Turkers were presented with a series of trials that pitted a “real” image against a “fake” image generated by our algorithm.",
      "startOffset" : 78,
      "endOffset" : 82
    }, {
      "referenceID" : 45,
      "context" : "Unlike [46], we did not include vigilance trials.",
      "startOffset" : 7,
      "endOffset" : 11
    }, {
      "referenceID" : 35,
      "context" : "FCN-score While quantitative evaluation of generative models is known to be challenging, recent works [36, 39, 46] have tried using pre-trained semantic classifiers to measure the discriminability of the generated images as a pseudo-metric.",
      "startOffset" : 102,
      "endOffset" : 114
    }, {
      "referenceID" : 38,
      "context" : "FCN-score While quantitative evaluation of generative models is known to be challenging, recent works [36, 39, 46] have tried using pre-trained semantic classifiers to measure the discriminability of the generated images as a pseudo-metric.",
      "startOffset" : 102,
      "endOffset" : 114
    }, {
      "referenceID" : 45,
      "context" : "FCN-score While quantitative evaluation of generative models is known to be challenging, recent works [36, 39, 46] have tried using pre-trained semantic classifiers to measure the discriminability of the generated images as a pseudo-metric.",
      "startOffset" : 102,
      "endOffset" : 114
    }, {
      "referenceID" : 25,
      "context" : "To this end, we adopt the popular FCN-8s [26] architecture for semantic segmentation, and train it on the cityscapes dataset.",
      "startOffset" : 41,
      "endOffset" : 45
    }, {
      "referenceID" : 13,
      "context" : "An adversarial loss, on the other hand, can in principle become aware that grayish outputs are unrealistic, and encourage matching the true color distribution [14].",
      "startOffset" : 159,
      "endOffset" : 163
    }, {
      "referenceID" : 13,
      "context" : "Figure 1 of the original GAN paper [14]).",
      "startOffset" : 35,
      "endOffset" : 39
    }, {
      "referenceID" : 43,
      "context" : "Figure 7: Colorization results of conditional GANs versus the L2 regression from [44] and the full method (classification with rebalancing) from [46].",
      "startOffset" : 81,
      "endOffset" : 85
    }, {
      "referenceID" : 45,
      "context" : "Figure 7: Colorization results of conditional GANs versus the L2 regression from [44] and the full method (classification with rebalancing) from [46].",
      "startOffset" : 145,
      "endOffset" : 149
    }, {
      "referenceID" : 13,
      "context" : "Figure 1 of the original GAN aper [14]).",
      "startOffset" : 34,
      "endOffset" : 38
    }, {
      "referenceID" : 43,
      "context" : "Figure 7: Colorization results of conditional GANs versus the L2 regression from [44] and the full method (classification with rebalancing) from [46].",
      "startOffset" : 81,
      "endOffset" : 85
    }, {
      "referenceID" : 45,
      "context" : "Figure 7: Colorization results of conditional GANs versus the L2 regression from [44] and the full method (classification with rebalancing) from [46].",
      "startOffset" : 145,
      "endOffset" : 149
    }, {
      "referenceID" : 13,
      "context" : "Figure 1 of the original GAN paper [14]).",
      "startOffset" : 35,
      "endOffset" : 39
    }, {
      "referenceID" : 43,
      "context" : "Figure 7: C lorizatio results of conditional GANs versus the L2 regression from [44] and the full method (classification with rebal ncing) from [46].",
      "startOffset" : 80,
      "endOffset" : 84
    }, {
      "referenceID" : 45,
      "context" : "Figure 7: C lorizatio results of conditional GANs versus the L2 regression from [44] and the full method (classification with rebal ncing) from [46].",
      "startOffset" : 144,
      "endOffset" : 148
    }, {
      "referenceID" : 13,
      "context" : "Figure 1 of the original GAN paper [14]).",
      "startOffset" : 35,
      "endOffset" : 39
    }, {
      "referenceID" : 32,
      "context" : "Color histogram matching is a common problem in image processing [33], and PixelGANs may be a promising lightweight solution.",
      "startOffset" : 65,
      "endOffset" : 69
    }, {
      "referenceID" : 45,
      "context" : "Details of this process, and the discriminator architectures are provided in the appendix Classification Ours L2 [46] (rebal.",
      "startOffset" : 113,
      "endOffset" : 117
    }, {
      "referenceID" : 45,
      "context" : "Figure 9: Colorization results of conditional GANs versus the L2 regression from [46] and the full method (classification with rebalancing) from [48].",
      "startOffset" : 81,
      "endOffset" : 85
    }, {
      "referenceID" : 47,
      "context" : "Figure 9: Colorization results of conditional GANs versus the L2 regression from [46] and the full method (classification with rebalancing) from [48].",
      "startOffset" : 145,
      "endOffset" : 149
    }, {
      "referenceID" : 45,
      "context" : "Meth d % Turkers labeled real L2 regression from [46] 16.",
      "startOffset" : 49,
      "endOffset" : 53
    }, {
      "referenceID" : 34,
      "context" : "We trained colorization on ImageNet [35], and tested on the test split introduced by [46, 23].",
      "startOffset" : 36,
      "endOffset" : 40
    }, {
      "referenceID" : 45,
      "context" : "We trained colorization on ImageNet [35], and tested on the test split introduced by [46, 23].",
      "startOffset" : 85,
      "endOffset" : 93
    }, {
      "referenceID" : 22,
      "context" : "We trained colorization on ImageNet [35], and tested on the test split introduced by [46, 23].",
      "startOffset" : 85,
      "endOffset" : 93
    }, {
      "referenceID" : 45,
      "context" : "We also tested the results of [46] and a variant of their method that used an L2 loss (see [46] for details).",
      "startOffset" : 30,
      "endOffset" : 34
    }, {
      "referenceID" : 45,
      "context" : "We also tested the results of [46] and a variant of their method that used an L2 loss (see [46] for details).",
      "startOffset" : 91,
      "endOffset" : 95
    }, {
      "referenceID" : 45,
      "context" : "The conditional GAN scored similarly to the L2 variant of [46] (difference insignificant by bootstrap test), but fell short of [46]’s full method, which fooled participants on 27.",
      "startOffset" : 58,
      "endOffset" : 62
    }, {
      "referenceID" : 45,
      "context" : "The conditional GAN scored similarly to the L2 variant of [46] (difference insignificant by bootstrap test), but fell short of [46]’s full method, which fooled participants on 27.",
      "startOffset" : 127,
      "endOffset" : 131
    }, {
      "referenceID" : 9,
      "context" : "Figure 16: Example results of the edges→photo models applied to human-drawn sketches from [10].",
      "startOffset" : 90,
      "endOffset" : 94
    } ],
    "year" : 2016,
    "abstractText" : "We investigate conditional adversarial networks as a general-purpose solution to image-to-image translation problems. These networks not only learn the mapping from input image to output image, but also learn a loss function to train this mapping. This makes it possible to apply the same generic approach to problems that traditionally would require very different loss formulations. We demonstrate that this approach is effective at synthesizing photos from label maps, reconstructing objects from edge maps, and colorizing images, among other tasks. As a community, we no longer hand-engineer our mapping functions, and this work suggests we can achieve reasonable results without hand-engineering our loss functions either. Many problems in image processing, computer graphics, and computer vision can be posed as “translating” an input image into a corresponding output image. Just as a concept may be expressed in either English or French, a scene may be rendered as an RGB image, a gradient field, an edge map, a semantic label map, etc. In analogy to automatic language translation, we define automatic image-to-image translation as the problem of translating one possible representation of a scene into another, given sufficient training data (see Figure 1). One reason language translation is difficult is because the mapping between languages is rarely one-to-one – any given concept is easier to express in one language than another. Similarly, most image-to-image translation problems are either many-to-one (computer vision) – mapping photographs to edges, segments, or semantic labels, or one-to-many (computer graphics) – mapping labels or sparse user inputs to realistic images. Traditionally, each of these tasks has been tackled with separate, special-purpose machinery (e.g., [7, 15, 11, 1, 3, 37, 21, 26, 9, 42, 46]), despite the fact that the setting is always the same: predict pixels from pixels. Our goal in this paper is to develop a common framework for all these problems. 1 ar X iv :1 61 1. 07 00 4v 1 [ cs .C V ] 2 1 N ov 2 01 6 The community has already taken significant steps in this direction, with convolutional neural nets (CNNs) becoming the common workhorse behind a wide variety of image prediction problems. CNNs learn to minimize a loss function – an objective that scores the quality of results – and although the learning process is automatic, a lot of manual effort still goes into designing effective losses. In other words, we still have to tell the CNN what we wish it to minimize. But, just like Midas, we must be careful what we wish for! If we take a naive approach, and ask the CNN to minimize Euclidean distance between predicted and ground truth pixels, it will tend to produce blurry results [29, 46]. This is because Euclidean distance is minimized by averaging all plausible outputs, which causes blurring. Coming up with loss functions that force the CNN to do what we really want – e.g., output sharp, realistic images – is an open problem and generally requires expert knowledge. It would be highly desirable if we could instead specify only a high-level goal, like “make the output indistinguishable from reality”, and then automatically learn a loss function appropriate for satisfying this goal. Fortunately, this is exactly what is done by the recently proposed Generative Adversarial Networks (GANs) [14, 5, 30, 36, 47]. GANs learn a loss that tries to classify if the output image is real or fake, while simultaneously training a generative model to minimize this loss. Blurry images will not be tolerated since they look obviously fake. Because GANs learn a loss that adapts to the data, they can be applied to a multitude of tasks that traditionally would require very different kinds of loss functions. In this paper, we explore GANs in the conditional setting. Just as GANs learn a generative model of data, conditional GANs (cGANs) learn a conditional generative model [14]. This makes cGANs suitable for image-to-image translation tasks, where we condition on an input image and generate a corresponding output image. GANs have been vigorously studied in the last two years and many of the techniques we explore in this paper have been previously proposed. Nonetheless, earlier papers have focused on specific applications, and it has remained unclear how effective image-conditional GANs can be as a general-purpose solution for image-toimage translation. Our primary contribution is to demonstrate that on a wide variety of problems, conditional GANs produce reasonable results. Our second contribution is to present a simple framework sufficient to achieve good results, and to analyze the effects of several important architectural choices. Code is available at https://github.com/phillipi/pix2pix.",
    "creator" : "LaTeX with hyperref package"
  }
}