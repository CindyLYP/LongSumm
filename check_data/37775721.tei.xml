<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/cindy/tmp/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Neural Generation of Regular Expressions from Natural Language with Minimal Domain Knowledge</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nicholas</forename><surname>Locascio</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Karthik</forename><surname>Narasimhan</surname></persName>
							<email>karthikn@mit.edu</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eduardo</forename><surname>Deleon</surname></persName>
							<email>edeleon04@mit.edu</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nate</forename><surname>Kushman</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Regina</forename><surname>Barzilay</surname></persName>
							<email>regina@csail.mit.edu</email>
						</author>
						<title level="a" type="main">Neural Generation of Regular Expressions from Natural Language with Minimal Domain Knowledge</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-01-31T12:41+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
				<p>This paper explores the task of translating natural language queries into regular expressions which embody their meaning. In contrast to prior work, the proposed neural model does not utilize domain-specific crafting, learning to translate directly from a parallel corpus. To fully explore the potential of neural models, we propose a methodology for collecting a large corpus 1 of regular expression, natural language pairs. Our resulting model achieves a performance gain of 19.6% over previous state-of-the-art models.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>This paper explores the task of translating natural language text queries into regular expressions which embody their meaning. Regular expressions are built into many application interfaces, yet most users of these applications have difficulty writing them <ref type="bibr" target="#b1">(Friedl, 2002)</ref>. Thus a system for automatically generating regular expressions from natural language would be useful in many contexts. Furthermore, such technologies can ultimately scale to translate into other formal representations, such as program scripts <ref type="bibr">(Raza et al., 2015)</ref>.</p><p>Prior work has demonstrated the feasibility of this task. <ref type="bibr" target="#b3">Kushman and Barzilay (2013)</ref> proposed a model that learns to perform the task from a parallel corpus of regular expressions and the text descriptions. To account for the given representational disparity between formal regular expressions and natural language, their model utilizes a domain specific Code and data are submitted as supplementary material. component which computes the semantic equivalence between two regular expressions. Since their model relies heavily on this component, it cannot be readily applied to other formal representations where such semantic equivalence calculations are not possible.</p><p>In this paper, we reexamine the need for such specialized domain knowledge for this task. Given the same parallel corpus used in Kushman and Barzilay (2013), we use an LSTM-based sequence to sequence neural network to perform the mapping. Our model does not utilize semantic equivalence in any form, or make any other special assumptions about the formalism. Despite this and the relatively small size of the original dataset (814 examples), our neural model exhibits a small 0.1% boost in accuracy.</p><p>To further explore the power of neural networks, we created a much larger public dataset, NL-RX. Since creation of regular expressions requires specialized knowledge, standard crowd-sourcing methods are not applicable here. Instead, we employ a two-step generate-and-paraphrase procedure that circumvents this problem. During the generate step, we use a small manually-crafted grammar that translates regular expression into natural language. In the paraphrase step, we rely on crowd-sourcing to paraphrase these rigid descriptions into more natural and fluid descriptions. Using this methodology, we have constructed a corpus of 10,000 regular expressions, with corresponding verbalizations.</p><p>Our results demonstrate that our sequence to sequence model significantly outperforms the domain specific technique on the larger dataset, reaching a gain of 19.6% over of the state-of-the-art technique. arXiv:1608.03000v1 [cs.CL] 9 Aug 2016 2 Related Work Regular Expressions from Natural Language There have been several attempts at generating regular expressions from textual descriptions. Early research into this task used rule-based techniques to create a natural language interface to regular expression writing <ref type="bibr" target="#b6">(Ranta, 1998)</ref>. Our work, however, is closest to <ref type="bibr" target="#b3">Kushman and Barzilay (2013)</ref>. They learned a semantic parsing translation model from a parallel dataset of natural language and regular expressions. Their model used a regular expressionspecific semantic unification technique to disambiguate the meaning of the natural language descriptions. Our method is similar in that we require only description and regex pairs to learn. However, we treat the problem as a direct translation task without applying any domain-specific knowledge.</p><p>Neural Machine Translation Recent advances in neural machine translation (NMT) <ref type="bibr" target="#b0">(Bahdanau et al., 2014;</ref><ref type="bibr">Devlin et al., 2014;</ref><ref type="bibr" target="#b4">Luong et al., 2015)</ref> using the framework of sequence to sequence learning <ref type="bibr" target="#b7">(Sutskever et al., 2014)</ref> have demonstrated the effectiveness of deep learning models at capturing and translating language semantics.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Regex Generation as Translation</head><p>Our model is inspired by the recent advancements in sequence to sequence neural translation. We use a Recurrent Neural Network (RNN) with attention <ref type="bibr" target="#b5">(Mnih et al., 2014)</ref> for both encoding and decoding ( <ref type="figure" target="#fig_0">Figure 1</ref>).</p><p>Let W = w 1 , w 2 ...w m be the input text description where each w i is a word in the vocabulary. We wish to generate the regex R = r 1 , r 2 , ...r n where each r i is a character in the regex.</p><p>We use LSTM (Hochreiter and Schmidhuber, 1997) cells in our model, the transition equations for which can be summarized as: where σ represents the sigmoid function and is elementwise multiplication. The input x t is a word (w t ) for the encoder and the previously generated character r t−1 for the decoder. The attention mechanism is essentially a 'soft' weighting over the encoder's hidden states during decoding:</p><formula xml:id="formula_0">i t = σ(U (i) x t + V (i) h t−1 + b (i) ), f t = σ(U (f ) x t + V (f ) h t−1 + b (f ) ), o t = σ(U (o) x t + V (o) h t−1 + b (o) ) z t = tanh(U (z) x t + V (z) h t−1 + b (z) ) c t = i t z t + f t c t−1 r t = o t tanh(c t ) (1)</formula><formula xml:id="formula_1">α t (e) = exp(score(h t , h e ))</formula><p>e exp(score(h t , h e )) where h e is a hidden state in the encoder and score is the scoring function. We use the general attention matrix weight for our scoring function.</p><p>Our model is six layers deep, with one word embedding layer, two encoder layers, two decoder layers, and one dense output layer. Our encoder and decoder layers use a stacked LSTM architecture with a width of 512 nodes. We use a global attention mechanism (Bahdanau et al., 2014), which considers all hidden states of the encoder when computing the model's context vector. We perform standard dropout during training <ref type="bibr" target="#b7">(Srivastava et al., 2014)</ref> after every LSTM layer with dropout probability equal to 0.25. We train for 20 epochs, utilizing a minibatch size of 32, and a learning-rate of 1.0. The learning rate is decayed by a factor 0.5 if evaluation perplexity does not increase.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Creating a Large Corpus of Natural Language / Regular Expression Pairs</head><p>Previous work in regular expression generation has used fairly small datasets for training and evaluation. In order to fully utilize the power of neural translation models, we create a new large corpus of regular expression, natural language pairs titled NL-RX. The challenge in collecting such corpora is that typical crowdsourcing workers do not possess the specialized knowledge to write regular expressions. To solve this, we employ a two-step generate-andparaphrase procedure to gather our data. This technique is similar to the methods used by <ref type="bibr" target="#b8">Wang et al. (2015)</ref> to create a semantic parsing corpus. In the generate step, we generate regular expression representations from a small manually-crafted grammar <ref type="table" target="#tab_0">(Table 1</ref>). Our grammar includes 15 nonterminal derivations and 6 terminals and of both basic and high-level operations. We identify these via frequency analysis of smaller datasets from previous work <ref type="bibr" target="#b3">(Kushman and Barzilay, 2013)</ref>. Every grammar rule has associated verbalizations for both regular expressions and language descriptions. We use this grammar to stochastically generate regular expressions and their corresponding synthetic language descriptions. This generation process is shown in <ref type="figure">Figure 2</ref>.</p><p>While the automatically generated descriptions are semantically correct, they do not exhibit richness and variability of human-generated descriptions. To obtain natural language (non-synthetic) descriptions, we perform the paraphrase step. In this step, Mechanical Turk <ref type="bibr" target="#b0">(Amazon, 2003)</ref> human workers paraphrase the generated synthetic descrip- tions into the fluent verbalizations.</p><p>NL-RX Using the procedure described above, we create a new public dataset (NL-RX) comprising of 10,000 regular expressions and their corresponding natural language descriptions. <ref type="table" target="#tab_1">Table 2</ref> shows an example from our dataset.</p><p>Our data collection procedure enables us to create a substantially larger and more varied dataset than previously possible. Employing standard crowdsource workers to paraphrase is more cost-efficient and scalable than employing professional regex programmers, enabling us to create a much larger dataset. Furthermore, our stochastic generation of regular expressions from a grammar results in a more varied dataset because it is not subject to the bias of human workers who, in previous work, wrote many duplicate examples (see Results).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Experiments</head><p>Datasets We split the 10,000 regexp and description pairs in NL-RX into 65% train, 10% dev, and 25% test sets.</p><p>In addition, we also evaluate our model on the dataset used by Kushman and Barzilay (2013) (KB13), although it contains far fewer data points (824). We use the 75/25 train/test split used in their work in order directly compare our performance to theirs.</p><p>Training We perform a hyper-parameter gridsearch (on the dev set), to determine our model hyper-parameters: learning-rate = 1.0, encoderdepth = 2, decoder-depth = 2, batch size = 32, dropout = 0.25. We use a Torch <ref type="bibr" target="#b0">(Collobert et al., 2002)</ref> implementation of attention sequence to sequence networks from <ref type="bibr" target="#b2">(Kim, 2016)</ref>. We train our models on the train set for 20 epochs, and choose the model with the best average loss on the dev set.  called DFA-Equal. We employ functional equality because there are many ways to write equivalent regular expressions. For example, (a|b) is functionally equivalent to (b|a), despite their string representations differing. We report DFA-Equal accuracy as our model's evaluation metric, using <ref type="bibr" target="#b3">Kushman and Barzilay (2013)</ref>'s implementation to directly compare our results.</p><p>Baselines We compare our model against two baselines: BoW-NN: BoW-NN is a simple baseline that is a Nearest Neighbor classifier using Bag Of Words representation for each natural language description. For a given test example, it finds the closest cosinesimilar neighbor from the training set and uses the regexp from that example for its prediction.</p><p>Semantic-Unify: Our second baseline, Semantic-Unify, is the previous state-of-the-art model from (Kushman and Barzilay, 2013), explained above. 2</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Results</head><p>Our model significantly outperforms the baselines on the NL-RX dataset and achieves comparable performance to Semantic Unify on the KB13 dataset <ref type="table" target="#tab_3">(Table 3)</ref>. Despite the small size of KB13, our model achieves state-of-the-art results on this very resource-constrained dataset (814 examples). Using NL-RX, we investigate the impact of training data size on our model's accuracy. <ref type="figure" target="#fig_1">Figure 3</ref> shows how our model's performance improves as the number of training examples grows.</p><p>Differences in Datasets Keeping the previous section in mind, a seemingly unusual finding is that the model's accuracy is higher for the smaller dataset, KB13, than for the larger dataset, NL-RX-Turk. On further analysis, we learned that the KB13 dataset is a much less varied and complex dataset than NL-RX-Turk. KB13 contains many duplicates, with only 45% of its regular expressions being unique. This makes the translation task easier because over half of the correct test predictions will be exact repetitions from the training set. In contrast, NL-RX-Turk does not suffer from this variance problem and contains 97% unique regular expressions. The relative easiness of the KB13 dataset is further illustrated by the high performance of the Nearest-Neighbor baselines on the KB13 dataset.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Conclusions</head><p>In this paper we demonstrate that generic neural architectures for generating regular expressions outperform customized, heavily engineered models. The results suggest that this technique can be employed to tackle more challenging problems in broader families of formal languages, such as mapping between language description and program scripts. We also have created a large parallel corpus of regular expressions and natural language queries using typical crowd-sourcing workers, which we make available publicly.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Deep-Regex Encoder-Decoder setup.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 3 :</head><label>3</label><figDesc>Our model's performance, like many deep learning models, increases significantly with larger datasets. String-Equal:Accuracy on direct string match, DFA-Equal:Accuracy using the DFA-Equal evaluation.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Table 1 :</head><label>1</label><figDesc>Regex → Synthetic Grammar for Data Generation</figDesc><table><row><cell></cell><cell>Non-Terminals</cell><cell></cell></row><row><cell>x &amp; y → x and y</cell><cell>x | y → x or y</cell><cell>∼(x) → not x</cell></row><row><cell>.*x.*y → x followed by y</cell><cell>.*x.* → contains x</cell><cell>x{N,} → x, N or more times</cell></row><row><cell>x&amp; y&amp; z → x and y and z</cell><cell>x | y | z → x or y or z</cell><cell>x{1,N} → x, at most N times</cell></row><row><cell>x.* → starts with x</cell><cell>.*x → ends with x</cell><cell>\b x\b → words with x</cell></row><row><cell>(x)+ → x, at least once</cell><cell>(x)* → x, zero or more times</cell><cell>x → only x</cell></row><row><cell></cell><cell>Terminals</cell><cell></cell></row><row><cell>[AEIOUaeiou] → a vowel</cell><cell>[0-9] → a number</cell><cell>word → the string 'word'</cell></row><row><cell>[A-Z] → an uppercase letter</cell><cell>[a-z] → a lowercase letter</cell><cell>. → a character</cell></row><row><cell cols="3">Figure 2: Process for generating Synthetic Descriptions</cell></row><row><cell cols="3">from Regular Expressions. Grammar rules from Table 1</cell></row><row><cell cols="3">are applied to a node's children and the resulting string is</cell></row><row><cell cols="2">passed to the node's parent.</cell><cell></cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>Table 2 :</head><label>2</label><figDesc>NL-RX Text Descriptions and Regular ExpressionSynthetic: lines not words with starting with a capital letter Paraphrased: lines that do not contain words that begin with a capital letter Regex: ∼ (\b([A-Z])(.*)\b)</figDesc><table /><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head></head><label></label><figDesc>Evaluation Metric To accurately evaluate our model, we perform a functional equality check</figDesc><table><row><cell>Models</cell><cell cols="2">NL-RX-Synth Dev Test</cell><cell>NL-RX-Turk Dev Test</cell><cell>KB13 Test</cell></row><row><cell>BoW NN</cell><cell>31.7%</cell><cell cols="3">30.6% 18.2% 16.4% 48.5%</cell></row><row><cell cols="2">Semantic-Unify 41.2%</cell><cell cols="3">46.3% 39.5% 38.6% 65.5%</cell></row><row><cell>Deep-RegEx</cell><cell cols="4">85.75% 88.7% 61.2% 58.2% 65.6%</cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head>Table 3 :</head><label>3</label><figDesc>DFA-Equal accuracy on different datasets.</figDesc><table><row><cell>KB13: Dataset from Kushman and Barzilay(2013), NL-</cell></row><row><cell>RX-Synth: NL Dataset with original synthetic descrip-</cell></row><row><cell>tions, NL-RX-Turk: NL Dataset with Mechanical Turk</cell></row><row><cell>paraphrased descriptions. Best scores are in bold.</cell></row></table><note></note></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="2">We trained and evaluated Semantic-Unify in consultation with the original authors.</note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Fast and robust neural network joint models for statistical machine translation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">;</forename><surname>Amazon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Bahdanau</surname></persName>
		</author>
		<idno>abs/1409.0473. [Collobert et al.2002</idno>
		<ptr target="https://torch.ch" />
	</analytic>
	<monogr>
		<title level="m">ACL (1)</title>
		<editor>Jacob Devlin, Rabih Zbib, Zhongqiang Huang, Thomas Lamar, Richard M Schwartz, and John Makhoul</editor>
		<imprint>
			<publisher>Citeseer</publisher>
			<date type="published" when="2002" />
			<biblScope unit="page" from="1370" to="1380" />
		</imprint>
	</monogr>
	<note>Neural machine translation by jointly learning to align and translate</note>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Mastering regular expressions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">F</forename><surname>Jeffrey</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Friedl</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Sepp Hochreiter and Jürgen Schmidhuber</title>
		<imprint>
			<date type="published" when="1997" />
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="page" from="1735" to="1780" />
		</imprint>
	</monogr>
	<note>Long short-term memory</note>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yoon</forename><surname>Kim</surname></persName>
		</author>
		<ptr target="https://github.com/harvardnlp/seq2seq-attn" />
		<title level="m">Seq2seq-attn</title>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Using semantic unification to generate regular expressions from natural language</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nate</forename><surname>Kushman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Regina</forename><surname>Barzilay</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">North American Chapter of the Association for Computational Linguistics (NAACL)</title>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
	<note>Kushman and Barzilay2013</note>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Effective approaches to attention-based neural machine translation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">[</forename><surname>Luong</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2015 Conference on Empirical Methods in Natural Language Processing</title>
		<meeting>the 2015 Conference on Empirical Methods in Natural Language Processing<address><addrLine>Lisbon, Portugal</addrLine></address></meeting>
		<imprint>
			<publisher>Association for Computational Linguistics</publisher>
			<date type="published" when="2015-09" />
			<biblScope unit="page" from="1412" to="1421" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Recurrent models of visual attention</title>
	</analytic>
	<monogr>
		<title level="m">Advances in Neural Information Processing Systems</title>
		<imprint>
			<date type="published" when="2014" />
			<biblScope unit="page" from="2204" to="2212" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">A multilingual naturallanguage interface to regular expressions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Aarne</forename><surname>Ranta</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Mohammad Raza, Sumit Gulwani, and Natasa Milic-Frayling. 2015. Compositional program synthesis from natural language and examples. International Joint Conference on Artificial Intelligence (IJCAI)</title>
		<imprint>
			<publisher>Association for Computational Linguistics</publisher>
			<date type="published" when="1998" />
			<biblScope unit="page" from="79" to="90" />
		</imprint>
	</monogr>
	<note>Proceedings of the International Workshop on Finite State Methods in Natural Language Processing</note>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Ilya Sutskever, Oriol Vinyals, and Quoc V Le. 2014. Sequence to sequence learning with neural networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">[</forename><surname>Srivastava</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in neural information processing systems</title>
		<imprint>
			<date type="published" when="2014" />
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="page" from="3104" to="3112" />
		</imprint>
	</monogr>
	<note>Dropout: A simple way to prevent neural networks from overfitting</note>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">Building a semantic parser overnight</title>
		<imprint>
			<date type="published" when="2015" />
			<publisher>ACL</publisher>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
