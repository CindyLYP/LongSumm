<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/cindy/tmp/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">A New Metaheuristic Bat-Inspired Algorithm</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date type="published" when="2010-04-23">23 Apr 2010</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Xin-She</forename><surname>Yang</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Engineering</orgName>
								<orgName type="institution">University of Cambridge</orgName>
								<address>
									<addrLine>Trumpington Street</addrLine>
									<postCode>CB2 1PZ</postCode>
									<settlement>Cambridge</settlement>
									<country key="GB">UK</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X.-S</forename><surname>Yang</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Engineering</orgName>
								<orgName type="institution">University of Cambridge</orgName>
								<address>
									<addrLine>Trumpington Street</addrLine>
									<postCode>CB2 1PZ</postCode>
									<settlement>Cambridge</settlement>
									<country key="GB">UK</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">New</forename><surname>Metaheuristic</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Engineering</orgName>
								<orgName type="institution">University of Cambridge</orgName>
								<address>
									<addrLine>Trumpington Street</addrLine>
									<postCode>CB2 1PZ</postCode>
									<settlement>Cambridge</settlement>
									<country key="GB">UK</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">A New Metaheuristic Bat-Inspired Algorithm</title>
					</analytic>
					<monogr>
						<imprint>
							<date type="published" when="2010-04-23">23 Apr 2010</date>
						</imprint>
					</monogr>
					<idno type="arXiv">arXiv:1004.4170v1[math.OC]</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-01-31T12:45+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
				<p>Metaheuristic algorithms such as particle swarm optimization, firefly algorithm and harmony search are now becoming powerful methods for solving many tough optimization problems. In this paper, we propose a new metaheuristic method, the Bat Algorithm, based on the echolocation behaviour of bats. We also intend to combine the advantages of existing algorithms into the new bat algorithm. After a detailed formulation and explanation of its implementation, we will then compare the proposed algorithm with other existing algorithms, including genetic algorithms and particle swarm optimization. Simulations show that the proposed algorithm seems much superior to other algorithms, and further studies are also discussed.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Metaheuristic algorithms such as particle swarm optimization and simulated annealing are now becoming powerful methods for solving many tough optimization problems <ref type="bibr" target="#b2">[3]</ref><ref type="bibr" target="#b3">[4]</ref><ref type="bibr" target="#b4">[5]</ref><ref type="bibr" target="#b5">[6]</ref><ref type="bibr" target="#b6">[7]</ref><ref type="bibr" target="#b10">11]</ref>. The vast majority of heuristic and metaheuristic algorithms have been derived from the behaviour of biological systems and/or physical systems in nature. For example, particle swarm optimization was developed based on the swarm behaviour of birds and fish <ref type="bibr" target="#b6">[7,</ref><ref type="bibr" target="#b7">8]</ref>, while simulated annealing was based on the annealing process of metals <ref type="bibr" target="#b8">[9]</ref>.</p><p>New algorithms are also emerging recently, including harmony search and the firefly algorithm. The former was inspired by the improvising process of composing a piece of music <ref type="bibr" target="#b3">[4]</ref>, while the latter was formulated based on the flashing behaviour of fireflies <ref type="bibr" target="#b13">[14]</ref>. Each of these algorithms has certain advantages and disadvantages. For example, simulating annealing can almost guarantee to find the optimal solution if the cooling process is slow enough and the simulation is running long enough; however, the fine adjustment in parameters does affect the convergence rate of the optimization process. A natural question is whether it is possible to combine major advantages of these algorithms and try to develop a potentially better algorithm? This paper is such an attempt to address this issue.</p><p>In this paper, we intend to propose a new metaheuristic method, namely, the Bat Algorithm (BA), based on the echolocation behaviour of bats. The capability of echolocation of microbats is fascinating as these bats can find their prey and discriminate different types of insects even in complete darkness. We will first formulate the bat algorithm by idealizing the echolocation behaviour of bats. We then describe how it works and make comparison with other existing algorithms. Finally, we will discuss some implications for further studies.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Echolocation of bats 2.1 Behaviour of microbats</head><p>Bats are fascinating animals. They are the only mammals with wings and they also have advanced capability of echolocation. It is estimated that there are about 996 different species which account for up to 20% of all mammal species <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b1">2]</ref>. Their size ranges from the tiny bumblebee bat (of about 1.5 to 2g) to the giant bats with wingspan of about 2 m and weight up to about 1 kg. Microbats typically have forearm length of about 2.2 to 11cm. Most bats uses echolocation to a certain degree; among all the species, microbats are a famous example as microbats use echolocation extensively while megabats do not <ref type="bibr" target="#b11">[12,</ref><ref type="bibr" target="#b12">13]</ref>.</p><p>Most microbats are insectivores. Microbats use a type of sonar, called, echolocation, to detect prey, avoid obstacles, and locate their roosting crevices in the dark. These bats emit a very loud sound pulse and listen for the echo that bounces back from the surrounding objects. Their pulses vary in properties and can be correlated with their hunting strategies, depending on the species. Most bats use short, frequency-modulated signals to sweep through about an octave, while others more often use constant-frequency signals for echolocation. Their signal bandwidth varies depends on the species, and often increased by using more harmonics.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Acoustics of Echolocation</head><p>Though each pulse only lasts a few thousandths of a second (up to about 8 to 10 ms), however, it has a constant frequency which is usually in the region of 25kHz to 150 kHz. The typical range of frequencies for most bat species are in the region between 25kHz and 100kHz, though some species can emit higher frequencies up to 150 kHz. Each ultrasonic burst may last typically 5 to 20 ms, and microbats emit about 10 to 20 such sound bursts every second. When hunting for prey, the rate of pulse emission can be sped up to about 200 pulses per second when they fly near their prey. Such short sound bursts imply the fantastic ability of the signal processing power of bats. In fact, studies shows the integration time of the bat ear is typically about 300 to 400 µs.</p><p>As the speed of sound in air is typically v = 340 m/s, the wavelength λ of the ultrasonic sound bursts with a constant frequency f is given by</p><formula xml:id="formula_0">λ = v f ,<label>(1)</label></formula><p>which is in the range of 2mm to 14mm for the typical frequency range from 25kHz to 150 kHz. Such wavelengths are in the same order of their prey sizes.</p><p>Amazingly, the emitted pulse could be as loud as 110 dB, and, fortunately, they are in the ultrasonic region. The loudness also varies from the loudest when searching for prey and to a quieter base when homing towards the prey. The travelling range of such short pulses are typically a few metres, depending on the actual frequencies <ref type="bibr" target="#b11">[12]</ref>. Microbats can manage to avoid obstacles as small as thin human hairs.</p><p>Studies show that microbats use the time delay from the emission and detection of the echo, the time difference between their two ears, and the loudness variations of the echoes to build up three dimensional scenario of the surrounding. They can detect the distance and orientation of the target, the type of prey, and even the moving speed of the prey such as small insects. Indeed, studies suggested that bats seem to be able to discriminate targets by the variations of the Doppler effect induced by the wing-flutter rates of the target insects <ref type="bibr" target="#b0">[1]</ref>.</p><p>Obviously, some bats have good eyesight, and most bats also have very sensitive smell sense. In reality, they will use all the senses as a combination to maximize the efficient detection of prey and smooth navigation. However, here we are only interested in the echolocation and the associated behaviour.</p><p>Such echolocation behaviour of microbats can be formulated in such a way that it can be associated with the objective function to be optimized, and this make it possible to formulate new optimization algorithms. In the rest of this paper, we will first outline the basic formulation of the Bat Algorithm (BA) and then discuss the implementation and comparison in detail.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Bat Algorithm</head><p>If we idealize some of the echolocation characteristics of microbats, we can develop various bat-inspired algorithms or bat algorithms. For simplicity, we now use the following approximate or idealized rules:</p><p>1. All bats use echolocation to sense distance, and they also 'know' the difference between food/prey and background barriers in some magical way;</p><p>2. Bats fly randomly with velocity v i at position x i with a fixed frequency f min , varying wavelength λ and loudness A 0 to search for prey. They can automatically adjust the wavelength (or frequency) of their emitted pulses and adjust the rate of pulse emission r ∈ [0, 1], depending on the proximity of their target;</p><p>3. Although the loudness can vary in many ways, we assume that the loudness varies from a large (positive) A 0 to a minimum constant value A min .</p><p>Another obvious simplification is that no ray tracing is used in estimating the time delay and three dimensional topography. Though this might be a good feature for the application in computational geometry, however, we will not use this as it is more computationally extensive in multidimensional cases.</p><p>In addition to these simplified assumptions, we also use the following approximations, for simplicity. In general the frequency f in a range [f min , f max ] corresponds to a range of wavelengths [λ min , λ max ]. For example a frequency range of [20kHz, 500kHz] corresponds to a range of wavelengths from 0.7mm to 17mm.</p><p>For a given problem, we can also use any wavelength for the ease of implementation. In the actual implementation, we can adjust the range by adjusting the wavelengths (or frequencies), and the detectable range (or the largest wavelength) should be chosen  such that it is comparable to the size of the domain of interest, and then toning down to smaller ranges. Furthermore, we do not necessarily have to use the wavelengths themselves, instead, we can also vary the frequency while fixing the wavelength λ. This is because λ and f are related due to the fact λf is constant. We will use this later approach in our implementation.</p><p>For simplicity, we can assume f ∈ [0, f max ]. We know that higher frequencies have short wavelengths and travel a shorter distance. For bats, the typical ranges are a few metres. The rate of pulse can simply be in the range of [0, 1] where 0 means no pulses at all, and 1 means the maximum rate of pulse emission.</p><p>Based on these approximations and idealization, the basic steps of the Bat Algorithm (BA) can be summarized as the pseudo code shown in <ref type="figure" target="#fig_0">Fig. 1</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Movement of Virtual Bats</head><p>In simulations, we use virtual bats naturally. We have to define the rules how their positions x i and velocities v i in a d-dimensional search space are updated. The new solutions x t i and velocities v t i at time step t are given by</p><formula xml:id="formula_1">f i = f min + (f max − f min )β,<label>(2)</label></formula><formula xml:id="formula_2">v t i = v t−1 i + (x t i − x * )f i ,<label>(3)</label></formula><p>x</p><formula xml:id="formula_3">t i = x t−1 i + v t i ,<label>(4)</label></formula><p>where β ∈ [0, 1] is a random vector drawn from a uniform distribution. Here x * is the current global best location (solution) which is located after comparing all the solutions among all the n bats. As the product λ i f i is the velocity increment, we can use either f i (or λ i ) to adjust the velocity change while fixing the other factor λ i (or f i ), depending on the type of the problem of interest. In our implementation, we will use f min = 0 and f max = 100, depending the domain size of the problem of interest. Initially, each bat is randomly assigned a frequency which is drawn uniformly from [f min , f max ]. For the local search part, once a solution is selected among the current best solutions, a new solution for each bat is generated locally using random walk</p><formula xml:id="formula_4">x new = x old + ǫA t ,<label>(5)</label></formula><p>where ǫ ∈ [−1, 1] is a random number, while A t =&lt;A t i &gt; is the average loudness of all the bats at this time step.</p><p>The update of the velocities and positions of bats have some similarity to the procedure in the standard particle swarm optimization <ref type="bibr" target="#b6">[7]</ref> as f i essentially controls the pace and range of the movement of the swarming particles. To a degree, BA can be considered as a balanced combination of the standard particle swarm optimization and the intensive local search controlled by the loudness and pulse rate.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Loudness and Pulse Emission</head><p>Furthermore, the loudness A i and the rate r i of pulse emission have to be updated accordingly as the iterations proceed. As the loudness usually decreases once a bat has found its prey, while the rate of pulse emission increases, the loudness can be chosen as any value of convenience. For example, we can use A 0 = 100 and A min = 1. For simplicity, we can also use A 0 = 1 and A min = 0, assuming A min = 0 means that a bat has just found the prey and temporarily stop emitting any sound. Now we have</p><formula xml:id="formula_5">A t+1 i = αA t i , r t+1 i = r 0 i [1 − exp(−γt)],<label>(6)</label></formula><p>where α and γ are constants. In fact, α is similar to the cooling factor of a cooling schedule in the simulated annealing <ref type="bibr" target="#b8">[9]</ref>. For any 0 &lt; α &lt; 1 and γ &gt; 0, we have</p><formula xml:id="formula_6">A t i → 0, r t i → r 0 i , as t → ∞.<label>(7)</label></formula><p>In the simplicity case, we can use α = γ, and we have used α = γ = 0.9 in our simulations. The choice of parameters requires some experimenting. Initially, each bat should have different values of loudness and pulse emission rate, and this can be achieved by randomization. For example, the initial loudness A i can typically be <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b1">2]</ref>, while the initial emission rate r 0 i can be around zero, or any value r 0 i ∈ [0, 1] if using <ref type="bibr" target="#b5">(6)</ref>. Their loudness and emission rates will be updated only if the new solutions are improved, which means that these bats are moving towards the optimal solution. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Benchmark Functions</head><p>There are many standard test functions for validating new algorithms. In the current benchmark validation, we have chosen the well-known Rosenbrock's function</p><formula xml:id="formula_7">f (x) = d−1 i=1 (1 − x 2 i ) 2 + 100(x i+1 − x i ) 2 , −2.048 ≤ x i ≤ 2.048,<label>(8)</label></formula><p>and the eggcrate function</p><formula xml:id="formula_8">g(x, y) = x 2 + y 2 + 25(sin 2 x + sin 2 y), (x, y) ∈ [−2π, 2π] × [−2π, 2π].<label>(9)</label></formula><p>We know that f (x) has a global minimum f min = 0 at (1, 1) in 2D, while g(x, y) has a global minimum g min = 0 at (0, 0). De Jong's standard sphere function</p><formula xml:id="formula_9">h(x) = d i=1 x 2 i , −10 ≤ x i ≤ 10,<label>(10)</label></formula><p>has also been used. Its minimum is h min = 0 at (0, 0, ..., 0) for any d ≥ 3.</p><p>In addition, we have also used other standard test functions for numerical global optimization <ref type="bibr" target="#b9">[10]</ref> such as Ackley's function In our implementation, we use n = 25 to 50 virtual bats, and α = 0.9. For Rosenbrock's 2-D banana function, the paths of 25 virtual bats during the consecutive 20 time steps are shown in <ref type="figure" target="#fig_1">Fig. 2</ref> where we can see that the bats converge at the global optimum (1, 1). For the multimodal eggcrate function, a snapshot of the last 10 iterations is shown in <ref type="figure" target="#fig_2">Fig. 3</ref>. Again, all bats move towards the global best (0, 0).</p><formula xml:id="formula_10">s(x) = 20 + e − 20 exp − 0.2 1 d d i=1 x 2 i − exp[ 1 d d i=1 cos(2πx i )],<label>(11)</label></formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Comparison with Other Algorithms</head><p>In order to compare the performance of the new algorithm, we have tested it against other heuristic algorithms, including genetic algorithms (GA) <ref type="bibr" target="#b4">[5,</ref><ref type="bibr" target="#b5">6,</ref><ref type="bibr" target="#b10">11]</ref>, and particle swarm optimization (PSO) <ref type="bibr" target="#b6">[7,</ref><ref type="bibr" target="#b7">8]</ref>. There are many variants of PSO, and some variants such as the mean PSO could perform better than the standard PSO <ref type="bibr" target="#b2">[3]</ref>; however, the standard PSO is by far the most popularly used. Therefore, we will also use the standard PSO in our comparison.</p><p>There are many ways to carry out the comparison of algorithm performance, and two obvious approaches are: to compare the numbers of function evaluations for a given tolerance or accuracy, or to compare their accuracies for a fixed number of function evaluations. Here we will use the first approach. In our simulations, we use a fixed tolerance ǫ ≤ 10 −5 , and we run each algorithm for 100 times so that we can do meaningful statistical analysis.</p><p>For genetic algorithms, we have used the standard version with no elitism with the mutation probability of p m = 0.05 and crossover probability of 0.95. For particle swarm optimization, we have also used the standard version with learning parameters α = = and the inertia function I = 1 <ref type="bibr" target="#b6">[7,</ref><ref type="bibr" target="#b7">8]</ref>. The simulations have been carried out using Matlab on a standard 3GHz desktop computer. Each run with about 10,000 function evaluations typically takes less than 5 seconds. Furthermore, we have tried to use different population sizes from n = 10 to 250, and we found that for most problems, n = 15 to 50 is sufficient. Therefore, we use a fixed population n = 40 for all simulations. <ref type="table" target="#tab_1">Table 1</ref> shows the number of function evaluations in the form of mean ± the standard deviation (success rate of the algorithm in finding the global optima). From <ref type="table" target="#tab_1">Table 1</ref>, we can see that PSO performs much better than genetic algorithms, while the Bat Algorithm is much superior to other algorithms in terms of accuracy and efficiency. This is no surprising as the aim of developing the new algorithm was to try to use the advantages of existing algorithms and other interesting feature inspired by the fantastic behaviour of echolocation of microbats.</p><p>If we replace the variations of the frequency f i by a random parameter and setting A i = 0 and r i = 1, the bat algorithm essentially becomes the standard Particle Swarm Optimization (PSO). Similarly, if we do not use the velocities, but we use fixed loudness and rate: A i and r i . For example, A i = r i = 0.7, this algorithm is virtually reduced to a simple Harmony Search (HS) as the frequency/wavelength change is essentially the pitch adjustment, while the rate of pulse emission is similar to the harmonic acceptance rate (here with a twist) in the harmony search algorithm <ref type="bibr" target="#b3">[4,</ref><ref type="bibr" target="#b14">15]</ref>. The current studies implies that the proposed new algorithm is potentially more powerful and thus should be investigated further in many applications of engineering and industrial optimization problems.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Discussions</head><p>In this paper, we have successfully formulated a new Bat Algorithm for continuous constrained optimization problems. From the formulation of the Bat Algorithm and its implementation and comparison, we can see that it is a very promising algorithm. It is potentially more powerful than particle swarm optimization and genetic algorithms as well as Harmony Search. The primary reason is that BA uses a good combination of major advantages of these algorithms in some way. Moreover, PSO and harmony search are the special cases of the Bat Algorithm under appropriate simplifications.</p><p>In addition, the fine adjustment of the parameters α and γ can affect the convergence rate of the bat algorithm. In fact, parameter α acts in a similar role as the cooling schedule in the simulated annealing. Though the implementation is more complicated than many other metaheuristic algorithms; however, it does show that it utilizes a balanced combination of the advantages of existing successful algorithms with innovative feature based on the echolocation behaviour of bats. New solutions are generated by adjusting frequencies, loudness and pulse emission rates, while the proposed solution is accepted or not depends on the quality of the solutions controlled or characterized by loudness and pulse rate which are in turn related to the closeness or the fitness of the locations/solution to the global optimal solution.</p><p>The exciting results suggest that more studies will highly be needed to carry out the sensitivity analysis, to analyze the rate of algorithm convergence, and to improve the convergence rate even further. More extensive comparison studies with a more wide range of existing algorithms using much tough test functions in higher dimensions will pose more challenges to the algorithms, and thus such comparisons will potentially reveal the virtues and weakness of all the algorithms of interest.</p><p>An interesting extension will be to use different schemes of wavelength or frequency variations instead of the current linear implementation. In addition, the rates of pulse emission and loudness can also be varied in a more sophisticated manner. Another extension for discrete problems is to use the time delay between pulse emission and the echo bounced back. For example, in the travelling salesman problem, the distance between two adjacent nodes/cities can easily be coded as time delay. As microbats use time difference between their two ears to obtain three-dimensional information, they can identify the type of prey and the velocity of a flying insect. Therefore, a further natural extension to the current bat algorithm would be to use the directional echolocation and Doppler effect, which may lead to even more interesting variants and new algorithms.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Pseudo code of the bat algorithm (BA).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>The paths of 25 virtual bats during 20 consecutive iterations. They converge into (1, 1).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 :</head><label>3</label><figDesc>The eggcrate function (left) and the locations of 40 bats in the last ten iterations (right). where −30 ≤ x i ≤ 30. It has the global minimum s min = 0 at (0, 0, ..., local optima in the the domain 0 ≤ x i ≤ π where i = 1, 2, ..., d. The global minimum is f * ≈ −1.801 for d = 2, while f * ≈ −4.6877 for d = 5.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head></head><label></label><figDesc>Bat AlgorithmObjective functionf (x), x = (x 1 , ..., x d ) T Initializethe bat population x i (i = 1, 2, ..., n) and v i Define pulse frequency f i at x i Initialize pulse rates r i and the loudness A i Accept the new solutions Increase r i and reduce A i end if Rank the bats and find the current best x</figDesc><table><row><cell>while (t &lt;Max number of iterations)</cell></row><row><cell>Generate new solutions by adjusting frequency,</cell></row><row><cell>and updating velocities and locations/solutions [equations (2) to (4)]</cell></row><row><cell>if (rand &gt; r i )</cell></row><row><cell>Select a solution among the best solutions</cell></row><row><cell>Generate a local solution around the selected best solution</cell></row><row><cell>end if</cell></row><row><cell>Generate a new solution by flying randomly</cell></row><row><cell>if (rand &lt; A</cell></row></table><note>i &amp; f (x i ) &lt; f (x* ))* end while Postprocess results and visualization</note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>Table 1 :</head><label>1</label><figDesc>Comparison of BA with GA, and PSO.</figDesc><table><row><cell>Functions/Algorithms</cell><cell>GA</cell><cell>PSO</cell><cell>BA</cell></row><row><cell>Multiple peaks</cell><cell>52124 ± 3277(98%)</cell><cell>3719 ± 205(97%)</cell><cell>1152 ± 245(100%)</cell></row><row><cell>Michalewicz's (d=16)</cell><cell>89325 ± 7914(95%)</cell><cell>6922 ± 537(98%)</cell><cell>4752 ± 753(100%)</cell></row><row><cell>Rosenbrock's (d=16)</cell><cell>55723 ± 8901(90%)</cell><cell>32756 ± 5325(98%)</cell><cell>7923 ± 3293(100%)</cell></row><row><cell>De Jong's (d=256)</cell><cell cols="2">25412 ± 1237(100%) 17040 ± 1123(100%)</cell><cell>5273 ± 490(100%)</cell></row><row><cell>Schwefel's (d=128)</cell><cell cols="2">227329 ± 7572(95%) 14522 ± 1275(97%)</cell><cell>8929 ± 729(99%)</cell></row><row><cell>Ackley's (d=128)</cell><cell>32720 ± 3327(90%)</cell><cell>23407 ± 4325(92%)</cell><cell>6933 ± 2317(100%)</cell></row><row><cell>Rastrigin's</cell><cell cols="3">110523 ± 5199(77%) 79491 ± 3715(90%) 12573 ± 3372(100%)</cell></row><row><cell>Easom's</cell><cell>19239 ± 3307(92%)</cell><cell>17273 ± 2929(90%)</cell><cell>7532 ± 1702(99%)</cell></row><row><cell>Griewangk's</cell><cell>70925 ± 7652(90%)</cell><cell>55970 ± 4223(92%)</cell><cell>9792 ± 4732(100%)</cell></row><row><cell cols="2">Shubert's (18 minima) 54077 ± 4997(89%)</cell><cell cols="2">23992 ± 3755(92%) 11925 ± 4049(100%)</cell></row></table><note></note></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="4">Validation and ComparisonFrom the pseudo code, it is relatively straightforward to implement the Bat Algorithm in any programming language. For the ease of visualization, we have implemented it using Matlab for various test functions.</note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">D</forename><surname>Altringham</surname></persName>
		</author>
		<title level="m">Bats: Biology and Behaviour</title>
		<imprint>
			<publisher>Oxford Univesity Press</publisher>
			<date type="published" when="1996" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">The Varienty of Life</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Colin</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2000" />
			<publisher>Oxford University Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Mean particle swarm optimisation for function optimisation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Deep</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">C</forename><surname>Bansal</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Int. J. Comput. Intel. Studies</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="page" from="72" to="92" />
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">A new heuristic optimization algorithm: Harmony search</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><forename type="middle">W</forename><surname>Geem</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">H</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">V</forename><surname>Loganathan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Simulation</title>
		<imprint>
			<biblScope unit="volume">76</biblScope>
			<biblScope unit="page" from="60" to="68" />
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">Genetic Algorithms in Search, Optimiztion and Machine Learning</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Goldberg</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1989" />
			<publisher>Addison-Wesley</publisher>
			<pubPlace>Reading, MA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Adapation in Natural and Artificial Systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">H</forename><surname>Holland</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1975" />
			<publisher>University of Michigan Press</publisher>
			<pubPlace>Ann Arbor</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Particle swarm optimization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Kennedy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Eberhart</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE Int. Conf. Neural Networks</title>
		<meeting>IEEE Int. Conf. Neural Networks<address><addrLine>Perth, Australia</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1995" />
			<biblScope unit="page" from="1942" to="1945" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">Swarm Intelligence</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Kennedy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Eberhart</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2001" />
			<publisher>Academic Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Optimization by simulated annealing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Kirkpatrick</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">D</forename><surname>Gelatt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">P</forename><surname>Vecchi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Science</title>
		<imprint>
			<biblScope unit="volume">220</biblScope>
			<biblScope unit="page" from="671" to="680" />
			<date type="published" when="1983" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Novel composition test functions for numerical global optimization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">J</forename><surname>Liang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">N</forename><surname>Suganthan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Deb</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE Int. Swarm Intel. Symp</title>
		<meeting>IEEE Int. Swarm Intel. Symp</meeting>
		<imprint>
			<date type="published" when="2005" />
			<biblScope unit="page" from="68" to="75" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">An Introduction to Genetic Algorithms</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Mitchell</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1998" />
			<publisher>MIT Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Richardson</surname></persName>
		</author>
		<title level="m">Bats. Natural History Museum</title>
		<meeting><address><addrLine>London</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">The secrete life of bats</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Richardson</surname></persName>
		</author>
		<ptr target="http://www.nhm.ac.uk" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X.-S</forename><surname>Yang</surname></persName>
		</author>
		<title level="m">Nature-inspired Metaheuristic Algorithms</title>
		<imprint>
			<publisher>Luniver Press</publisher>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Harmony search as a metaheuristic algorithm</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X.-S</forename><surname>Yang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Music-Inspired Harmony Search Algorithm: Theory and Applications</title>
		<editor>Z. W. Geem</editor>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2009" />
			<biblScope unit="page" from="1" to="14" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
