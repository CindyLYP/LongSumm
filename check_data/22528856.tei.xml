<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/cindy/tmp/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Attend, Infer, Repeat: Fast Scene Understanding with Generative Models</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date type="published" when="2016-08-12">12 Aug 2016</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">M Ali</forename><surname>Eslami</surname></persName>
							<email>aeslami@google.com</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nicolas</forename><surname>Heess</surname></persName>
							<email>heess@google.com</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Theophane</forename><surname>Weber</surname></persName>
							<email>theophane@google.com</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yuval</forename><surname>Tassa</surname></persName>
							<email>tassa@google.com</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Szepesvari</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Koray</forename><surname>Kavukcuoglu</surname></persName>
							<email>korayk@google.com</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Geoffrey</forename><forename type="middle">E</forename><surname>Hinton</surname></persName>
							<email>geoffhinton@google.com</email>
						</author>
						<title level="a" type="main">Attend, Infer, Repeat: Fast Scene Understanding with Generative Models</title>
					</analytic>
					<monogr>
						<imprint>
							<date type="published" when="2016-08-12">12 Aug 2016</date>
						</imprint>
					</monogr>
					<idno type="arXiv">arXiv:1603.08575v3[cs.CV]</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-01-31T12:43+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
				<p>We present a framework for efficient inference in structured image models that explicitly reason about objects. We achieve this by performing probabilistic inference using a recurrent neural network that attends to scene elements and processes them one at a time. Crucially, the model itself learns to choose the appropriate number of inference steps. We use this scheme to learn to perform inference in partially specified 2D models (variable-sized variational auto-encoders) and fully specified 3D models (probabilistic renderers). We show that such models learn to identify multiple objects-counting, locating and classifying the elements of a scenewithout any supervision, e.g., decomposing 3D images with various numbers of objects in a single forward pass of a neural network at unprecedented speed. We further show that the networks produce accurate inferences when compared to supervised counterparts, and that their structure leads to improved generalization.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Introduction</head><p>The human percept of a visual scene is highly structured. Scenes naturally decompose into objects that are arranged in space, have visual and physical properties, and are in functional relationships with each other. Artificial systems that interpret images in this way are desirable, as accurate detection of objects and inference of their attributes is thought to be fundamental for many problems of interest. Consider a robot whose task is to clear a table after dinner. To plan its actions it will need to determine which objects are present, what classes they belong to and where each one is located on the table.</p><p>The notion of using structured models for image understanding has a long history (e.g., 'vision as inverse graphics' <ref type="bibr" target="#b3">[4]</ref>), however in practice it has been difficult to define models that are: (a) expressive enough to capture the complexity of natural scenes, and (b) amenable to tractable inference. Meanwhile, advances in deep learning have shown how neural networks can be used to make sophisticated predictions from images using little interpretable structure (e.g., <ref type="bibr" target="#b9">[10]</ref>). Here we explore the intersection of structured probabilistic models and deep networks. Prior work on deep generative methods (e.g., VAEs <ref type="bibr" target="#b8">[9]</ref>) have been mostly unstructured, therefore despite producing impressive samples and likelihood scores their representations have lacked interpretable meaning. On the other hand, structured generative methods have largely been incompatible with deep learning, and therefore inference has been hard and slow (e.g., via MCMC).</p><p>Our proposed framework achieves scene interpretation via learned, amortized inference, and it imposes structure on its representation through appropriate partly-or fully-specified generative models, rather than supervision from labels. It is important to stress that by training generative models, the aim is not primarily to obtain good reconstructions, but to produce good representations, in other words to understand scenes. We show experimentally that by incorporating the right kinds of structures, our models produce representations that are more useful for downstream tasks than those produced by VAEs or state-of-the-art generative models such as DRAW <ref type="bibr" target="#b2">[3]</ref>.</p><p>The proposed framework crucially allows for reasoning about the complexity of a given scene (the dimensionality of its latent space). We demonstrate that via an Occam's razor type effect, this makes it possible to discover the underlying causes of a dataset of images in an unsupervised manner. For instance, the model structure will enforce that a scene is formed by a variable number of entities that appear in different locations, but the process of learning will identify what these scene elements look like and where they appear in any given image. The framework also combines high-dimensional distributed representations with directly interpretable latent variables (e.g., affine pose). This combination makes it easier to avoid the pitfalls of models that are too unconstrained (leading to data-hungry learning) or too rigid (leading to failure via mis-specification).</p><p>The main contributions of the paper are as follows. First, in Sec. 2 we formalize a scheme for efficient variational inference in latent spaces of variable dimensionality. The key idea is to treat inference as an iterative process, implemented as a recurrent neural network that attends to one object at a time, and learns to use an appropriate number of inference steps for each image. We call the proposed framework Attend-Infer-Repeat (AIR). End-to-end learning is enabled by recent advances in amortized variational inference, e.g., combining gradient based optimization for continuous latent variables with black-box optimization for discrete ones. Second, in Sec. 3 we show that AIR allows for learning of generative models that decompose multi-object scenes into their underlying causes, e.g., the constituent objects, in an unsupervised manner. We demonstrate these capabilities on MNIST digits (Sec. 3.1), overlapping sprites and Omniglot glyphs (appendices H and G). We show that model structure can provide an important inductive bias that is not easily learned otherwise, leading to improved generalization. Finally, in Sec. 3.2 we demonstrate how our inference framework can be used to perform inference for a 3D rendering engine with unprecedented speed, recovering the counts, identities and 3D poses of complex objects in scenes with significant occlusion in a single forward pass of a neural network, providing a scalable approach to 'vision as inverse graphics'.  <ref type="table">y   h 2  h 3   z 1  z 2  z 3</ref> x h 1 <ref type="figure">Figure 1</ref>: Left: A single random variable z produces the observation x (the image). The relationship between z and x is specified by a model. Inference is the task of computing likely values of z given x.</p><p>Using an auto-encoding architecture, the model (red arrow) and its inference network (black arrow) can be trained end-to-end via gradient descent. Right: For most images of interest, multiple latent variables (e.g., multiple objects) give rise to the image. We propose an iterative, variable-length inference network (black arrows) that attends to one object at a time, and train it jointly with its model. The result is fast, feed-forward, interpretable scene understanding trained without supervision.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Inference</head><p>Despite their natural appeal, inference for most models in the form of Eq. 1 is intractable. We therefore employ an amortized variational approximation to the true posterior by learning a distribution q φ (z, n|x) parameterized by φ that minimizes the divergence KL [q φ (z, n|x)||p z θ (z, n|x)]. While amortized variational approximations have recently been used successfully in a variety of works <ref type="bibr" target="#b20">[21,</ref><ref type="bibr" target="#b8">9,</ref><ref type="bibr" target="#b17">18]</ref> the specific form of our model poses two additional difficulties. Trans-dimensionality: As a challenging departure from classical latent space models, the size of the latent space n (i.e., the number of objects) is a random variable itself, which necessitates evaluating p N (n|x) = p z θ (z, n|x)dz, for all n = 1...N . Symmetry: There are strong symmetries that arise, for instance, from alternative assignments of objects appearing in an image x to latent variables z i .</p><p>We address these challenges by formulating inference as an iterative process implemented as a recurrent neural network, which infers the attributes of one object at a time. The network is run for N steps and in each step explains one object in the scene, conditioned on the image and on its knowledge of previously explained objects (see <ref type="figure">Fig. 1</ref>).</p><p>To simplify sequential reasoning about the number of objects, we parameterize n as a variable length latent vector z pres using a unary code: for a given value n, z pres is the vector formed of n ones followed by one zero. Note that the two representations are equivalent. The posterior takes the following form:</p><formula xml:id="formula_0">q φ (z, z pres |x) = q φ (z n+1 pres = 0|z 1:n , x) n i=1 q φ (z i , z i pres = 1|x, z 1:i−1 ).<label>(2)</label></formula><p>q φ is implemented as a neural network that, in each step, outputs the parameters of the sampling distributions over the latent variables, e.g., the mean and standard deviation of a Gaussian distribution for continuous variables. z pres can be understood as an interruption variable: at each time step, if the network outputs z pres = 1, it describes at least one more object and proceeds, but if it outputs z pres = 0, no more objects are described, and inference terminates for that particular datapoint. Note that conditioning of z i |x, z 1:i−1 is critical to capture dependencies between the latent variables z i in the posterior, e.g., to avoid explaining the same object twice. The specifics of the networks that achieve this depend on the particularities of the models and we will describe them in detail in Sec. 3.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Learning</head><p>We can jointly optimize the parameters θ of the model and φ of the inference network by maximizing the lower bound on the marginal likelihood of an image under the model: <ref type="bibr">|x)</ref> with respect θ and φ. L is called the negative free energy. We provide an outline of how to construct an estimator of the gradient of this quantity below, for more details see <ref type="bibr" target="#b22">[23]</ref>.</p><formula xml:id="formula_1">log p θ (x) ≥ L(θ, φ) = E q φ log p θ (x,z,n) q φ (z,n,</formula><p>Computing a Monte Carlo estimate of ∂ ∂θ L is relatively straightforward: given a sample from the approximate posterior (z, z pres ) ∼ q φ (•|x) (i.e., when the latent variables have been 'filled in') we can readily compute ∂ ∂θ log p θ (x, z, n) provided p is differentiable in θ.</p><p>Computing a Monte Carlo estimate of ∂ ∂φ L is more involved. As discussed above, the RNN that implements q φ produces the parameters of the sampling distributions for the scene variables z and presence variables z pres . For a time step i, denote with ω i all the parameters of the sampling distributions of variables in (z i pres , z i ). We parameterize the dependence of this distribution on z 1:i−1 and x using a recurrent function R φ (•) implemented as a neural network such that (ω i , h i ) = R φ (x, h i−1 ) with hidden variables h. The full gradient is obtained via chain rule: ∂L/∂φ = i ∂L/∂ω i × ∂ω i /φ. Below we explain how to compute ∂L/∂ω i . We first rewrite our cost function as follows: <ref type="bibr">n,|x)</ref> . Let z i be an arbitrary element of the vector (z i , z i pres ) of type {what, where, pres}. How to proceed depends on whether z i is continuous or discrete.</p><formula xml:id="formula_2">L(θ, φ) = E q φ [ (θ, φ, z, n)] where (θ, φ, z, n) is defined as log p θ (x,z,n) q φ (z,</formula><p>Continuous: Suppose z i is a continuous variable. We use the path-wise estimator (also known as the 're-parameterization trick', e.g., <ref type="bibr" target="#b8">[9,</ref><ref type="bibr" target="#b22">23]</ref>), which allows us to 'back-propagate' through the random variable z i . For many continuous variables (in fact, without loss of generality), z i can be sampled as h(ξ, ω i ), where h is a deterministic transformation function, and ξ a random variable from a fixed noise distribution p(ξ) giving the gradient estimate:</p><formula xml:id="formula_3">∂L ∂ω i ≈ ∂ (θ, φ, z, n)/∂z i × ∂h/∂ω i .</formula><p>Discrete: For discrete scene variables (e.g., z i pres ) we cannot compute the gradient ∂L/∂ω i j by back-propagation. Instead we use the likelihood ratio estimator <ref type="bibr" target="#b17">[18,</ref><ref type="bibr" target="#b22">23]</ref>. Given a posterior sample (z, n) ∼ q φ (•|x) we can obtain a Monte Carlo estimate of the gradient:</p><formula xml:id="formula_4">∂L/∂ω i ≈ ∂ log q(z i |ω i )/∂ω i (θ, φ, z, n).</formula><p>In the raw form presented here this gradient estimate is likely to have high variance. We reduce its variance using appropriately structured neural baselines <ref type="bibr" target="#b17">[18]</ref> that are functions of the image and the latent variables produced so far.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Models and Experiments</head><p>We first apply AIR to a dataset of multiple MNIST digits, and show that it can reliably learn to detect and generate the constituent digits from scratch (Sec. 3.1). We show that this provides advantages over state-of-the-art generative models such as DRAW <ref type="bibr" target="#b2">[3]</ref> in terms of computational effort, generalization to unseen datasets, and the usefulness of the inferred representations for downstream tasks. We also apply AIR to a setting where a 3D renderer is specified in advance. We show that AIR learns to use the renderer to infer the counts, identities and poses of multiple objects in synthetic and real table-top scenes with unprecedented speed (Sec. 3.2 and appendix J).</p><p>Details of the AIR model and networks used in the 2D experiments are shown in <ref type="figure">Fig. 2</ref>. The generative model <ref type="figure">(Fig. 2</ref>, left) draws n ∼ Geom(ρ) digits {y i att }, scales and shifts them according to z i</p><p>where ∼ N (0, Σ) using spatial transformers, and sums the results {y i } to form the image. Each digit is obtained by first sampling a latent code z i what from the prior z i what ∼ N (0, 1) and propagating it through a decoder network. The learnable parameters of the generative model are the parameters of this decoder network. The AIR inference network <ref type="figure">(Fig. 2</ref>, middle) produces three sets of variables for each entity at every time-step: a 1-dimensional Bernoulli variable indicating the entity's presence, a C-dimensional distributed vector describing its class or appearance (z i what ), and a 3-dimensional vector specifying the affine parameters of its position and scale (z i where ). <ref type="figure">Fig. 2</ref> (right) shows the interaction between the inference and generation networks at every time-step. The inferred pose is used to attend to a part of the image (using a spatial transformer) to produce x i att , which is processed to produce the inferred code z i code and the reconstruction of the contents of the attention window y i att . The same pose information is used by the generative model to transform y i att to obtain y i . This contribution is only added to the canvas y if z i pres was inferred to be true. For the dataset of MNIST digits, we also investigate the behavior of a variant, difference-AIR (DAIR), which employs a slightly different recurrent architecture for the inference network (see <ref type="figure" target="#fig_6">Fig. 8</ref> in appendix). As opposed to AIR which computes z i via h i and x, DAIR reconstructs at every time step i a partial reconstruction x i of the data x, which is set as the mean of the distribution</p><formula xml:id="formula_5">p x θ (x|z 1 , z 2 , . . . , z i−1 )</formula><p>. We create an error canvas ∆x i = x i − x, and the DAIR inference equation R φ is then specified as We visualize empirical heatmaps of the attention windows' positions (red, and green for the first and second time-steps respectively). As expected, the policy is random. This suggests that the policy is spatial, as opposed to identity-or size-based.</p><formula xml:id="formula_6">(ω i , h i ) = R φ (∆x i , h i−1 ). x z what y 1 z 1 z where z 1 z what y 2 z 2 z where z 2 att y 1 att y 2 Decoder y h 2 h 3 z pres z 2 z pres z 3 z what z 2 z what z 3 z where z 2 z where z 3 x h 1 z pres z z what z z where z 1 x y z pres z what x att y att h i z where ... VAE y i i i i i i ...</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Multi-MNIST</head><p>We begin with a 50×50 dataset of multi-MNIST digits. Each image contains zero, one or two non-overlapping random MNIST digits with equal probability. The desired goal is to train a network that produces sensible explanations for each of the images. We train AIR with N = 3 on 60,000 such images from scratch, i.e., without a curriculum or any form of supervision by maximizing L with respect to the parameters of the inference network and the generative model. Upon completion of training we inspect the model's inferences (see <ref type="figure">Fig. 3</ref>, left). We draw the reader's attention to the following observations. First, the model identifies the number of digits correctly, due to the opposing pressures of (a) wanting to explain the scene, and (b) the cost that arises from instantiating an object under the prior. This is indicated by the number of attention windows in each image; we also plot the accuracy of count inference over the course of training <ref type="figure">(Fig. 3, above right)</ref>. Second, it locates the digits accurately. Third, the recurrent network learns a suitable scanning policy to ensure that different time-steps account for different digits <ref type="figure">(Fig. 3</ref>, below right). Note that we did not have to specify any such policy in advance, nor did we have to build in a constraint to prevent two time-steps from explaining the same part of the image. Finally, that the network learns to not use the second time-step when the image contains only a single digit, and to never use the third time-step (images contain a maximum of two digits). This allows for the inference network to stop upon encountering the first z i pres equaling 0, leading to potential savings in computation during inference. A video showing real-time inference using AIR has been included in the supplementary material. We also perform experiments on Omniglot ( <ref type="bibr" target="#b12">[13]</ref>, appendix G) to demonstrate AIR's ability to parse glyphs into elements resembling 'strokes', as well as a dataset of sprites where the scene's elements appear under significant overlap (appendix H). See appendices for details and results. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1.1">Strong Generalization</head><p>Since the model learns the concept of a digit independently of the positions or numbers of times it appears in each image, one would hope that it would be able to generalize, e.g., by demonstrating an understanding of scenes that have structural differences to training scenes. We probe this behavior with the following scenarios: (a) Extrapolation: training on images each containing 0, 1 or 2 digits and then testing on images containing 3 digits, and (b) Interpolation: training on images containing 0, 1 or 3 digits and testing on images containing 2 digits. The result of this experiment is shown in <ref type="figure" target="#fig_2">Fig. 4</ref>. An AIR model trained on up to 2 digits is effectively unable to infer the correct count when presented with an image of 3 digits. We believe this to be caused by the LSTM which learns during training never to expect more than 2 digits. AIR's generalization performance is improved somewhat when considering the interpolation task. DAIR by contrast generalizes well in both tasks (and finds interpolation to be slightly easier than extrapolation). A closely related baseline is the Deep Recurrent Attentive Writer (DRAW, <ref type="bibr" target="#b2">[3]</ref>), which like AIR, generates data sequentially. However, DRAW has a fixed and large number of steps (40 in our experiments). As a consequence generative steps do not correspond to easily interpretable entities, complex scenes are drawn faster and simpler ones slower. We show DRAW's reconstructions in <ref type="figure" target="#fig_2">Fig. 4</ref>. Interestingly, DRAW learns to ignore precisely one digit in the image. See appendix for further details of these experiments. A second motivation for the use of structured models is that their inferences about a scene provides useful representations for downstream tasks. We examine this ability by first training an AIR model on 0, 1 or 2 digits and then produce inferences for a separate collection of images that contains precisely 2 digits. We split this data into training and test and consider two tasks: (a) predicting the sum of the two digits (as was done in <ref type="bibr" target="#b0">[1]</ref>), and (b) determining if the digits appear in an ascending order. We compare with a CNN trained from the raw pixels, as well as interpretations produced by a convolutional autoencoder (CAE) and DRAW <ref type="figure" target="#fig_3">(Fig. 5)</ref>. We optimize each model's hyper-parameters (e.g. depth and size) for maximal performance. AIR achieves high accuracy even when data is scarce, indicating the power of its disentangled, structured representation. See appendix for further details.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1.2">Representational Power</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">3D Scenes</head><p>The experiments above demonstrate learning of inference and generative networks in models where we impose structure in the form of a variable-sized representation and spatial attention mechanisms. We now consider an additional way of imparting knowledge to the system: we specify the generative model via a 3D renderer, i.e., we completely specify how any scene representation is transformed to produce the pixels in an image. Therefore the task is to learn to infer the counts, identities and poses of several objects, given different images containing these objects and an implementation of a 3D renderer from which we can draw new samples. This formulation of computer vision is often called 'vision as inverse graphics' (see e.g., <ref type="bibr" target="#b3">[4,</ref><ref type="bibr" target="#b14">15,</ref><ref type="bibr" target="#b6">7]</ref>). This approach is less stable and much more susceptible to local minima. Right: AIR can learn to recover the counts, identities and poses of multiple objects in a 3D table-top scene. (e,g) Generated and real images. (f,h) AIR produces fast and accurate inferences which we visualize using the renderer.</p><p>The primary challenge in this view of computer vision is that of inference. While it is relatively easy to specify high-quality models in the form of probabilistic renderers, posterior inference is either extremely expensive or prone to getting stuck in local minima (e.g., via optimization or MCMC). In addition, probabilistic renderers (and in particular renderers) typically are not capable of providing gradients with respect to their inputs, and 3D scene representations often involve discrete variables, e.g., mesh identities. We address these challenges by using finite-differencing to obtain a gradient through the renderer, using the score function estimator to get gradients with respect to discrete variables, and using AIR inference to handle correlated posteriors and variable-length representations.</p><p>We demonstrate the capabilities of this approach by first considering scenes consisting of only one of three objects: a red cube, a blue sphere, and a textured cylinder (see <ref type="figure" target="#fig_4">Fig. 6a</ref>). Since the scenes only consist of single objects, the task is only to infer the identity (cube, sphere, cylinder) and pose (position and rotation) of the object present in the image. We train a single-step (N = 1) AIR inference network for this task. The network is only provided with unlabeled images and is trained to maximize the likelihood of those images under the model specified by the renderer. The quality of the inferred scene representations produced is visually inspected in <ref type="figure" target="#fig_4">Fig. 6b</ref>. The network accurately and reliably infers the identity and pose of the object present in the scene. In contrast, an identical network trained to predict the ground-truth identity and pose values of the training data (in a similar style to <ref type="bibr" target="#b10">[11]</ref>) has much more difficulty in accurately determining the cube's orientation <ref type="figure" target="#fig_4">(Fig. 6c</ref>). The supervised loss forces the network to predict the exact angle of rotation. However this is not identifiable from the image due to rotational symmetry, which leads to conditional probabilities that are multi-modal and difficult to represent using standard network architectures. We also compare with direct optimization of the likelihood from scratch for every test image <ref type="figure" target="#fig_4">(Fig. 6d)</ref>, and observe that this method is slower, less stable and more susceptible to local minima. So not only does amortization reduce the cost of inference, but it also overcomes the pitfalls of independent gradient optimization.</p><p>We finally consider a more complex setup, where we infer the counts, identities and positions of a variable number of crockery items, as well as the camera position, in a table-top scene. This would be of critical importance to a robot, say, which is tasked with clearing the table. The goal is to learn to perform this task with as little supervision as possible, and indeed we observe that with AIR it is possible to do so with no supervision other than a specification of the renderer. We show reconstructions of AIR's inferences on generated data, as well as real images of a table with varying numbers of plates, in <ref type="figure" target="#fig_4">Fig. 6</ref> and <ref type="figure">Fig. 7</ref>. AIR's inferences of counts, identities and positions are accurate for the most part. For transfer to real scenes we perform random color and size pertubations to rendered objects during training, however we note that robust transfer remains a challenging problem in general. We provide a quantitative comparison of AIR's inference robustness and accuracy on generated scenes with that of a fully supervised network in <ref type="figure">Fig. 7</ref>. We consider two scenarios: one where each object type only appears exactly once, and one where objects can repeat in the scene. A naive supervised setup struggles with object repetitions or when an arbitrary ordering of the objects is imposed by the labels, however training is more straightforward when there are no repetitions. AIR achieves competitive reconstruction and counts despite the added difficulty of object repetitions. Step Frequency Pan Cup Plate <ref type="figure">Figure 7</ref>: 3D scenes details: Left: Ground-truth object and camera positions with inferred positions overlayed in red (note that inferred cup is closely aligned with ground-truth, thus not clearly visible). We demonstrate fast inference of all relevant scene elements using the AIR framework. Middle: AIR produces significantly better reconstructions and count accuracies than a supervised method on data that contains repetitions, and is even competitive on simpler data. Right: Heatmap of object locations at each time-step (top). The learned policy appears to be more dependent on identity (bottom).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Related Work</head><p>Deep neural networks have had great success in learning to predict various quantities from images, e.g., object classes <ref type="bibr" target="#b9">[10]</ref>, camera positions <ref type="bibr" target="#b7">[8]</ref> and actions <ref type="bibr" target="#b19">[20]</ref>. These methods work best when large labeled datasets are available for training. At the other end of the spectrum, e.g., in 'vision as inverse graphics', only a generative model is specified in advance and prediction is treated as an inference problem, which is then solved using MCMC or message passing at test-time. These models range from highly specified <ref type="bibr" target="#b16">[17,</ref><ref type="bibr" target="#b15">16]</ref>, to partially specified <ref type="bibr" target="#b27">[28,</ref><ref type="bibr" target="#b23">24,</ref><ref type="bibr" target="#b24">25]</ref>, to largely unspecified <ref type="bibr" target="#b21">[22]</ref>. Inference is very challenging and almost always the bottle-neck in model design.</p><p>Several works exploit data-driven predictions to empower the 'vision as inverse graphics' paradigm <ref type="bibr" target="#b4">[5,</ref><ref type="bibr" target="#b6">7]</ref>. For instance, in PICTURE <ref type="bibr" target="#b10">[11]</ref>, the authors use a deep network to distill the results of slow MCMC, speeding up predictions at test-time. Variational auto-encoders <ref type="bibr" target="#b20">[21,</ref><ref type="bibr" target="#b8">9]</ref> and their discrete counterparts <ref type="bibr" target="#b17">[18]</ref> made the important contribution of showing how the gradient computations for learning of amortized inference and generative models could be interleaved, allowing both to be learned simultaneously in an end-to-end fashion (see also <ref type="bibr" target="#b22">[23]</ref>). Works like that of <ref type="bibr" target="#b11">[12]</ref> aim to learn disentangled representations in an auto-encoding framework using special network structures and / or careful training schemes. It is also worth noting that attention mechanisms in neural networks have been studied in discriminative and generative settings, e.g., <ref type="bibr" target="#b18">[19,</ref><ref type="bibr" target="#b5">6,</ref><ref type="bibr" target="#b2">3]</ref>.</p><p>AIR draws upon, extends and links these ideas. By its nature AIR is also related to the following problems: counting <ref type="bibr" target="#b13">[14,</ref><ref type="bibr" target="#b26">27]</ref>, pondering <ref type="bibr" target="#b1">[2]</ref>, and gradient estimation through renderers <ref type="bibr" target="#b14">[15]</ref>. It is the combination of these elements that unlocks the full capabilities of the proposed approach.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Discussion</head><p>In this paper our aim has been to learn unsupervised models that are good at scene understanding, in addition to scene reconstruction. We presented several principled models that learn to count, locate, classify and reconstruct the elements of a scene, and do so in a fraction of a second at test-time. The main ingredients are (a) building in meaning using appropriate structure, (b) amortized inference that is attentive, iterative and variable-length, and (c) end-to-end learning.</p><p>We demonstrated that model structure can provide an important inductive bias that gives rise to interpretable representations that are not easily learned otherwise. We also showed that even for sophisticated models or renderers, fast inference is possible. We do not claim to have found an ideal model for all images; many challenges remain, e.g., the difficulty of working with the reconstruction loss and that of designing models rich enough to capture all natural factors of variability.</p><p>Learning in AIR is most successful when the variance of the gradients is low and the likelihood is well suited to the data. It will be of interest to examine the scaling of variance with the number of objects and alternative likelihoods. It is straightforward to extend the framework to semi-or fully-supervised settings. Furthermore, the framework admits a plug-and-play approach where existing state-of-the-art detectors, classifiers and renderers are used as sub-components of an AIR inference network. We plan to investigate these lines of research in future work.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A Stochastic Gradient Estimators</head><p>In this section, we give further details behind the equations in Sec. 2. We simplify notation by not referencing the model parameters θ and considering a single latent z at a time. Assume we have a function (z) and distribution q φ (z); we wish to estimate ∇ φ E[ (z)].</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A.1 Reparameterization trick</head><p>As per the main body, we supposed the existence of a differentiable function h and random variable ξ with fixed noise distribution p ξ (•) such that h(ξ, φ) ∼ q φ (•). It follows that:</p><formula xml:id="formula_7">∂ ∂φ E z∼q φ [ (z)] = ∂ ∂φ E ξ∼p ξ [ (h(ξ, φ))] =E ξ∼p ξ ∂ ∂φ (h(ξ, φ)) =E ξ∼p ξ ∂ ∂z ∂h ∂φ =E z∼q φ ∂ ∂z ∂h ∂φ ≈ ∂ (z) ∂z ∂h(ξ, φ) ∂φ .<label>(3)</label></formula><p>In other words, an estimate of the gradient can be recovered by forwarding sampling the model by using the reparameterization given by h, and backpropagating normally through h.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A.2 Likelihood ratio estimator</head><p>The likelihood ratio method simply uses the equality:</p><formula xml:id="formula_8">∂ log q φ (z) ∂φ = ∂q φ (z) ∂φ q φ (z)<label>(4)</label></formula><p>to rewrite an integral as an expectation. Assuming that</p><formula xml:id="formula_9">∂q φ (z) ∂φ</formula><p>exists and is continuous, we have:</p><formula xml:id="formula_10">∂ ∂φ q φ (z) (z)∂z = z ∂q φ (z) ∂φ q φ (z)dz = z ∂ log φ (z) ∂θ φ (z) (z)dz = E q φ (z) ∂ log q φ (z) ∂φ (z) ≈ ∂ log q φ (z) ∂φ (z).<label>(5)</label></formula><p>Note that if (z) is a constant with respect to z, then the expression is clearly 0, since the integral evaluates to the same constant.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B Prior for Unary Encoding</head><p>Recall that we can encode the number of objects n as a variable length unary code vector z pres defined by z i pres = 1 for i ≤ n, and z n+1 pres = 0 (more generally, it can be useful to implicitly define z j pres = 0, for j &gt; n). Consider an arbitrary distribution p(•) over n, and denote µ ≥n = k≥n p(k) the probability that there are at least n objects. We define a joint probability distribution for z pres and show it is consistent with p(n). µ ≥(i−1) for i ≥ 2, and p(z 1 pres ) = µ ≥1 . Note that if z i pres = 0 for any i, it follows immediately that z j pres = 0 for j ≥ i. The sampled vector is therefore a correct unary code. Furthermore, P (max{i : z i pres = 1} = n) = P (z 1 pres = 1, z 2 pres = 1, . . . , z n pres = 1, z n+1</p><formula xml:id="formula_11">pres = 0) = n i=1 P (z i pres = 1|z i−1 pres = 1) P (z n+1 pres = 0|z n pres = 1) = µ ≥1 × µ ≥2 µ ≥1 × µ ≥3 µ ≥2 . . . µ ≥n µ ≥(n−1) × 1 − µ ≥(n+1) µ ≥n = µ ≥n − µ ≥(n+1) = p(n)</formula><p>It follows that for z pres following the distribution specified above, the corresponding maximum index is distributed according to p(n) as desired.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C Details of 2D Experiments</head><p>All experiments were performed with a batch size of 64. Inference networks and decoders were trained using a learning rate of 10 −4 and baselines were trained using a higher learning rate of −3 . LSTMs had 256 cell units and object appearances were coded with 50 units. Images were normalized to hold values between 0 and 1 and the likelihood function was a Gaussian with fixed standard deviation equal to 0.3. The prior p(n) was fixed to a geometric distribution which favors sparse reconstructions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>D Details of the DAIR Network</head><p>We assume that the renderer likelihood p x (x|z 1 , z 2 , . . . , z i ) has a link function I which maps a sufficient statistic h i to the mean; h i can be iteratively updated from h i−1 and z i−1 . this is the case for instance for Gaussian and Bernoulli distributions (where h i is respectively taken to be the mean and log-odds of the distribution). In DAIR, we use the error ∆x i between the partial reconstruction I(h i−1 ) and the data x as inputs to a feed-forward neural network which predicts z i , z i pres . DAIR can be thought of as a special case of AIR with additional structure; namely, the recurrent aspect of AIR is fixed to become a canvas-reconstruction network; see <ref type="figure" target="#fig_6">Fig. 8</ref>   <ref type="table">Table 1</ref>: Comparisons with state-of-the-art. DRAW achieves lower scores than AIR and DAIR on up to 2 digits but is outperformed by DAIR when generalizing to 3 digits.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Data</head><p>Step 1</p><p>Step 2</p><p>Step 3</p><p>Step 4 <ref type="figure">Figure 9</ref>: Omniglot: AIR reconstructions at every time-step. AIR uses variable numbers of strokes for digits of varying complexity.</p><p>The convolutional autoencoder uses a sequence of 3 64 × (6 × 6) (for slightly increased performance over 5×5 filters) convolutions with 2×2 max-pooling layers for the encoding, and 3 full convolutions (of the same sizes) and a 2 × 2 nearest neighbor upsampler for the deconvolution.</p><p>The embeddings created by AIR, DRAW, or CAE are fed through a 4-layer network (each with 512 units) to produce the 19-way prediction of the sum or a 2-way prediction of the order.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>F DRAW Comparisons</head><p>We compare AIR and DAIR to a state of the art DRAW network with 40 drawing steps with 4 latent units per time step, 400 LSTM hidden units, spatial transformer <ref type="bibr" target="#b5">[6]</ref> attention module, and single read and write heads of size 16 × 16. We report free energy on two test sets: a test dataset with 0, 1 or 2 digits, and another with images with precisely 3 digits. The likelihood model was in all cases Gaussian with fixed standard deviation of 0.3. DRAW outperforms AIR and DAIR on the 0/1/2 dataset; this is likely due to the fact that DRAW uses many more drawing steps (40) than AIR and thus has an excellent statistical model of single digits. DRAW however does not conceptually understand them as distinct units, as evidenced by its poor generalization on the 3-digits dataset, where DAIR has both better score, and more meaningful reconstruction: DAIR partially generalizes to a number of digit never seen <ref type="figure" target="#fig_2">(Fig. 4)</ref>, while DRAW interestingly learns to perfectly ignore exactly one digit in the image (see <ref type="figure" target="#fig_2">Fig. 4</ref>). More generally, the VAE subroutine present in AIR could be replaced by a DRAW network, thus leading to a 'best of both worlds' model with excellent single digit model and understanding of a scene in terms of its constituent parts.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>G Omniglot Experiments</head><p>We also investigate the behavior of AIR on the Omniglot dataset <ref type="bibr" target="#b12">[13]</ref> which contains 1623 different handwritten characters from 50 different alphabets. Each of the 1623 characters was drawn online via Amazon's Mechanical Turk by 20 people. This means that the data was produced according a process (pen strokes) that is not directly reflected in the structure of our generative model. It is therefore interesting to examine the outcome of learning under mis-specification. We train the model from the previous section, this time allowing for a maximum of up to 4 inference time-steps per image. <ref type="figure">Fig. 9</ref> shows that by using different numbers of time-steps to describe characters of varying complexity, AIR discovers a representation consisting of spatially coherent elements resembling strokes, despite not exploiting stroke labels in the data or building in the physics of strokes, in contrast with <ref type="bibr" target="#b12">[13]</ref>.</p><p>Further results can be found in the supplementary video.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>H Sprites Experiments</head><p>We also consider a 50×50 dataset of sprites: red circles, green squares and blue diamonds. Each image in the dataset contains zero, one or two sprites (see <ref type="figure">Fig. 10a</ref>). The images are composed additively (sprites do not occlude each other). We use the exact same model structure as for the multi-MNIST dataset.</p><p>At the end of unsupervised training, AIR successfully learns about the underlying causes of the scenes (namely, the sprites), as well as their counts and locations, and also produces convincing reconstructions (see <ref type="figure">Fig. 10b</ref>). Note that the inference network correctly detects the correct number of sprites even when two overlapping sprites of the same type and color appear in the same image <ref type="figure">(Fig. 10a,b, images 1 and 3)</ref>. Also note that the reconstructions are accurate, meaning that the inference network successfully produces the codes for each sprite despite the presence of the other sprites in its field of view. <ref type="figure">Fig. 10c</ref> displays a collection of samples from the model after training. We display quantitative evaluation of the network's counting accuracy in <ref type="figure">Fig. 11</ref>, reconstructions over the course of learning in <ref type="figure" target="#fig_8">Fig. 12</ref>, and a visualization of its scanning policy in <ref type="figure" target="#fig_9">Fig. 13</ref>.</p><p>Note that these tasks can only be successfully achieved once the inference network has learned a sensible policy for scanning the image, e.g., one in which every object is attended to only once. However the network must break multiple symmetries to achieve this, e.g., it does not matter which object it explains first. In <ref type="figure" target="#fig_9">Fig. 13</ref> we visualize the learned scanning policy for 3 different runs of training (only differing in the random seed). In each case a unique policy is learned, and the policy appears to be spatial (as opposed to one that is based on digit identity or size).  : Sprites scanning policies: Empirical heatmaps of where the attention windows go to (red, and green for the first and second time-steps respectively). As expected, the policy is random. Each figure is for a different inference network that has been trained from scratch using a different seed. This suggests that the policy is spatial, as opposed to identity-or size-based.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>I Details of 3D Scene Experiments</head><p>The experiments in section 3.2 were performed using the rendering capabilities of the MuJoCo physics simulator <ref type="bibr" target="#b25">[26]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>I.1 Gradient estimation</head><p>Differentiation of MuJoCo's graphics engine was performed using forward finite-differencing (with a constant = 10 −4 ) with respect to the scene configuration. This is a generic procedure which would work for any graphics engine; we chose MuJoCo because it is fast (using only the fixed functionality of OpenGL) and because scenes are conveniently parameterized. Interestingly, despite the coarse 8-bit output of OpenGL, quantization errors appeared to average out reasonably well over the pixels.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>I.2 Scene generation</head><p>Single object scenes: For the results shown in <ref type="figure" target="#fig_4">Fig. 6</ref> we created a scene that contained a MuJoCo box geom representing the table, 3 'objects' (also in the form of MuJoCo geoms; cube, sphere, textured cylinder), and a fixed camera. The objects could be moved in the plane of the table and rotated along the axis orthogonal to it (i.e. 3 degrees of freedom per object). We created random scenes containing at most one object by randomly sampling position, rotation angle, object presence (visibility) and object type. (Geoms were made invisible by moving them out of the field of view of the camera.) An illustration is shown in <ref type="figure">Fig.</ref> 14.</p><p>Tabletop scenes: For the results shown in <ref type="figure" target="#fig_4">Fig. 6</ref> and 7 we used scenes with a box geom for the table, and nine mesh geoms for the crockery items. The cup, pan, and plate were each replicated three times to allow for arbitrary three-objects scenes. Each geom had three degrees of freedom (position in the table plane and rotation). Random scenes with up to N = 3 objects were created by uniformly <ref type="figure" target="#fig_2">Figure 14</ref>: Left: Illustration of the setup for single-object scenes similar to <ref type="figure">Fig. 7</ref> in the main text. The illustration shows the fixed camera, the ground truth object (textured cylinder), and an example inference (transparent red). Right: Rendering from camera as fed into the inference network (before downsampling).</p><p>sampling position, rotation angle, object presence, and object type three times. As for the single objects were rendered invisible by moving them outside of the field of view of the camera.</p><p>We experimented with two versions of the scene: one with a fixed camera, and one version where the camera could be moved in an orbit around the table (i.e. one degree of freedom). We discuss the experiment with the fixed camera in the main text. For the latter set of scenes, the camera position was also chosen randomly and the image was rendered from the random camera position. Camera movement was restricted to ± 40 degrees from the central position. In this experiment the model had to learn to infer the camera position in addition to the objects on the table. The montage in <ref type="figure">Fig. 7</ref> in the main text shows a ground truth scene (with camera) and the inferred identities and positions of the objects as well as the inferred position of the camera. We show several examples of random scenes with variable camera and the associated inferences in <ref type="figure" target="#fig_3">Fig. 15</ref>. For the most part the network infers all scene parameters reliably.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Image preprocessing:</head><p>We rendered all scene images at 128 × 128 pixels. We down-sampled scene images to 32 × pixels for input to the network.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>I.3 Model</head><p>We trained a network to perform inference in the following fixed generative model:</p><formula xml:id="formula_12">p(x, z 1:N pres , z 1:N where , z 1:N what ) = (6) p(x|z 1:N pres , z 1:N where , z 1:N what ) N i=1 p(z i pres )p(z i what )p(z i where ),</formula><p>where z i pres is the visibility indicator: z i pres ∼ Bernoulli(α) for object i; z where ∈ R 3 indicates position and rotation angle: z i where ∼ N (0, Σ where ); and z i what is a three-valued discrete variable indicating the object type (mesh / geom type): z i what ∼ Discrete(β). The marginal distribution over scenes under this model is the same as the marginal distribution under a model of form described in Section 2 in the main text where p(n) = Binomial(N, α) and n = N i=1 z i . For the variable camera scenes the model included an additional random variable z cam ∈ R where z cam ∼ N (0, σ 2 cam ). To evaluate the likelihood term p(x|z) we (1) render the scene description using the MuJoCo rendering engine to produce a high-resolution image y; (2) blur the resulting image y as well as x using a fixed-with blur kernel; (3) compute N (x|y, Iσ 2</p><p>x ).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>J Inference Speed</head><p>For the MNIST experiments, upon completion of training each inference step takes 5.6 milliseconds on average to execute on an Nvidia Quadro K4000 GPU (a step corresponds to inference of state for a single object), in other words up to around 17 milliseconds per image for images of 3 digits. Therefore running at around 59 frames per second, inference is significantly faster than real-time.</p><p>For 3D scenes, the equivalent numbers are around 2.3 milliseconds per step and 8 milliseconds per image (due to absence of spatial transformers) on a CPU. Gradient-based optimization is slower, taking 5 milliseconds per gradient step per object, and tens or hundreds of steps per image, depending on the choice of optimizer.</p><p>Training for the MNIST model converges in around 2 days, and in around 3 days for the 3D scenes.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :Figure 3 :</head><label>23</label><figDesc>AIR in practice: Left: The assumed generative model. Middle: AIR inference for this model. The contents of the grey box are input to the decoder. Right: Interaction between the inference and generation networks at every time-step. In our experiments the relationship between x i att and y i att is modeled by a VAE, however any generative model of patches could be used (even, e.g., DRAW). Multi-MNIST learning: Left above: Images from the dataset. Left below: Reconstructions at different stages of training along with a visualization of the model's attention windows. The 1st, 2nd and 3rd time-steps are displayed using red, green and blue borders respectively. A video of this sequence is provided in the supplementary material. Above right: Count accuracy over time. The model detects the counts of digits accurately, despite having never been provided supervision. Below right: The learned scanning policy for 3 different runs of training (only differing in the random seed).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 4 :</head><label>4</label><figDesc>Strong generalization: Left: Reconstructions of images with 3 digits made by DAIR trained on 0, 1 or 2 digits, as well as a comparison with DRAW. Right: Variational lower bound, and generalizing / interpolating count accuracy. DAIR out-performs both DRAW and AIR at this task.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 5 :</head><label>5</label><figDesc>Representational power: AIR achieves high accuracy using only a fraction of the labeled data. Left: summing two digits. Right: detecting if they appear in increasing order. Despite producing comparable reconstructions, CAE and DRAW inferences are less interpretable than AIR's and therefore lead to poorer downstream performance.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 6 :</head><label>6</label><figDesc>3D objects: Left: The task is to infer the identity and pose of a single 3D object. (a) Images from the dataset. (b) Unsupervised AIR reconstructions. (c) Supervised reconstructions. Note poor performance on cubes due to their symmetry. (d) Reconstructions after direct gradient descent.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 8 :</head><label>8</label><figDesc>AIR vs. DAIR: Left: The standard AIR architecture. Right: The DAIR architecture. At each time-step i, the latent variables produced so far are used to perform a partial rendering of the scene. The difference of this partial rendering from the image under question is used infer z i pres , z i what and z i where in the current time-step. Let p(z i pres = 1|z i−1 pres ) = z i−1 pres µ ≥i</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 10 :Figure 11 :</head><label>1011</label><figDesc>Sprites overview: (a) Images from the dataset. (b) AIR reconstructions. We visualize the model's attention at every time-step (inferred object boundaries) in white. (c) A selection of samples from the learned model. Sprites quantitative results: Left: Variational lower bound over the course of training. Right: Sprite count accuracy.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 12 :</head><label>12</label><figDesc>Sprites learning: Top: Images from the dataset. Bottom: Reconstructions at different points during training. A video of this sequence is included in the supplementary material.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Figure 13</head><label>13</label><figDesc>Figure 13: Sprites scanning policies: Empirical heatmaps of where the attention windows go to (red, and green for the first and second time-steps respectively). As expected, the policy is random. Each figure is for a different inference network that has been trained from scratch using a different seed. This suggests that the policy is spatial, as opposed to identity-or size-based.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head></head><label></label><figDesc>for more details. E Details of AIR vs. CNN vs. CAE vs. DRAW Experiments</figDesc><table><row><cell>Model</cell><cell cols="2">Free Energy</cell></row><row><cell></cell><cell cols="2">Up to 2 digits Only 3 digits</cell></row><row><cell>DRAW</cell><cell>−637</cell><cell>−406</cell></row><row><cell>AIR</cell><cell>−620</cell><cell>−316</cell></row><row><cell>DAIR</cell><cell>−611</cell><cell>−424</cell></row><row><cell cols="3">The convolutional neural network uses a 64×(5×5)-64×(5×5)-64×(5×5)-512 architecture.</cell></row></table><note></note></figure>
		</body>
		<back>
			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"> <ref type="table">Decoder   y   h 2  h 3   z pres  z 2  z pres  z 3  z what  z  z what  z 3  z where  z 2  z where  z 3   x   h 1   z pres  z 1  z what  z 1 z where  z 1  Decoder   x  y   z pres  z 1  z pres  z 2  z pres  z 3  z what  z 1  z what  z 2  z what  z 3  z where  z 1  z where  z 2  z where  z 3</ref> <p>diff diff </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>I.4 Network</head><p>The AIR inference network for our experiments is a standard recurrent network (no LSTM) that is run for a fixed number of steps (N = 1 or N = 3). In each step the network computes:</p><p>where the ω i represent the parameters of the sampling distributions for the random variables: Bernoulli for z pres ; Discrete for z what ; and Gaussian for z where . For the experiments with random camera angle we use a separate network that computes ω cam = F (x) and we provide the sampled camera angle as additional input to R at each time step.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>I.5 Supervised learning</head><p>For the baselines trained in a supervised manner we use the ground truth scene variables z 1:N pres , z 1:N where , z <ref type="bibr">1:N</ref> what that underly the training scene images as labels and train a network of the same form as the inference network to maximize the conditional log likelihood of the ground truth scene variables given the image.</p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Multiple Object Recognition with Visual Attention</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jimmy</forename><surname>Ba</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Volodymyr</forename><surname>Mnih</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Koray</forename><surname>Kavukcuoglu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICLR</title>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">Adaptive computation time for recurrent neural networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alex</forename><surname>Graves</surname></persName>
		</author>
		<idno>abs/1603.08983</idno>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">DRAW: A Recurrent Neural Network For Image Generation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Karol</forename><surname>Gregor</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ivo</forename><surname>Danihelka</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alex</forename><surname>Graves</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Danilo</forename><surname>Rezende</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Daan</forename><surname>Wierstra</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICML</title>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ulf</forename><surname>Grenander</surname></persName>
		</author>
		<title level="m">Pattern Synthesis: Lectures in Pattern Theory</title>
		<imprint>
			<date type="published" when="1976" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">The &quot;wake-sleep&quot; algorithm for unsupervised neural networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Geoffrey</forename><forename type="middle">E</forename><surname>Hinton</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><surname>Dayan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Brendan</forename><forename type="middle">J</forename><surname>Frey</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Randford</forename><forename type="middle">M</forename><surname>Neal</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Science</title>
		<imprint>
			<biblScope unit="volume">268</biblScope>
			<biblScope unit="issue">5214</biblScope>
			<date type="published" when="1995" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Spatial Transformer Networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Max</forename><surname>Jaderberg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Karen</forename><surname>Simonyan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andrew</forename><surname>Zisserman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Koray</forename><surname>Kavukcuoglu</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">The Informed Sampler: A Discriminative Approach to Bayesian Inference in Generative Computer Vision Models</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Varun</forename><surname>Jampani</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sebastian</forename><surname>Nowozin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Matthew</forename><surname>Loper</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><forename type="middle">V</forename><surname>Gehler</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
		<respStmt>
			<orgName>CVIU</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">PoseNet: A Convolutional Network for Real-Time 6-DOF Camera Relocalization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alex</forename><surname>Kendall</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Matthew</forename><surname>Grimes</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Roberto</forename><surname>Cipolla</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICCV</title>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Diederik</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Max</forename><surname>Kingma</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Welling</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1312.6114</idno>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
	<note type="report_type">Auto-encoding variational Bayes. arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">ImageNet Classification with Deep Convolutional Neural Networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alex</forename><surname>Krizhevsky</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ilya</forename><surname>Sutskever</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Geoffrey</forename><forename type="middle">E</forename><surname>Hinton</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">NIPS 25</title>
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Picture: A probabilistic programming language for scene perception</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Tejas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pushmeet</forename><surname>Kulkarni</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joshua</forename><forename type="middle">B</forename><surname>Kohli</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vikash</forename><forename type="middle">K</forename><surname>Tenenbaum</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Mansinghka</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CVPR</title>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Deep Convolutional Inverse Graphics Network</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Tejas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">William</forename><forename type="middle">F</forename><surname>Kulkarni</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pushmeet</forename><surname>Whitney</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Josh</forename><surname>Kohli</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Tenenbaum</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">NIPS 28</title>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Human-level concept learning through probabilistic program induction</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Brenden</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ruslan</forename><surname>Lake</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joshua</forename><forename type="middle">B</forename><surname>Salakhutdinov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Tenenbaum</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Science</title>
		<imprint>
			<biblScope unit="volume">350</biblScope>
			<biblScope unit="issue">6266</biblScope>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Learning To Count Objects in Images</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Victor</forename><surname>Lempitsky</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andrew</forename><surname>Zisserman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">NIPS 23</title>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">OpenDR: An Approximate Differentiable Renderer</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Matthew</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><forename type="middle">J</forename><surname>Loper</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Black</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ECCV</title>
		<imprint>
			<date type="published" when="2014" />
			<biblScope unit="volume">8695</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Approximate Bayesian Image Interpretation using Generative Probabilistic Graphics Programs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vikash</forename><surname>Mansinghka</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tejas</forename><surname>Kulkarni</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yura</forename><surname>Perov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Josh</forename><surname>Tenenbaum</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">NIPS 26</title>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">BLOG: Probabilistic Models with Unknown Objects</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Brian</forename><surname>Milch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bhaskara</forename><surname>Marthi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stuart</forename><surname>Russell</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Sontag</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Daniel</forename><forename type="middle">L</forename><surname>Ong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andrey</forename><surname>Kolobov</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Joint Conference on Artificial Intelligence</title>
		<imprint>
			<date type="published" when="2005" />
			<biblScope unit="page" from="1352" to="1359" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Neural Variational Inference and Learning</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andriy</forename><surname>Mnih</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Karol</forename><surname>Gregor</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICML</title>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Recurrent Models of Visual Attention</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Volodymyr</forename><surname>Mnih</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nicolas</forename><surname>Heess</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alex</forename><surname>Graves</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Koray</forename><surname>Kavukcuoglu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">NIPS 27</title>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Human-level control through deep reinforcement learning</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Volodymyr</forename><surname>Mnih</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Koray</forename><surname>Kavukcuoglu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Silver</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andrei</forename><forename type="middle">A</forename><surname>Rusu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joel</forename><surname>Veness</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Marc</forename><forename type="middle">G</forename><surname>Bellemare</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alex</forename><surname>Graves</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Martin</forename><surname>Riedmiller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andreas</forename><forename type="middle">K</forename><surname>Fidjeland</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Georg</forename><surname>Ostrovski</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Shane Legg, and Demis Hassabis</title>
		<meeting><address><addrLine>Charles Beattie, Amir Sadik, Ioannis Antonoglou, Helen King, Dharshan Kumaran, Daan Wierstra</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2015" />
			<biblScope unit="volume">518</biblScope>
		</imprint>
	</monogr>
	<note>Stig Petersen</note>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Stochastic Backpropagation and Approximate Inference in Deep Generative Models</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Danilo</forename><forename type="middle">J</forename><surname>Rezende</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shakir</forename><surname>Mohamed</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Daan</forename><surname>Wierstra</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICML</title>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Deep Boltzmann Machines</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ruslan</forename><surname>Salakhutdinov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Geoffrey</forename><surname>Hinton</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">AISTATS</title>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Gradient Estimation Using Stochastic Computation Graphs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">John</forename><surname>Schulman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nicolas</forename><surname>Heess</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Theophane</forename><surname>Weber</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pieter</forename><surname>Abbeel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">NIPS 28</title>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Tensor Analyzers</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yichuan</forename><surname>Tang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ruslan</forename><surname>Salakhutdinov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Geoffrey</forename><surname>Hinton</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICML</title>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Learning Generative Models With Visual Attention</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yichuan</forename><surname>Tang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nitish</forename><surname>Srivastava</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ruslan</forename><surname>Salakhutdinov</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">NIPS 27</title>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">MuJoCo: A physics engine for model-based control</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Emanuel</forename><surname>Todorov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tom</forename><surname>Erez</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yuval</forename><surname>Tassa</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICIRS</title>
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jianming</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shuga</forename><surname>Ma</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mehrnoosh</forename><surname>Sameki</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stan</forename><surname>Sclaroff</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Margrit</forename><surname>Betke</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zhe</forename><surname>Lin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Xiaohui</forename><surname>Shen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Brian</forename><surname>Price</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Radomír</forename><surname>Mȇch</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Salient Object Subitizing. In CVPR</title>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<monogr>
		<title level="m" type="main">A Stochastic Grammar of Images. Foundations and Trends in Computer Graphics and Vision</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chun</forename><surname>Song</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Zhu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Mumford</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2006" />
			<biblScope unit="volume">2</biblScope>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
