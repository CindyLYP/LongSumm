<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/cindy/tmp/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Towards Multiverse Databases</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alana</forename><surname>Marzoev</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Harvard University</orgName>
							</affiliation>
							<affiliation key="aff0">
								<orgName type="institution">Harvard University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lara</forename><surname>Timbó Araújo</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Harvard University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Malte</forename><surname>Schwarzkopf</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Harvard University</orgName>
							</affiliation>
							<affiliation key="aff0">
								<orgName type="institution">Harvard University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Samyukta</forename><surname>Yagati</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Harvard University</orgName>
							</affiliation>
							<affiliation key="aff0">
								<orgName type="institution">Harvard University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eddie</forename><surname>Kohler</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Harvard University</orgName>
							</affiliation>
							<affiliation key="aff0">
								<orgName type="institution">Harvard University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Robert</forename><surname>Morris</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Harvard University</orgName>
							</affiliation>
							<affiliation key="aff0">
								<orgName type="institution">Harvard University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Frans</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Harvard University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kaashoek</forename><surname>Sam</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Harvard University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mit</forename><surname>Csail</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Harvard University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lara</forename><forename type="middle">Timbó</forename><surname>Araújo</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Harvard University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">Frans</forename><surname>Kaashoek</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Harvard University</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Towards Multiverse Databases</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="DOI">10.1145/3317550.3321425</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-01-31T12:43+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
				<p>A multiverse database transparently presents each application user with a flexible, dynamic, and independent view of shared data. This transformed view of the entire database contains only information allowed by a centralized and easily-auditable privacy policy. By enforcing the privacy policy once, in the database, multiverse databases reduce programmer burden and eliminate many frontend bugs that expose sensitive data. Multiverse databases&apos; per-user transformations risk expensive queries if applied dynamically on reads, or impractical storage requirements if the database proactively materializes policy-compliant views. We propose an efficient design based on a joint dataflow across &quot;universes&quot; that combines global, shared computation and cached state with individual, per-user processing and state. This design, which supports arbitrary SQL queries and complex policies, imposes no performance overhead on read queries. Our early prototype supports thousands of parallel universes on a single server.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Most web services store users' private, sensitive information in shared backend stores. Any frontend can access the whole store, regardless of the application user consuming the results. Therefore, frontend code is responsible for permission checks and privacy-preserving transformations that protect users' data. This is dangerous and error-prone, and has caused many realworld bugs in applications like HotCRP <ref type="bibr" target="#b25">[25]</ref>, WordPress <ref type="bibr" target="#b27">[27]</ref>, and Facebook <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b3">4]</ref>: any omitted or incorrect check can leak <ref type="figure">Figure 1</ref>. Currently, web applications' entire frontend code is trusted (amber) and can query any backend data (left, (a)). A multiverse database applies a privacy policy (PP) to generate transformed, logical per-user databases, in which the untrusted applications' queries can only see permissible data (right, (b)).</p><p>private data, so the trusted computing base (TCB) effectively includes the entire application.</p><p>It would be safer and easier to specify and transparently enforce access policies once, at the shared backend store interface. Although state-of-the-art databases have security features designed for exactly this purpose, such as row-level access policies and grants of views, these features are too limiting for many web applications. Application privacy policies are often data-dependent in ways incompatible with current row-and column-level access control, or allow the exposure of aggregate or transformed information that access control prevents. Prior research solutions based on query interposition and information flow control are slow, complex, or require impractical changes to the application programming model ( §2).</p><p>In this paper, we make the case for multiverse databases, a flexible, easy-to-use, and performant paradigm that enforces declarative privacy policies within the store. The database applies policies for each user, filtering and transforming the base data to form a user-specific "parallel universe" database that contains only data that the user is allowed to see <ref type="figure">(Figure 1</ref>). Application code executing for a user can safely execute any query against the user's parallel universe database without risk of seeing (and perhaps inadvertently leaking) forbidden data. In essence, multiverse databases limit the TCB to the privacy policies and the database code enforcing them, defending against a threat model of inadvertently buggy application queries and privacy checks. <ref type="bibr" target="#b0">1</ref> Defending against actively malicious applications would require considering side-channels, which we omit in this paper.</p><p>The security policies for a multiverse database are rooted in application-specific notions of data visibility. Consider a class discussion forum (e.g., Piazza <ref type="bibr">[20]</ref>) that allows students to post questions that are anonymous to other students, but not anonymous to instructors. A multiverse database might express this privacy policy as follows:  Given this policy, application code executing on a user's behalf can issue arbitrary queries without risking data leakage: unless the user is on the class staff, all anonymous posts consistently appear to have author "Anonymous" in every query. When a user issues multiple queries-e.g., one selecting and one counting a users' posts-the multiverse database returns semantically consistent results based on the contents of the user's universe. This removes, for example, a real-world inconsistency observed in Piazza, where students' total post count includes private posts invisible to the user <ref type="bibr" target="#b13">[13]</ref>. Since multiverse databases transparently apply transformations in the database, application code need not be aware of them and can assume that it is talking to a conventional database.</p><p>Multiverse database privacy policies are general and userextensible. Like row-level security <ref type="bibr" target="#b22">[22]</ref> and view grants, they can hide rows and columns from individual users; like rolebased access control, they can apply policies to groups of users; and like column masks <ref type="bibr" target="#b15">[15]</ref>, they can transform column values. But multiverse databases potentially also support powerful policies beyond the capabilities of existing solutions: for example, we are exploring policies that expose only differentially-private information about underlying tables.</p><p>A key challenge for the multiverse approach is query performance and space efficiency with many users. Web applications require fast reads, and applying policies on all data at query execution time is therefore unattractive. Applying the policies to the entire database ahead of time, however, explodes the space footprint with many users, and requires an update strategy when the underlying data changes. Fortunately, recent research on dataflow systems provides the key missing enabler for a multiverse database: dynamic, partially-stateful dataflows <ref type="bibr" target="#b11">[11]</ref>. Stateful dataflow systems scale well when precomputing complex functions of dynamically changing data, and efficiently apply incremental updates. Partial state allows a dataflow to execute without materializing the full results and internal dataflow state. This permits selectively deferring parts of the computation to later read processing, and enables caching, therefore maintaining fast common-case reads at a modest, rather than explosive, space overhead. A dynamic dataflow can add new queries to the existing computation at runtime, offering the same query flexibility as classic databases within a streaming, incremental dataflow computation.</p><p>We describe a multiverse design that builds on this technology and realizes multiverse storage as a joint dataflow computation ( §4). It transparently shares computation and policy-compliant intermediate data between users' universes, and relies on partial statefulness to grant the system freedom to choose what to precompute and cache, and what to compute on query execution. Initial results with an early prototype are encouraging ( §5), and the multiverse approach and our design raise interesting questions for future research ( §6).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Existing approaches</head><p>Multiverse database universes, in effect, are per-user views of the database defined by privacy policies. Databases have relied on views as a security primitive since at least the 1970s <ref type="bibr" target="#b10">[10,</ref><ref type="bibr" target="#b14">14]</ref>, but existing database views cannot substitute for the multiverse model. Defining views that specific users can access affords flexibility, but has the drawback that application developers must understand the view definitions and know which views to query. Algorithms to restate user queries in terms of authorized views mitigate this burden, but cannot map all queries and may spuriously reject queries even though the views support them <ref type="bibr" target="#b23">[23]</ref>. Transparent query rewriting approaches, by contrast, avoid predefined views. Instead, they dynamically insert restrictions congruent with access policies into queries on execution <ref type="bibr" target="#b4">[5,</ref><ref type="bibr" target="#b7">8,</ref><ref type="bibr" target="#b18">17]</ref>. Both view-based and query rewriting approaches increase the final query's complexity, slowing it down (e.g., by 3-10× in Qapla <ref type="bibr" target="#b18">[17]</ref>).</p><p>Given the lack of performant database mechanisms, researchers have devised other techniques to apply privacy policies in web applications. General information flow control (IFC) provides a powerful approach that makes applications correct by construction <ref type="bibr" target="#b16">[16,</ref><ref type="bibr" target="#b30">30]</ref>, but significantly complicates development. Domain-specific IFC systems can statically reject application code in violation of privacy policies <ref type="bibr" target="#b8">[9]</ref> or extract policy-compliant implementations using program synthesis techniques <ref type="bibr" target="#b21">[21]</ref>, but couple privacy policies to a single program, while database techniques allow arbitrary queries. Other solutions embed multi-valued ("faceted") execution in common languages like Scala and Python, resolving data to concrete, policy-compliant values only on output <ref type="bibr" target="#b28">[28,</ref><ref type="bibr" target="#b29">29]</ref>. This has the advantage of keeping the application code policyagnostic, but comes with substantial memory and runtime overheads, as the execution evaluates all alternative outcomes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">The multiverse approach</head><p>A multiverse database consists of a base universe, which represents the database without any read-side privacy policies applied, and many user universes, which are transformed copies of the database. Each user universe corresponds to the database view of a specific principal, typically an end-user authenticated  to a web application. The application code executing for this principal can only query its user universe, which appears to the application as a fully-fledged database. This makes multiverse databases easy to use-their application query interface is identical to that of normal databases-but requires maintaining many user universes, a potential performance bottleneck. Multiverse databases maintain read query performance by precomputing per-user universes. These transformed databases have the privacy policies already applied, so queries to them execute as quickly as if the application applied the policies. However, precomputation requires storing and maintaining many user universes. Naïvely duplicating the entire database for each user would require prohibitive amounts of storage space, so the multiverse database must precompute only data that users actually need. Moreover, the multiverse database must efficiently update user universes' cached data when the underlying base universe data changes. In the following, we focus on how to efficiently apply read-side access policies that restrict and transform the data cached in user universes. §6 will discuss write access policies that restrict writes to the base universe; applications cannot write to user universes directly.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Making multiverse databases practical</head><p>A space-and compute-efficient multiverse database clearly cannot materialize all user universes in their entirety, and must support high-performance incremental updates to the user universes. It therefore requires partially-materialized views that support high-performance updates. Recent research has provided this missing key primitive <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b11">11,</ref><ref type="bibr" target="#b20">19]</ref>. Specifically, scalable, parallel streaming dataflow computing systems now support partially-stateful and dynamically-changing dataflows <ref type="bibr" target="#b11">[11]</ref>. These ideas make an efficient multiverse database possible.</p><p>Our multiverse database design combines base-universe tables, privacy policies, and user universes into a single, joint dataflow. The database tables are the dataflow's root vertices, situated in the base universe (the source of ground truth). As the base universe is updated, records move through the dataflow into user universes, where subgraphs compute privacy policies and cache query results <ref type="figure" target="#fig_2">(Figure 2a</ref>). On each edge that crosses the universe boundary, the system interposes extra enforcement operators: special dataflow vertices that compute and apply the privacy policy's effect (e.g., pass, discard, transform) for each record that flows through them. The multiverse database's semantic consistency follows from the fact that enforcement operators for all applicable policies exist on any dataflow edge that crosses into a user universe. In other words, if a record written into the base universe flows into a user universe via multiple independent paths, the multiverse database enforces the same policies on each path.</p><p>When the application queries the multiverse database, it specifies an authenticated principal's ID alongside its query, and the system retrieves results from the matching user universe. If the system receives a query for the first time, it dynamically extends the user universe's dataflow with the required subgraph. Once a query is installed, its vertices remain in the dataflow; this facilitates caching, although the system can remove the query when it is no longer needed. Updates only ever flow from the base universe into other universes through enforcement operators, and information never flows back into the base universe or "sideways" across different user universes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Specifying privacy policies</head><p>In principle, our design supports any policy expressible as an incremental, streaming dataflow computation. This chiefly requires that the policy be a deterministic function of a given update's record data and the database contents. Importantly, this permits data-dependent policies, which are common: consider, for example, class enrollment in Piazza.</p><p>Defining the right policy language is an important part of the multiverse database design. The policy language must strike a balance between expressivity and meaningful composition of policies, as well as ease of correct use for policy writers.</p><p>In our current prototype, privacy policies comprise expressions defined in a language similar to the security rules of Google's Cloud Firestore <ref type="bibr" target="#b12">[12]</ref>. This language includes row suppression policies (the allow rules in §1's example) and column rewrite policies (rewrite) specified on the granularity of individual tables in the database schema. Policies decide whether to filter or mutate a record based on a relational predicate over the database contents. The language also supports group policies, which support role-based access control and save space and computation, and aggregation policies, which restrict user universes to seeing certain tables or columns only in aggregated or differentially-private form. Each policy expression in this language applies to a single database table T , which makes it easy to ensure semantic consistency. Specifically, the system must add enforcement nodes for all policies over T that apply to principal p on any path into p's user universe that records generated by updates to T can traverse. The system can determine these placement requirements through static analysis of the dataflow.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Sharing state and computation</head><p>A key challenge for multiverse databases is limiting the computation required on writes (which risks growing with the number of system users) and the space required to store user universes (which risks growing as fast or faster). Fortunately, the partially-stateful dataflow model can express optimizations that share computation and cached data between universes. Expressing the multiverse database as a joint partially-stateful dataflow is crucial to harnessing these optimizations. In the following, we showcase some promising optimizations that we have found to be beneficial, but this list is likely neither exhaustive nor sufficient for all applications and policies.</p><p>Group policies. Applications often have roles that cover multiple users, such as "students" and "instructors". These user groups have their own privacy policies. A group policy might e.g., allow teaching assistants (TAs) to see anonymous posts in classes they teach: Note that this policy is a data-dependent group template: it defines one TA group per class (via GID from membership), i.e., adding a new class to Enrollment creates a new group. Instead of computing this policy once on the boundary to each group member's user universe, the system applies the privacy policy once for all members. To achieve this, the system creates a group universe for each group, and routes inputs to queries affected by the group policy through this universe. From the group universe, records flow into each group member's user universe; at that boundary, user-specific policy operators may further restrict an individual's view, or a union with another path that applies a complementary user-specific policy may widen access. Using a group universe requires only one copy of the enforcement operators for the group's policies (rather than as many copies as the group has members), and shares cached, policy-compliant data in the group universe.</p><p>Sharing between queries. Web applications often issue similar queries for many users, and these queries share at least some privacy policies and results. By reasoning about all users' queries as a joint dataflow, the system can detect such sharing: when identical dataflow paths exist, they can be merged. All users and queries share computation in the base universe, so the system aims to maximize the computation in that universe by pushing the universe boundary as far "down" the queries' dataflow as possible while still maintaining correctness. <ref type="figure">Figure</ref> 2b shows how the system shares filter and sum operators in an identical query issued for both Alice and Bob. In this example, a privacy policy (which depends only on data in the group columns preserved by the sum) can be applied late, keeping most of the query's dataflow in the base universe.</p><p>Sharing across universes. Often, applications actually issue identical queries on behalf of many users, such as a query to retrieve the ten most recent posts to a class. Due to privacy policies, the queries' results may vary for different users, but they often overlap in part (e.g., all public posts). Instead of storing copies of identical records in many universes, the system can share these records across universes. It achieves this by backing logically distinct-but, in query terms, functionally equivalent-dataflow vertices with a shared physical record store. If a record reaches a vertex backed by such a store in universe u, the record's arrival indicates that u has access to it, so the system exposes the shared copy to universe u.</p><p>Partial materialization. As web applications are read-heavy, precomputing privacy policies and query results on write processing is more efficient than recomputing them on each read. To save space, however, the multiverse database may choose to precompute only part of a query (e.g., privacy policies only). The partially-stateful dataflow model allows the system to choose dynamically what results to precompute and cache, and how much computation to perform during read query execution. To achieve this, the system can decide which stateful operators in a given query to materialize, and which to compute on the fly on reads using the deferred evaluation supported by partially-stateful dataflow (through "upqueries" <ref type="bibr" target="#b11">[11]</ref>). Partially-stateful dataflow also supports evicting records from operators' state, which helps further restrict cached results to frequently-read records. The specific choice of what to materialize may vary according to a query's popularity, overall system load, and the available memory.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Dynamic universe creation</head><p>At any time, many users of a web application are likely inactive. During those times, the multiverse database need not maintain a universe for these users. Instead, it should create and destroy user universes on demand-e.g., on application-level session creation and termination. For an interactive user experience, the creation and destruction of user universes must be fast and permit other users to concurrently interact with the database.</p><p>Partially-stateful dataflow supports downtime-free dataflow changes, which make this feasible: a new user universe starts out with empty state and populates itself as queries execute. This bootstrapping can be fast, as the user universe can often derive its data efficiently from cached intermediate results in the base or group universes. Creation and destruction of group universes relies on the same live dataflow change mechanisms.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">Consistency</head><p>Enforcing privacy policies to all records that cross into a user universe makes the multiverse database semantically consistent: different queries will not expose contradictory results that are impossible to see with a classic database.  <ref type="table">(without AP)</ref> 10.6k 8.8k <ref type="figure">Figure 3</ref>. Our prototype achieves high read throughput compared to MySQL queries that execute privacy policies inline. Write throughput is lower than MySQL's as the multiverse database does more work on writes.</p><p>The actual consistency observed by clients reading from the multiverse database's caches at runtime, however, depends on the guarantees offered by the underlying dataflow implementation. Dataflow systems can guarantee strong consistency-i.e., that updates take effect in all queries at the same logical time and reads always see a consistent snapshot-using progress tracking protocols <ref type="bibr" target="#b19">[18]</ref>. Global progress tracking requires coordination between parallel processors, which reduces scalability and may be costly for a multiverse database's large dataflows. Uncoordinated, eventually-consistent dataflow scales well <ref type="bibr">[11, §8.3]</ref>, but makes no guarantees as to when different universes and queries see the effects of an update to the base universe. Hence, data-dependent policies may temporarily expose data to a user universe in such a regime: a new record might race with an update that makes a data-dependent policy hide it. A multiverse database can somewhat restrict coordination, however: since no client ever combines data from different user universes, the system can allow state in different user universes to diverge. Dataflow models that support such local coordination are an interesting direction for future research.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Proof of concept</head><p>We have implemented an early prototype multiverse database based on our design as an extension to Noria <ref type="bibr" target="#b11">[11]</ref>. The prototype implements row suppression, rewrite, and group policies, and relies on Noria's automatic reuse of dataflow operators [11, §5.1] to realize the sharing described in §4, with exception of the shared record store. We added about 2,000 lines to Noria's Rust implementation and ran experiments at revision 15f0492.</p><p>We measure the prototype's performance for a Piazza-style class forum and a privacy policy that allows TAs to see anonymous posts on a database containing 1M posts and 1,000 classes. For reads, the benchmark repeatedly queries all posts authored by different users, and write operations insert new posts into a class. We compare: (a) our prototype with 5,000 active user universes; (b) MySQL running the same workload with privacy policies inlined in the query; and (c) MySQL without any privacy policies. Our prototype currently materializes the full query results in memory, and its base database tables are stored in RocksDB <ref type="bibr" target="#b24">[24]</ref>. <ref type="figure">Figure 3</ref> shows the results. As expected, reads from the multiverse database's precomputed, cached results are fast. By contrast, evaluating the privacy policy as part of the query slows down MySQL reads by 9.6× compared to issuing a straight query; with simpler policies, such as one that merely filters other users' anonymous posts, MySQL sees a smaller slowdown. The write throughput of our prototype is roughly half of what MySQL supports, and though the precise difference is largely an implementation artifact, this is an encouraging result. A multiverse database fundamentally must do more work on writes than MySQL's inserts, as writes must propagate through the dataflow. In this experiment, the dataflow fully updates 5,000 user universes; making some state partial would increase write throughput at the expense of slower reads.</p><p>Finally, we measured process memory use as we increased the number of active universes from one to 5,000. The memory footprint increased from 0.5 GB with one universe to 1.1 GB with 5,000 universes; this 600 MB footprint is about half of the 1.2 GB needed without group universes. However, this overhead can be reduced further: for example, a separate microbenchmark showed that using a shared record store for identical queries reduces their space footprint by 94%.</p><p>These results are encouraging, but a realistic multiverse database must further reduce memory overhead and efficiently run millions of user universes across machines. Neither Noria nor any other current dataflow system support execution of the huge dataflows that such a deployment requires. In particular, changes to the dataflow must avoid full traversals of the dataflow graph for faster universe creation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Discussion and research directions</head><p>Our prototype shows that the promise of multiverse databases is within reach, even for challenging applications with high performance requirements. Flexible, application-specific privacy policies are expressed within the store, and therefore obeyed transparently by applications, with an easy query interface and little to no query execution overhead. Furthermore, though challenges remain, the partially-stateful dataflow model can express key optimizations that limit multiverses' space overhead. We believe the multiverse model can make even complex web applications robust to accidental information exposure and therefore faster to safely build. Moreover, the multiverse concept suggests interesting directions for future research.</p><p>Write authorization policies. Our current prototype only applies privacy polices to read queries and allows all users to write to database tables without enforcing any privacy policies. But applications need write-side policies, too: otherwise users might, for instance, change their own role. For example, Piazza may need a write policy specifying that only instructors can enroll other users as instructors or TAs: A multiverse database might apply such write authorization policies in several ways. The simplest is perhaps to check permissions when applying writes to tables, just like today's databases do. This allows policies that prohibit writes that users might exploit to raise their privileges, and simple filters on the data written or current table contents are sufficient to support policies like the Piazza one. An alternative approach with more expressive power might feed writes through a policy dataflow before applying them to the base universe. This supports write authorization policies dependent on data in other tables and policies that require complex computation. Such an approach raises consistency challenges, however: an eventually-consistent write authorization dataflow might erroneously admit writes because the policy evaluation itself might observe temporarily inconsistent or intermediate state via data-dependencies. Hence, a write authorization dataflow may require transactional abstractions that atomically process updates until they are admitted to the base universe or rejected.</p><p>Differentially-private aggregations. A privacy policy may permit users to run aggregate queries over sensitive records that they cannot see individually. For example, a medical web application might allow a user to query the number of patients with diabetes by ZIP code, even if this user is not authorized to view individual records:</p><formula xml:id="formula_0">SELECT COUNT(*) FROM diagnoses WHERE diagnosis = "diabetes" GROUP BY zip;</formula><p>The policy might further desire that revealing such aggregates leaks no information about whether any individual, hidden patient record is part of the aggregate. A multiverse database can rewrite any aggregation that matches such a privacy policy into a differentially-private (DP) aggregation. DP adds noise to the output to hide the impact of individual records, and in the multiverse database setting must allow for continuous updates to underlying data. The continuous, event-based DP algorithm by Chan et al. <ref type="bibr" target="#b6">[7]</ref> is suitable for a streaming dataflow setting, and we implemented a prototype COUNT operator using this algorithm. In microbenchmark experiments, the operator's output was within 5% of the true count after processing about 5,000 updates. Yet, open research questions remain: for example, how do DP aggregation policies compose with other policies? Does a DP policy prohibit other, unrelated queries (e.g., joins)? How should the system handle multiple DP aggregations over the same table?</p><p>User-defined policy operators. Our prototype currently defines privacy policies using SQL expressions. This is sufficient for common policies, such as matching against a privacy control list (ACL) stored in a database table. Some applications' privacy policies, however, may rely on external information (e.g., an ACL file) or custom behavior (e.g., a user-defined function). The multiverse database's policy language ought to permit such custom functions, but the right API is an open question: custom operators must satisfy dataflow operator requirements (e.g., determinism), and they must correctly compose with other privacy policies. A domain-specific language for writing such operators, offering access to a limited API to external state, might be a promising starting point.</p><p>Policy correctness. Both write-side and read-side privacy policies must be consistent and complete. Developer error can yield policies with non-obvious internal contradictions, or with gaps that leak information. For applications that have large policies consisting of many clauses, checking the policies by hand is impractical, and automated tools will be required. Such policy tools should detect impossible (i.e., contradictory), and incomplete policies (i.e., those not covering all cases). We believe that developing a sound policy-checker for a multiverse database, perhaps using ideas similar to Amazon's SMT-based policy checker for AWS <ref type="bibr" target="#b2">[3]</ref>, is an interesting challenge.</p><p>Verified policy compilation. The multiverse database's TCB includes the privacy policy, as well as the logic that compiles it into dataflow and injects enforcement operators into queries. Ideally, these transformations would be formally verified to ensure that the final dataflow indeed enforces the privacy policy. Recent advances in constructing formally-verified just-in-time compilers <ref type="bibr" target="#b26">[26]</ref> may provide some ideas, although the multiverse database must also reason about the existing dataflow. For example, transforming a new policy into a functionallycorrect joint dataflow may require adding new dataflow nodes into existing queries.</p><p>Universe peepholes. Applications sometimes let users assume other users' identities, but this begets bugs such as Facebook's recent access token exposure <ref type="bibr" target="#b5">[6]</ref>, which allowed users to view other users' access tokens via the site's "View Profile As" feature. In a multiverse database, it might be tempting to support such a "View As" feature by temporarily allowing Bob to access Alice's universe, but this is dangerous: Alice's access tokens are visible inside her universe (and only there)! Plausible solutions might involve creating a temporary "extension universe" to Alice's universe, and applying a privacy policy that blinds the tokens at that boundary.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Conclusion</head><p>Multiverse databases are a promising approach that makes common bugs in today's web applications harmless. Our initial results indicate that a large, dynamic, and partially-stateful dataflow can support practical multiverse databases that are easy to use and achieve good performance and acceptable overheads. We are excited to further explore the multiverse database paradigm and associated research directions.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><label></label><figDesc>: Post, --user sees public posts and her own anonymous posts in full --(`ctx`, a universe-specific context, holds the user's ID) allow: [ WHERE Post.anon = 0, WHERE Post.anon = 1 AND Post.author = ctx.UID ], --hide author of anonymous posts unless user is class staff rewrite: [ { predicate: WHERE Post.anon = 1 AND Post.class NOT IN (SELECT class FROM Enrollment WHERE role = "instructor" AND uid = ctx.UID), column: Post.author, replacement: "Anonymous" } ],</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 2 .</head><label>2</label><figDesc>A multiverse database realized as a joint dataflow. For efficiency, universes can share computation and state ( §4.2), as (b) shows for an identical query issued by Alice and Bob (here, without any group universes).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head></head><label></label><figDesc>group: "TAs", --define TA group for each class membership: SELECT uid, class_id AS GID FROM Enrollment WHERE role = "TA", policies: [ --show anonymous posts to TAs --(`ctx`is a group universe context, holds the group ID){ table: Post, allow: WHERE Post.anonymous = 1 AND ctx.GID = Post.class } ],</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>table</head><label></label><figDesc></figDesc><table /><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>table :</head><label>:</label><figDesc></figDesc><table><row><cell>Enrollment,</cell></row><row><cell>--only allow existing instructors to make other users instructors</cell></row><row><cell>write: [ {</cell></row><row><cell>column: Enrollment.role,</cell></row><row><cell>values: [ "instructor", "TA" ]</cell></row></table><note>predicate: WHERE ctx.UID IN (SELECT uid FROM Enrollment WHERE role = "instructor"), } ]</note></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgements</head><p>We thank the anonymous reviewers and members of the MIT PDOS group for helpful comments on earlier versions of the paper. This work was funded through NSF awards CNS-1301934, CNS-1704172, and CNS-1704376.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">DBToaster: Higher-order Delta Processing for Dynamic, Frequently Fresh Views</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yanif</forename><surname>Ahmad</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Oliver</forename><surname>Kennedy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christoph</forename><surname>Koch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Milos</forename><surname>Nikolic</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the VLDB Endowment</title>
		<meeting>the VLDB Endowment</meeting>
		<imprint>
			<date type="published" when="2012-06" />
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="page" from="968" to="979" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">Facebook photo leak flaw raises security concerns</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Warwick</forename><surname>Ashford</surname></persName>
		</author>
		<ptr target="https://www.computerweekly.com/news/2240242708/Facebook-photo-leak-flaw-raises-security-concerns" />
		<imprint/>
	</monogr>
	<note>visited on 01/04/2019</note>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Semanticbased Automated Reasoning for AWS Access Policies using SMT</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">John</forename><surname>Backes</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pauline</forename><surname>Bolignano</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Byron</forename><surname>Cook</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Catherine</forename><surname>Dodge</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andrew</forename><surname>Gacek</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kasper</forename><surname>Luckow</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Neha</forename><surname>Rungta</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Oksana</forename><surname>Tkachuk</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Carsten</forename><surname>Varming</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 18 th International Conference on Formal Methods in Computer-Aided Design</title>
		<meeting>the 18 th International Conference on Formal Methods in Computer-Aided Design<address><addrLine>Austin, Texas, USA</addrLine></address></meeting>
		<imprint>
			<publisher>FMCAD</publisher>
			<date type="published" when="2018-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">Notifying our Developer Ecosystem about a Photo API Bug</title>
		<ptr target="https://developers.facebook.com/blog/post/2018/12/14/notifying-our-developer-ecosystem-about-a-photo-api-bug/" />
		<imprint>
			<date type="published" when="2018" />
		</imprint>
	</monogr>
	<note>Tomer Bar. visited on 12/14</note>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">The virtual private database in Oracle9iR2. Oracle Technical White Paper, Oracle Corporation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kristy</forename><surname>Browder</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mary</forename><forename type="middle">Ann</forename><surname>Davidson</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Security Update -Additional Technical Details</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pedro</forename><surname>Canahuati</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Guy</forename><surname>Rosen</surname></persName>
		</author>
		<ptr target="https://newsroom.fb.com/news/2018/09/security-update/#details" />
		<imprint>
			<date type="published" when="2018" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Private and Continual Release of Statistics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T.-H. Hubert</forename><surname>Chan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Elaine</forename><surname>Shi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dawn</forename><surname>Song</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Information and System Security</title>
		<imprint>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page">24</biblScope>
			<date type="published" when="2011-11" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Fine Grained Authorization Through Predicated Grants</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Surajit</forename><surname>Chaudhuri</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tanmoy</forename><surname>Dutta</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Sudarshan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 23 rd IEEE International Conference on Data Engineering (ICDE)</title>
		<meeting>the 23 rd IEEE International Conference on Data Engineering (ICDE)<address><addrLine>Istanbul, Turkey</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2007-04" />
			<biblScope unit="page" from="1174" to="1183" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Static Checking of Dynamically-Varying Security Policies in Database-Backed Applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Adam</forename><surname>Chlipala</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 9 th USENIX Symposium on Operating Systems Design and Implementation (OSDI)</title>
		<meeting>the 9 th USENIX Symposium on Operating Systems Design and Implementation (OSDI)</meeting>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Vancouver</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2010-10" />
			<pubPlace>British Columbia, Canada</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Views for Multilevel Database Security</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dorothy</forename><forename type="middle">E</forename><surname>Denning</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Selim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mark</forename><surname>Akl</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Teresa</forename><forename type="middle">F</forename><surname>Heckman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Matthew</forename><surname>Lunt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><forename type="middle">G</forename><surname>Morgenstern</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Roger</forename><forename type="middle">R</forename><surname>Neumann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Schell</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Transactions on Software Engineering SE-13</title>
		<imprint>
			<date type="published" when="1987-02" />
			<biblScope unit="page" from="129" to="140" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Noria: dynamic, partiallystateful data-flow for high-performance web applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jon</forename><surname>Gjengset</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Malte</forename><surname>Schwarzkopf</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jonathan</forename><surname>Behrens</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lara</forename><forename type="middle">Timbó</forename><surname>Araújo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Martin</forename><surname>Ek</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eddie</forename><surname>Kohler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">Frans</forename><surname>Kaashoek</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Robert</forename><surname>Morris</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 13 th USENIX Symposium on Operating Systems Design and Implementation (OSDI)</title>
		<meeting>the 13 th USENIX Symposium on Operating Systems Design and Implementation (OSDI)<address><addrLine>Carlsbad, California, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2018-10" />
			<biblScope unit="page" from="213" to="231" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">Cloud Firestore Documentation: Writing conditions for Cloud Firestore Security Rules</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Inc</forename><surname>Google</surname></persName>
		</author>
		<ptr target="https://firebase.google.com/docs/firestore/security/rules-conditions" />
		<imprint/>
	</monogr>
	<note>visited on 01/15/2019)</note>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title level="m" type="main">Piazza offers anonymous posting, but does not hide each user&apos;s total number of posts. Discuss. Twitter post</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Matthew</forename><surname>Green</surname></persName>
		</author>
		<ptr target="https://twitter.com/matthew_d_green/status/925053953330634753" />
		<imprint/>
	</monogr>
	<note>visited on 03/08/2019</note>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">An Authorization Mechanism for a Relational Database System</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Patricia</forename><forename type="middle">P</forename><surname>Griffiths</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bradford</forename><forename type="middle">W</forename><surname>Wade</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Database Systems</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="242" to="255" />
			<date type="published" when="1976-09" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">Securing DB2: Creating column masks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Ibm Knowledge</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Center</surname></persName>
		</author>
		<ptr target="https://www.ibm.com/support/knowledgecenter/en/SSEPEK_10.0.0/seca/src/tpc/db2z_createcolumnmask.html" />
		<imprint/>
	</monogr>
	<note>visited on 01/15/2019)</note>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Information Flow Control for Standard OS Abstractions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Maxwell</forename><surname>Krohn</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alexander</forename><surname>Yip</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Micah</forename><surname>Brodsky</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Natan</forename><surname>Cliffer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">Frans</forename><surname>Kaashoek</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eddie</forename><surname>Kohler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Robert</forename><surname>Morris</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 21 st ACM SIGOPS Symposium on Operating Systems Principles (SOSP)</title>
		<meeting>the 21 st ACM SIGOPS Symposium on Operating Systems Principles (SOSP)</meeting>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Washington</forename><surname>Stevenson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Usa</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2007" />
			<biblScope unit="page" from="321" to="334" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Qapla: Policy compliance for database-backed systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Aastha</forename><surname>Mehta</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eslam</forename><surname>Elnikety</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Katura</forename><surname>Harvey</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Deepak</forename><surname>Garg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><surname>Druschel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 26 th USENIX Security Symposium (USENIX Security 17)</title>
		<meeting>the 26 th USENIX Security Symposium (USENIX Security 17)<address><addrLine>Vancouver, British Columbia, Canada</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2017-08" />
			<biblScope unit="page" from="1463" to="1479" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Derek</forename><forename type="middle">G</forename><surname>Murray</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Frank</forename><surname>Mcsherry</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rebecca</forename><surname>Isaacs</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Isard</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Paul</forename><surname>Barham</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Martín</forename><surname>Abadi</surname></persName>
		</author>
		<title level="m">Proceedings of the 24 th ACM Symposium on Operating Systems Principles (SOSP)</title>
		<meeting>the 24 th ACM Symposium on Operating Systems Principles (SOSP)<address><addrLine>Farmington, Pennsylvania, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2013-11" />
			<biblScope unit="page" from="439" to="455" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">How to Win a Hot Dog Eating Contest: Distributed Incremental View Maintenance with Batch Updates</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Milos</forename><surname>Nikolic</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mohammad</forename><surname>Dashti</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christoph</forename><surname>Koch</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2016 ACM SIGMOD International Conference on Management of Data (SIGMOD)</title>
		<meeting>the 2016 ACM SIGMOD International Conference on Management of Data (SIGMOD)<address><addrLine>San Francisco, California, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2016" />
			<biblScope unit="page" from="511" to="526" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title level="m" type="main">Type-Driven Repair for Information Flow Security</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nadia</forename><surname>Polikarpova</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jean</forename><surname>Yang</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1607.03445</idno>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
	<note>Shachar Itzhaky, and Armando Solar-Lezama</note>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">15 Documentation: Row Security Policies</title>
		<ptr target="https://www.postgresql.org/docs/9.5/ddl-rowsecurity.html" />
	</analytic>
	<monogr>
		<title level="j">Postgres Global Development Group. PostgreSQL</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
		</imprint>
	</monogr>
	<note>visited on 01/14/2019</note>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Extending Query Rewriting Techniques for Fine-grained Access Control</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shariq</forename><surname>Rizvi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alberto</forename><surname>Mendelzon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Sudarshan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Prasan</forename><surname>Roy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2004 ACM SIGMOD International Conference on Management of Data</title>
		<meeting>the 2004 ACM SIGMOD International Conference on Management of Data<address><addrLine>Paris, France</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2004" />
			<biblScope unit="page" from="551" to="562" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<title level="m" type="main">Facebook Open Source. A persistent key-value store for fast storage environments</title>
		<ptr target="http://rocksdb.org" />
		<imprint>
			<date type="published" when="2018-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<monogr>
		<title level="m" type="main">Search leaks hidden tags</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ben</forename><surname>Stock</surname></persName>
		</author>
		<ptr target="https://github.com/kohler/hotcrp/issues/135" />
		<imprint/>
	</monogr>
	<note>visited on 01/08/2019</note>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Jitk: A Trustworthy In-Kernel Interpreter Infrastructure</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Xi</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Lazar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nickolai</forename><surname>Zeldovich</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Adam</forename><surname>Chlipala</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zachary</forename><surname>Tatlock</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 11 th USENIX Symposium on Operating Systems Design and Implementation (OSDI). Broomfield, Colorado</title>
		<meeting>the 11 th USENIX Symposium on Operating Systems Design and Implementation (OSDI). Broomfield, Colorado<address><addrLine>USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2014-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<monogr>
		<ptr target="https://wpvulndb.com/vulnerabilities/8519" />
		<title level="m">Wordpress Vulnerability Database. CVE 2016-5835: Authenticated Revision History Information Disclosure</title>
		<imprint/>
	</monogr>
	<note>visited on 01/04/2019</note>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Precise, Dynamic Information Flow for Database-backed Applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jean</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Travis</forename><surname>Hance</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thomas</forename><forename type="middle">H</forename><surname>Austin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Armando</forename><surname>Solar-Lezama</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cormac</forename><surname>Flanagan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stephen</forename><surname>Chong</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 37 th ACM SIG-PLAN Conference on Programming Language Design and Implementation (PLDI)</title>
		<meeting>the 37 th ACM SIG-PLAN Conference on Programming Language Design and Implementation (PLDI)<address><addrLine>Santa Barbara, California, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2016-06" />
			<biblScope unit="page" from="631" to="647" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">A Language for Automatically Enforcing Privacy Policies</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jean</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kuat</forename><surname>Yessenov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Armando</forename><surname>Solar-Lezama</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 39 th Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL)</title>
		<meeting>the 39 th Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL)<address><addrLine>Philadelphia, Pennsylvania, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2012-01" />
			<biblScope unit="page" from="85" to="96" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Improving Application Security with Data Flow Assertions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alexander</forename><surname>Yip</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Xi</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nickolai</forename><surname>Zeldovich</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Frans Kaashoek</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the ACM SIGOPS 22 nd Symposium on Operating Systems Principles (OSDI)</title>
		<meeting>the ACM SIGOPS 22 nd Symposium on Operating Systems Principles (OSDI)<address><addrLine>Big Sky, Montana, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2009" />
			<biblScope unit="page" from="291" to="304" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
