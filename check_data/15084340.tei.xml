<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/cindy/tmp/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">How Much Up-Front? A Grounded Theory of Agile Architecture</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Waterman</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Specialised Architecture Services Ltd</orgName>
								<address>
									<settlement>Wellington</settlement>
									<country key="NZ">New Zealand</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">James</forename><surname>Noble</surname></persName>
							<email>james.noble@ecs.vuw.ac.nz</email>
							<affiliation key="aff1">
								<orgName type="department">School of Engineering and Computer Science</orgName>
								<orgName type="institution">Victoria University of Wellington</orgName>
								<address>
									<country key="NZ">New Zealand</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">George</forename><surname>Allan</surname></persName>
							<email>drgeorgeallan@gmail.com</email>
						</author>
						<title level="a" type="main">How Much Up-Front? A Grounded Theory of Agile Architecture</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-01-31T12:46+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
				<p>The tension between software architecture and agility is not well understood by agile practitioners or researchers. If an agile software team spends too little time designing architecture up-front then the team faces increased risk and higher chance of failure; if the team spends too much time the delivery of value to the customer is delayed, and responding to change can become extremely difficult. This paper presents a grounded theory of agile architecture that describes how agile software teams answer the question of how much upfront architecture design effort is enough. This theory, based on grounded theory research involving 44 participants, presents six forces that affect the team&apos;s context and five strategies that teams use to help them determine how much effort they should put into up-front design.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>I. INTRODUCTION</head><p>Software architecture is the high-level structure and organisation of a software system <ref type="bibr" target="#b0">[1]</ref>. Because architecture defines system-level properties, it is difficult to change after development has started <ref type="bibr" target="#b1">[2]</ref>, causing a conflict with agile development's central goal of better delivering value through responding to change <ref type="bibr" target="#b2">[3]</ref>, <ref type="bibr" target="#b3">[4]</ref>.</p><p>To maximise agility, agile developers often avoid or minimise architectural planning <ref type="bibr" target="#b4">[5]</ref>, because architecture planning is often seen as delivering little immediate value to the customer <ref type="bibr" target="#b5">[6]</ref>. Too little planning however may lead to an accidental architecture <ref type="bibr" target="#b6">[7]</ref> that has not been carefully thought through, and may lead to the team spending a lot of time fixing architecture problems and not enough time delivering functionality (value). An accidental architecture can potentially lead to gradual failure of the project. On the other hand too much architecture planning will at best delay the start of development, and at worst lead to expensive architectural rework if the requirements change significantly. Up-front architecture design effort is therefore a trade-off between the need for architectural support <ref type="bibr" target="#b7">[8]</ref> and agility. This conflict does not yet have a satisfactory solution <ref type="bibr" target="#b8">[9]</ref>.</p><p>Many agile methodologies recommend some architecture planning <ref type="bibr" target="#b9">[10]</ref>, but there is little guidance as to which architecture decisions should be made up-front <ref type="bibr" target="#b5">[6]</ref>, and what factors influence those decisions.</p><p>Many agile developers deal with this absence in guidance by designing 'just enough' architecture up-front to enable them to start development, with the rest being completed during development as required <ref type="bibr" target="#b5">[6]</ref>. How much is just enough depends on context, which includes technical and environmental factors such as the organisation and the domain <ref type="bibr" target="#b5">[6]</ref>, as well as social factors <ref type="bibr" target="#b10">[11]</ref> such as the background and experience of the architects. A particular system may have more than one architectural solution <ref type="bibr" target="#b11">[12]</ref>, <ref type="bibr" target="#b12">[13]</ref>, and two architects are likely to produce different architectures for the same problem with the same boundaries <ref type="bibr" target="#b10">[11]</ref>. It is therefore difficult to determine in advance how much 'just enough' is.</p><p>There has been little research on the relationship between software architecture and agile development to date <ref type="bibr" target="#b13">[14]</ref>. This lack of research does not mean that it is not an important issue: at the XP2010 conference, how much architectural effort to expend was rated as the second-equal most burning question facing agile practitioners <ref type="bibr" target="#b14">[15]</ref>.</p><p>This paper addresses this problem by presenting "a grounded theory of agile architecture," a high-level descriptive theory that explains how teams determine how much architecture to design up-front. A team's up-front effort depends on five agile architecture strategies that a team may choose; which strategies a team chooses depend on the context of the team and the system being built. Context is characterised by <ref type="figure">Fig. 1</ref>. The forces and strategies that comprise the theory of agile architecture six forces that a team must consider when designing an agile architecture. The forces and strategies are listed in figure <ref type="bibr">1.</ref> This theory was derived using grounded theory, a systematic and rigorous methodology <ref type="bibr" target="#b15">[16]</ref> that allows researchers to develop a substantive theory (based on data) that is a "formal, testable explanation of some events that includes explanations of how things relate to each other" <ref type="bibr" target="#b16">[17]</ref>. The theory is more than a description of experiences or perspectives <ref type="bibr" target="#b17">[18]</ref> based on a compilation of anecdotes, expert opinions and experience reports: it is a well-codified and systematically-generated set of propositions <ref type="bibr" target="#b18">[19]</ref>, <ref type="bibr" target="#b19">[20]</ref>.</p><p>This paper is based on research published in Waterman's PhD thesis <ref type="bibr" target="#b20">[21]</ref>.</p><p>The rest of this paper is as follows: section II defines some of the terminology used in the paper, and section III presents the research methodology. Section IV describes the agile architecture forces, and section V describes the agile architecture strategies. Section VI discusses the relationships between the forces and the strategies, and the theory in context of related work. Section VII discusses the limitations of the theory. Finally, section VIII concludes the paper.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>II. DEFINITIONS</head><p>We define software architecture as "the set of significant decisions about the high level structure and the behaviour of a system" <ref type="bibr" target="#b21">[22]</ref>, where 'significant' is measured by the cost of change <ref type="bibr" target="#b1">[2]</ref>. In other words, architecture comprises the planning and design decisions that are made up-front because they are difficult to change once development has started. Architecting is the process of making architectural decisions <ref type="bibr" target="#b22">[23]</ref>, and may include research, analysis, modelling, verification and the creation of architectural artefacts. Architects make the architectural decisions; in agile software development, this is often the whole team through collaboration.</p><p>We define agility from a conceptual perspective, based on an abridged version of Conboy's definition <ref type="bibr" target="#b23">[24]</ref>: "[Agility is] a software development team's ability to create change, respond to change and learn from change so that it can better deliver value." Adolph used a similar definition <ref type="bibr" target="#b24">[25]</ref>. This definition avoids specifying particular methodologies and practices, and refers simply to the team's ability to deliver value more quickly by responding to change and by improving its processes.</p><p>We define an agile architecture as an architecture that satisfies the definition of agility by being able to be easily modified in response to changing requirements, is tolerant of change, and is incrementally and iteratively designed -the product of an agile development process.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>III. RESEARCH METHODOLOGY</head><p>This research used the grounded theory methodology <ref type="bibr" target="#b25">[26]</ref>. Qualitative research methodologies such as grounded theory are used to investigate people, interactions and processes, and architecture is very dependent on the architects and the development teams themselves. Qualitative research is generally inductive -it develops theory from the research, unlike deductive research which aims to prove (or disprove) a hypothesis or hypotheses. Because of the scarcity of literature on the relationship between architecture and agile methods <ref type="bibr" target="#b13">[14]</ref>, an inductive strategy that develops a new hypothesis was more suitable for this research. We selected grounded theory because it allowed us to develop a high-level theory based on a broad range of participants.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Data Collection</head><p>We collected data primarily through face-to-face semistructured interviews with agile practitioners who design or use architecture, or who are otherwise architecture stakeholders. The average interview length was 70 minutes.</p><p>We asked participants to select a project that they had been involved with to discuss during the interview. Types of projects varied hugely, from green field to system redevelopment, from standalone systems to multi-team enterprise systems, and from start-up service providers and ongoing mass market product development to bespoke business systems. Systems varied from highly mission-critical systems such as flight control and health record management, to business critical systems such as banking and retail, through to largely noncritical administration and entertainment broadcast systems. We also obtained documentation, such as software architecture documents, which were able to confirm the decisions made and why they were made, and copies of architecture models, which provided overviews of the architectures. Additional data in the form of discussions by email and telephone clarified earlier interviews and documentation where necessary.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Research Participants</head><p>We interviewed 44 participants in 37 interviews. Participants were gathered through industry contacts, agile interest groups and through direct contact with relevant organisations. Almost all participants were very experienced architects, senior developers, team leaders and development managers with at least six years' experience (twenty years was not uncommon), and most were also very experienced in agile development. Organisation types included independent software vendors (ISVs), government departments, mass-market product developers and sole contractors. Different types of agile development were included, with most participants using Scrum; other methods included XP, Lean and bespoke methods. Most participants adapted their processes to some extent to suit their team or customer's requirements. The inclusion of this range of participants and systems enabled the research to include the effects of different factors on architecture decision making.</p><p>To maintain confidentiality, we refer to the participants using labels P1 to P37, reflecting the interview numbers. Where there are several participants in a single interview, we give the labels alphabetic suffixes, such as P23a, P23b and P23c. A summary of participants and their projects is listed in <ref type="table" target="#tab_0">Table I</ref> on the following page.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C. Data Analysis</head><p>The first step of grounded theory data analysis is open coding, which can begin as soon as the first data are obtained. In open coding, phenomena in the data are methodically identified and labelled using a code that summarises the meaning of the data <ref type="bibr" target="#b26">[27]</ref>. As open coding progresses, emerging codes are compared with earlier codes; codes with related themes are aggregated into higher levels of abstraction called concepts. This process, called constant comparison <ref type="bibr" target="#b27">[28]</ref>, continues at the concept level, with similar concepts being aggregated into a third level of abstraction called categories. Categories are the highest conceptual elements of grounded theory analysis; a grounded theory research project may have hundreds of different codes but will typically have no more than four or five categories <ref type="bibr" target="#b19">[20]</ref>. The relationships between the categories are analysed and focused using selective coding; a dominant category emerges as the core category, which is central to the emerging theory. This theory is a "formal, testable explanation of some events that includes explanations of how things relate to one another" <ref type="bibr" target="#b16">[17]</ref>. Throughout the analysis process, memos -free form notes ranging anywhere in size from a sentence to several pages -are written to record thoughts and ideas about developing relationships between codes, concepts and categories, and to aid the development of the theory <ref type="bibr" target="#b28">[29]</ref>.</p><p>Grounded theory uses iteration to ensure a wide coverage of the factors that may affect the emerging theory <ref type="bibr" target="#b26">[27]</ref>: later data collection is dependent on the results of earlier analysis. Data collection and analysis continue until saturation is reached, which occurs when no new insights are learned, and all variations and negative cases can be explained <ref type="bibr" target="#b29">[30]</ref>.</p><p>We can illustrate the grounded theory process with an example from this research. One participant commented that they had regular tax law changes that meant regular changes to their requirements: "You've got your taxation changes coming in on specific dates throughout the year, so those are generally around our release dates, because we have to stay compliant with that." (P3, development manager)</p><p>We coded this as 'having regulatory changes.'</p><p>Similarly another participant commented on the pharmaceu-tical regulations that affected his company's product: "The regulations keep changing every six months." (P23, senior manager)</p><p>We also coded this as 'having regulatory changes.' Codes that had similar themes to this example included 'having changes in usage patterns or system load,' 'requirements evolving' and 'understanding of requirements changing.' We combined these similar codes into a concept called 'having unstable requirements,' as shown in figure 2.</p><p>A full discussion of the methodology is presented in Waterman's PhD thesis <ref type="bibr" target="#b20">[21]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>IV. AGILE ARCHITECTURE FORCES</head><p>This research has found six forces that make up the team's and the system's context, the set of conditions that can affect how the team designs the agile architecture. The six forces are F1 (REQUIREMENTS INSTABILITY), F2 (TECHNICAL RISK), F3 (EARLY VALUE), F4 (TEAM CULTURE), F5 (CUSTOMER AGILITY) and F6 (EXPERIENCE).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>F1: Requirements Instability</head><p>F1 (REQUIREMENTS INSTABILITY) refers to the effect that unstable requirements have on up-front planning. Being able to respond to changing requirements is one of the underlying values of the Agile Manifesto <ref type="bibr" target="#b30">[31]</ref> and is central to our conceptual definition of agility (see section II). All participants in this research reported unstable requirements to some extent, whether they were part of team working on a relatively stable redevelopment project or whether they were part of a start-up in a highly dynamic environment:</p><p>" In some instances requirements are fairly stable, but it is not possible for the team to develop a complete understanding of those requirements up-front; a full understanding comes later during development. As an example, P13's team was replacing an old system with a new system that was functionally very similar. They were not able to understand the intricacies of the system before starting development:</p><p>"I don't know if the actual requirements ever changed but our understanding of them changed enormously." (P13, architect)</p><p>Requirements may also change frequently during development, due to the customer changing their mind about what they have already requested or by changing usage patterns. Often it is impossible for a team or their customer to know how their system will be used once it goes live; if the system is commercially successful, usage is likely to be higher than anticipated, leading to the performance suffering unless the system is redesigned to ensure it can maintain the required performance levels:</p><p>"[Planning up-front] assumes you know to begin with the usage patterns that your system is going to be put through... and you don't. You have to play it out in real life." (P10, coach) In a business environment, any delays caused by detailed requirements gathering and planning increase the chance that requirements will change:</p><p>"[If you put too much detail into your requirements] there's a fat chance that by the time you get around to starting the work your world has changed." (P3, development manager) Teams therefore only define the high-level requirements up-front. Detailed requirements are gathered as needed; any requirements not immediately being implemented are left undefined, because any additional time spent on requirements gathering is wasted when requirements change. By avoiding detailed requirements gathering, analysis and architecture design, software engineers can start development and demonstrating the product to the customer early in development, and therefore can get feedback from the customer early.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>F2: Technical Risk</head><p>F2 (TECHNICAL RISK) describes the effect that exposure to potentially negative outcome has on a team's up-front effort. Risk is caused by complex architecture, as described by the participants:</p><p>"Complexity in terms of how complicated the code and the solution underneath it are going to be does influence how much planning we're going to do." (P33, product architecture team leader) Participants described architecture complexity as being caused by one or more of three things: challenging or demanding architecturally significant requirements (ASRs), by having many integration points with other systems, and by involving legacy systems. ASRs are the requirements that drive and constrain a system's architecture <ref type="bibr" target="#b31">[32]</ref>, and consist primarily of the qualities, or non-functional requirements, such as performance, security and reliability. Challenging ASRs are difficult to design for, and may lead to many trade-offs. Participants described how challenging requirements lead to a complex architecture:</p><p>"Highly demanding non-functional requirements are in my mind a direct driver of complexity and will require more effort to address, particularly as there are tradeoffs between them -for example, performance versus security." (P31, enterprise architect) Legacy systems are those that are no longer being 'engineered' but rather are simply patched or hacked as requirements change <ref type="bibr" target="#b32">[33]</ref>, <ref type="bibr" target="#b33">[34]</ref>. Legacy systems have increased complexity:</p><p>"Systems become more complex with age. Just the burden of code -entropy over time and all that." (P32, software development director)</p><p>Good engineering practices such as simplicity, modularity and high cohesion are eroded, and continuing to develop -or even interfacing with -these entropic legacy systems are a source of complexity that requires more up-front exploration or experimentation to ensure that integration succeeds. Participants also identified integration points, or interfaces to external systems, as a major source of complexity in the systems being developed, particularly when the other systems are legacy or are built from different technologies. Integration with other systems require data and communications to be mapped between the systems, adding to the up-front effort to ensure integration is possible with the technologies being used. For example:</p><p>"Today's systems tend to be more interconnected -they have a lot more interfaces to external systems than older systems which are typically standalone. They have a lot higher level of complexity for the same sized system." (P14, solutions architect) Teams must reduce the risk to a suitable level. The amount of risk reduction, and hence architecture effort, depends on the team's and the customer's appetite for risk.</p><p>While complexity is a direct cause of risk, size is not if it does not also increase complexity:</p><p>"If we have size that just extends the time, it's of little concern to us [architecturally]. It's just a slightly larger backlog, management overhead." (P32, software development director) A team mitigates risk through using the strategy S2 (ADDRESS RISK), described in section V.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>F3: Early Value</head><p>F3 (EARLY VALUE) refers to a customer's need to gain value from a system or product being built (rather than simply provide feedback) before all functionality has been implemented, perhaps in the form of a minimum viable product <ref type="bibr" target="#b34">[35]</ref>. Early value is frequently required by businesses operating in a dynamic commercial environment who cannot wait for the full product to be developed:</p><p>"Today they've got an opportunity for a business idea that might make them some money -if they don't pounce on it it's gone regardless of how clever they think they are." (P26, team lead) Teams that deliver early value must reduce the time to the first release by spending less time on up-front architecture design. They achieve this by reducing the planning horizonhow far ahead the team considers (high level) requirements for the purpose of architecture planning. In its extreme, teams do no planning ahead, using S3 (EMERGENT ARCHITECTURE), described in section V, to start delivering value as soon as possible.</p><p>No up-front design increases the overall effort because the architecture must be evolved with each iteration, and hence cost of development increases. With each iteration, the team has to consider if the existing architecture is suitable for the current set of requirements being implemented; if it is not, then the architecture must be redesigned. Overall, there is likely to be more redesign than if a longer planning horizon is used with more initial design. For example, as the product grows and the user base grows, the architecture that was designed for day one will no longer be suitable and will need to be redesigneda redesign that may not have occurred with a larger planning horizon. While "cost is always a concern" (P10), participants accepted this increase in cost, because it occurs later when the customer has cash flow from early adopters to pay for that cost:</p><p>" </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>F4: Team Culture</head><p>F4 (TEAM CULTURE) describes the effect that a team's culture has on its agility and the effort it puts into up-front planning. A culture that is people-focused and collaborative is a very important factor in a team's ability to communicate. For example:</p><p>"There was a very good culture; [...] we could be full and frank in our discussions and planning and nobody would get too offended." (P12, senior developer) Many participants also commented on the importance of trust in an agile culture:</p><p>"And the most important thing when it comes to agile is trust." (P15, customer) A team without a trusting people-focused and collaborative culture has to rely on documentation for communication and formal plans, and hence requires more up-front effort to guide development.</p><p>The size of the team affects its ability to communicate; small teams are able to collaborate better, while large teams require more structure and more up-front planning, and hence are less agile:</p><p>"And the team has been going, '[we're] too big, can't communicate, hate the meetings.' [...] It definitely takes more effort and negotiation in iteration zero. I don't think it changed the complexity of the architecture or the way we attack the architecture -it's just comms time." (P29, development manager)</p><p>The agile experience of team members also affects up-front planning, because a people-focused and collaborative culture does not come into being instantaneously -it comes with experience and practice as the team members become more experienced working together:</p><p>"It [agile] is a continuous journey, people have to get accustomed to the culture." (P20, coach and trainer)</p><p>A team new to agile -particularly if it consists of developers from a traditional plan-driven background -is likely to struggle to be successful without a predefined architectural plan, but as the team becomes more experienced and develops an agile mind-set, it will become more comfortable working without the guidance of up-front plans:</p><p>[Inexperienced developers] will find it very difficult to start without having a concrete design in place. The culture will be different. They always want to follow what is already laid out. [...] An experienced set of developers or members in the team will make it easier to actually [form and evolve] the design." (P22, senior manager) F5: Customer Agility F5 (CUSTOMER AGILITY) describes the culture of the customer's organisation and the huge impact that it has on the amount of up-front architecture design a team does. A customer must have an agile culture that is similar to the team's culture, whether the team is in-house or an ISV (independent software vendor), for the team to be truly agile. A highly-agile team will not fit in well with a heavyweight process-oriented organisation that prefers planning and formal communication.</p><p>Like trust within a team, trust between the company and the team is important to help the company become part of the team and break down formal processes, improving agility:</p><p>"We've become the same team. That removes a lot of the tension, streamlines the process massively. [...] What we started finding is that our customers then start breaking down their own processes, and start making processes [agile] for us." (P27, CEO/coach) Highly agile customers do not require their development teams to produce excessive documentation or plans, and do not need fixed budget approval for fixed scope delivery.</p><p>Conversely, it is difficult for an agile team to operate in a non-agile process-driven environment: a customer that does not buy in to the agile mind set greatly reduces the team's ability to be agile. This can happen in many ways. For example, a non-agile customer that prefers a 'command and control' management style will impose their own processes upon the team.</p><p>P32 commented that some of their planning was simply because their customer expected it and preferred to see the developers perform traditional planning:</p><p>"We have learned that a lot of the planning we've done up-front has been more a planning art or a planning play or some sort of production because there's some air of respectability around it. It's necessary -people demand it." (P32, software development director) Another way in which a non-agile customer can negatively affect a team's agility is by taking on a 'benediction' role, in which it 'blesses' or approves the team's architectural decisions prior to development. A customer may want to ensure the decisions are compatible with a larger system, with company policy, or they may simply want comfort in the quality of the design decisions.</p><p>Many non-agile customers prefer the accountability of a fixed price contract with a fixed scope and fixed delivery dates -perhaps with penalties if milestones are not met: For a team, these contracts mean investing significant amounts of time up-front to map out in detail how much work is required to deliver the customer's list of requirements.</p><p>Other reasons for a customer not buying into the agile mind set include needing advance budget approval from their CFO or Board, for which they need a fixed scope, and simply being unable to commit to ongoing time with the development team. Agile developers solve this latter problem by spending more time planning to compensate for the lack of feedback, and hence are less agile. while inexperienced architects rely more on explicit decisions that are written down and which need more effort in the form of proofs of concept, experiments (spikes) and research.</p><p>It is also important for developers to know the technology being used. Knowledge or experience in the technology helps the team to speed up design and avoid the technology's weaknesses:</p><p>"The architect we had working on this worked on another project or two using this framework, plus also other portal ones, and has definite opinions on pitfalls to avoid." (P7, business analyst)</p><p>If a team does not have the required experience, they may have to gain that knowledge through research, or they may bring in someone with suitable experience to join the team.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>V. AGILE ARCHITECTURE STRATEGIES</head><p>The theory of agile architecture consists of six strategies that teams may choose from in response to the forces described above, and which help the teams determine how much architecture to design up-front. The strategies are S1 (RESPOND TO CHANGE), S2 (ADDRESS RISK), S3 (EMERGENT ARCHI-TECTURE), S4 (BIG DESIGN UP-FRONT) and S5 (USE FRAME-WORKS AND TEMPLATE ARCHITECTURES).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>S1: Respond to Change</head><p>A team's ability to use S1 (RESPOND TO CHANGE) is directly related to how agile it is. S1 increases the architecture's agility by increasing its modifiability and its tolerance of change, and allows the team to ensure the architecture continuously represents the best solution to the problem as it evolves:</p><p>" Agile teams use S1 because of F1 (REQUIREMENTS INSTA-BILITY). There are five tactics that teams can use to implement the strategy and design an agile architecture: keep designs simple, prove the architecture with code iteratively, use good design practices, delay decision-making, and plan for options.</p><p>Keeping designs simple means only designing for what is immediately required: no gold plating and no designing for what might be required or for what can be deferred. Proving the architecture with code iteratively means testing a design by building it and testing it in real life rather than through up-front analysis, and refining the design if it proves to be unsuitable. This tactic can be used once development has started. Using good design practices, such as separation of concerns, is important in all development whether agile or not, but is particularly important in agile development because it makes it easier to modify the architecture as requirements evolve. Delaying decision-making means not making architecture decisions too early; waiting until sufficient information on the requirements is known so that there is less likelihood of the decisions needing to be changed. Planning for options means building in generality and avoiding making decisions that are unnecessarily constrained and which may close off possible future requirements without significant refactoring.</p><p>Three of these tactics, keeping the design simple, proving the architecture with code iteratively and following good design practices, increase the modifiability of the architecture so that when requirements change or become known the architecture can be easily updated. The other two tactics, delaying decisions and planning for options, increase the architecture's tolerance of uncertainty (its resilience to change), so that any changes to the requirements have less impact on the architecture. Keeping the design simple, proving the architecture with code and delaying decisions all reduce upfront effort. Following good design practices and planning for options may slightly increase the up-front architecture effort, but will most likely decrease overall effort. The tactics are summarised in <ref type="table" target="#tab_0">Table II.</ref>  reduces the impact of risk before it causes problems, and is usually done up-front, particularly for risk relating to system-wide decisions (for example, risk in selecting the technology stack or top-level styles). Using S2, a team designs the architecture in sufficient detail that it is comfortable that it is actually possible to build the system with the required ASRs with a satisfactory level of risk:</p><p>"That's essentially what you're doing in the technical design/planning phase, you're trying to reduce the risk of the whole thing going off the rails [...] It's very much a risk-based process." (P36, development unit manager) More TECHNICAL RISK (F2) means more up-front architecture design is required, meaning the team is less able to use S1; to reduce risk, a team must sacrifice some of the team's ability to respond to change. The team can find a balance between S1 and S2 by doing sufficient up-front design to reduce risk to a satisfactory level, and delaying decisions where the impact of risk is low. The higher the impact of the risk, the more important it is to mitigate that risk early. For example, P33-P36's medical system had clinical and security risks that meant the design had to undergo additional architectural scrutiny:</p><p>"Anything that is deemed to relate to either a clinical risk or a security risk is actually assessed by a separate independent team, who will tell you how bad it [the risk] is." (P16a, CEO/chief engineer) while P2's customer was willing to risk a small financial loss in certain circumstances to get a cheaper system with less planning:</p><p>"The customer has said to us he is quite willing to trade the risk of accidentally redeeming the same voucher twice, once in a blue moon [...] so if two different people in different geographies within a tenth of a second of each other try to redeem the same voucher there's lowish odds that they'll redeem it twice." (P2, developer/architect) Teams can reduce risk through the use of research, modelling and analysis, performing experiments (spikes) or by building a 'walking skeleton' <ref type="bibr" target="#b35">[36]</ref> of the system.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>S3: Emergent Architecture</head><p>S3 (EMERGENT ARCHITECTURE) produces an architecture in which the team makes only the minimum architecture decisions up-front, such as selecting the technology stack and the highest level architectural styles and patterns. In some instances these minimum decisions will be implicit or will have already been made (and can therefore be considered as constraints), in which case the architecture is totally emergent.</p><p>When using S3, the team only considers the requirements that are immediately needed for its design, ignoring even highlevel requirements that are to be implemented in the longer term. S3 helps ensure the design is the simplest it can be, and the product being built can be released to market as quickly as possible, hence satisfying a need for EARLY VALUE (F3). For example, P29 looked no further than a few weeks ahead:</p><p>"We're doing bugger all [practically no up-front design] actually. Most of the time we're working a couple of iterations ahead, we're looking at the design, things that might have to go through to committee, so we tend not to plan a year or two out -we're planning a few weeks out." (P29, development manager) S3 is likely to be used when developing a minimum viable product, or MVP (see F3). If the system has demanding architecturally significant requirements (ASRs) or unique requirements, it may need a more complex solution that requires bespoke components or multiple frameworks, and more upfront design to address risk (S2). Hence F2 precludes an emergent design.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>S4: Big Design Up-Front</head><p>S4 (BIG DESIGN UP-FRONT) requires that the team acquires a full set of requirements and completes a full architecture design before development starts. There are no emergent design decisions, although the architecture may evolve during development. S4 is undesirable in agile development because it reduces the architecture's ability to use S1 (RESPOND TO CHANGE) by increasing the time to the first opportunity for feedback, increasing the chance that decisions will need to be changed later, and increasing the chance of over-engineering.</p><p>While S4 may be considered the case of addressing risk (S2) taken to the extreme, in reality the use of S4 is driven primarily by an absence of CUSTOMER AGILITY (F5) rather than the presence of TECHNICAL RISK (F2):</p><p>"There's a definite need to estimate [the total cost] and there's a definite need to give confidence on the functional scope at a big level." (P32, software development director)</p><p>The up-front design in S4 is sufficient to satisfy the nonagile customer: either sufficient to prove that the team knows how to solve the problem before starting, sufficient that the team can estimate the cost of the system for the given requirements for a competitive tender, or sufficient that they are able to complete the design without ongoing interaction with their customer:</p><p>"There's a definite need to estimate and there's a definite need to give confidence on the functional scope at a big level." (P32, software development director) While the team using S4 cannot fully implement S1 -for example, they cannot use the 'delay decisions' tactic -they may be able to use other S1 tactics, such as good design practices and planning for options so that they can still evolve their architecture as requirements change. Not being able to delay decisions, however, will compromise their ability to be agile:</p><p>"So if we're going to have to do a heavy architecture which plans for a year or two or five years into the future on every one of those experiments, we're screwed. We cannot be agile." (P29, development manager) Larger independent software vendors (ISVs) often use S4 because their customers are more likely to be larger processdriven organisations who require more financial accountability. Larger ISVs therefore often struggle to become as agile as smaller organisations.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>S5: Using Frameworks and Template Architectures</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>S5 (USE FRAMEWORKS AND TEMPLATE ARCHITECTURES)</head><p>is the use of software frameworks, and template and reference architectures sourced from particular framework vendors for use with those frameworks. Frameworks such as .NET, Hibernate and Ruby on Rails include default architectural patterns which constrain the systems to these patterns.</p><p>S4 provides the benefit of standard solutions to standard problems, which means that software engineers do not need to make as many architectural decisions, and can greatly reduce the effort required to design a system and get it up and running:</p><p>"So we don't have architectural discussions -we don't need to -the problem's been solved [in the framework]. Don't try to solve it again. So we have very, very little discussion." (P27, CEO/coach) Frameworks -particularly those that follow the 'convention over configuration' paradigm -also greatly reduce the complexity of the architecture because many of the architectural decisions are embedded in the framework, and hence architectural changes can be made with a lot less effort. What used to be considered architecture decisions in the past can now sometimes be considered design (non-architecture) decisions:</p><p>"What used to be architectural decisions ten years ago can now almost be considered design decisions because the tools allow you to change these things more easily." (P4, director of architecture) which means that fewer decisions have to be set in stone: "Those [structural] decisions can be very emergent nowadays; I don't think they're nearly as intractable." (P29, development manager) While frameworks and templates are hugely beneficial to all development methods, the ability to change architecture decisions more easily is most useful to agile methods.</p><p>Despite their immense importance and ubiquity, teams must be aware that frameworks cannot always provide a complete solution. If the problem is not standard, if the requirements are critical and the required architecture is sufficiently complex or unique, there may be no suitable frameworks or existing libraries that a team can use to implement a design, either as a whole or in part. In these situations a team needs to design and build bespoke components or libraries and, for those components, miss out on the benefits that frameworks can provide. Having to design bespoke components increases the complexity of the architecture decisions that need to be made and increases the technical risk -and hence increases the use of S2 (ADDRESS RISK). S5 can be used at the same time as any of the other strategies, S1-S4. <ref type="figure" target="#fig_4">Figure 3</ref> shows the relationships between the forces and the strategies. A team's use of S1 (RESPOND TO CHANGE) is triggered by the presence of F1 (REQUIREMENTS INSTABILITY). A team's agility, and thus its ability to use the tactics of S1, is increased by F4 (TEAM CULTURE), F5 (CUSTOMER AGILITY) and F6 (EXPERIENCE). Agility is not directly affected by F1; rather, less stability may motivate the team to improve its agility through improving F4, F5 and F6 so that it is better able to respond to change. S1 is in tension with S2 (ADDRESS RISK), which must be used to address F2 (TECHNICAL RISK), and hence S1 and S2 must be in balance. An extremely agile team that does not need to use S2 can, when triggered by F3 (the need for EARLY VALUE), reduce its up-front effort to the point where it is using S3 (EMERGENT ARCHITECTURE). On the other hand, a team with low levels of F4, F5 and F6 may have to use S4 (BIG DESIGN UP-FRONT), which will reduce its ability to use S1. S5 (USE FRAMEWORKS AND TEMPLATE ARCHITECTURES) can be used to significantly reduce development and design effort; in particular it significantly reduces risk and up-front effort for standard problems. A team successfully using S3 would typically be using S5 to build a low risk system.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>VI. DISCUSSION</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Relationships Between Forces and Strategies</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Relationships With Related Work</head><p>Abrahamsson, Ali Babar and Kruchten listed eight factors that affect up-front architecture design <ref type="bibr" target="#b5">[6]</ref>; one of these is rate of change (of requirements), which corresponds to F1 (REQUIREMENTS INSTABILITY). This research, however, has found that F1 does not affect the team's up-front design effort; rather, the reverse is true: the team's agility, and thus its ability to use S1 (RESPOND TO CHANGE), impacts its ability to reduce up-front effort and its ability to respond to unstable requirements. F2 (TECHNICAL RISK) is caused by complexity, and causes a team to use S2 (ADDRESS RISK), increasing up-front effort. Abrahamsson et al. identified size as a factor that affects upfront design <ref type="bibr" target="#b5">[6]</ref>. This research has found that size is not a direct factor in up-front effort; rather, complexity is, although size is an attribute of complexity <ref type="bibr" target="#b36">[37]</ref>. Size is possibly considered a proxy for complexity. Abrahamsson et al. listed three other factors that can affect F2 and hence S2: stable architecture, which is how well defined the architecture can be at the start of development, age of system, which is reflected in the legacy component of F2, and criticality, which affects the customer and team's tolerance of risk <ref type="bibr" target="#b5">[6]</ref>. Fairbanks proposed a non-agile-specific method using only risk to determine which architecture decisions should be made up-front <ref type="bibr" target="#b12">[13]</ref>. Boehm and Turner also discussed up-front architecture design being used to reduce risk <ref type="bibr" target="#b37">[38]</ref>. In an interview the lead for the NASA software architecture review board described spending more effort on areas where there are more challenging ASRs and hence more risk <ref type="bibr" target="#b38">[39]</ref>. We explored complexity and risk and its impact on up-front effort in an earlier paper <ref type="bibr" target="#b39">[40]</ref>.</p><p>F3 (EARLY VALUE) is a trigger for S3 (EMERGENT ARCHI-TECTURE). Another factor suggested by Abrahamsson et al. as affecting up-front design effort was the business model <ref type="bibr" target="#b5">[6]</ref>, of which the customer's need for F3 is a part. We described the effects of early value in an earlier paper <ref type="bibr" target="#b39">[40]</ref>.</p><p>F4 (TEAM CULTURE) lies at the heart of agile methodologies. A team culture that is people-focused and collaborative greatly reduces the time required to relay information <ref type="bibr" target="#b41">[41]</ref> and hence reduces the feedback cycle. A team with a highly agile culture has team members who are physically close together, are trusting and amicable, and use face-to-face communication instead of written documentation <ref type="bibr" target="#b41">[41]</ref>. Abrahamsson et al.'s team distribution factor affects the team's ability to communicate <ref type="bibr" target="#b5">[6]</ref>. The importance of team culture on agility is well recognised in the literature <ref type="bibr" target="#b41">[41]</ref>, <ref type="bibr" target="#b37">[38]</ref>, <ref type="bibr" target="#b42">[42]</ref>, as is trust <ref type="bibr" target="#b41">[41]</ref>, <ref type="bibr" target="#b43">[43]</ref>, <ref type="bibr" target="#b44">[44]</ref>.</p><p>F5 (CUSTOMER AGILITY) has similar effects to Abrahamsson et al.'s business model and governance factors <ref type="bibr" target="#b5">[6]</ref>, which both impact the customer. Small organisations are often more able to provide an agile environment, while large organisations often prefer heavy-weight processes and are non-learning <ref type="bibr" target="#b45">[45]</ref>, <ref type="bibr" target="#b46">[46]</ref>, preferring extensive planning and formal communication <ref type="bibr" target="#b41">[41]</ref>. Hence large organisations are often not very agile.</p><p>F6 (EXPERIENCE) is important in agile methodologies <ref type="bibr" target="#b37">[38]</ref>, as it is in other methodologies <ref type="bibr" target="#b47">[47]</ref>. Dreyfus and Dreyfus explained that as a learner moves from being a novice to becoming a master, decision-making changes from requiring analysis to being intuitive <ref type="bibr" target="#b48">[48]</ref> which speeds up the decisionmaking process and hence increases agility.</p><p>Kruchten, Obbink and Stafford called frameworks precooked architectures <ref type="bibr" target="#b0">[1]</ref> because much the architecture is defined within the framework. Mirakhorli and Cleland-Huang also noted the benefits of reference architectures <ref type="bibr" target="#b38">[39]</ref>. The use of frameworks and reference architectures, corresponding to S5 (USE FRAMEWORKS AND TEMPLATE ARCHITECTURES), make agile development more effective because they simplify the design and reduce the architectural (and development) effort required <ref type="bibr" target="#b39">[40]</ref>, <ref type="bibr" target="#b49">[49]</ref>. This simplified design and reduced effort increases the team's ability to use S1 (RESPOND TO CHANGE), reduces F2 (TECHNICAL RISK), and hence reduces the need to use S2 (ADDRESS RISK). Cervantes, Velasco-Elizondo and Kazman also noted that the framework functionality may need to be extended if it does not provide the required functionality out of the box <ref type="bibr" target="#b50">[50]</ref>. This need increases risk and effort, requiring increased use of S2.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>VII. LIMITATIONS</head><p>Like any grounded theory study, the result is only applicable to the domain and context being studied <ref type="bibr" target="#b29">[30]</ref>, and therefore cannot be assumed to be applicable to other contexts, or in general. The result is, to some extent, dependent on the research participants selected for the research and how they described their experiences.</p><p>We took a number of steps to prevent threats to the validity of the results. The first step was to minimise bias being introduced by similar participants (architecture experts) all taking a common perspective by including a number of non-architecting participants, such as customers and business analysts. Participants from different roles in the same team or organisation were also included to help negate any personal bias. The second step was to collect data in the form of documentation to back up data obtained from interviews, which helped prevent bias being introduced through only collecting data in one form. Thirdly, feedback on the emerging results was obtained directly from participants and from conference audiences to help validate the results.</p><p>We have evaluated the full theory <ref type="bibr" target="#b20">[21]</ref> using qualitative research criteria proposed by Lincoln and Guba <ref type="bibr" target="#b51">[51]</ref>, Miles and Huberman <ref type="bibr" target="#b52">[52]</ref> and Creswell <ref type="bibr" target="#b53">[53]</ref>. Criteria included trustworthiness, originality, resonance and usefulness.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>VIII. CONCLUSION</head><p>The aim of agile software development is to increase the delivery of value through the ability to respond to changing requirements. To increase agility, up-front effort is reduced, so that the customer can start providing feedback earlier.</p><p>Reducing the up-front design too much, however, could lead to an accidental architecture that does not support the team's ability to develop functionality and fails to meet requirements. To maximise agility, a team must find an appropriate tradeoff between a full up-front architecture design and a totally emergent design. This paper presented a grounded theory of agile architecture that describes how teams determine how much architecture they design up-front. The theory includes five strategies that teams use to determine how much architecture to design up-front. The strategies are chosen according to the context of the team and the system it is building, which is described by six forces.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 2 .</head><label>2</label><figDesc>An example of a concept emerging from its codes</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head></head><label></label><figDesc>Even within a week there's a lot of fluidity about [the customer]." (P27, CEO/founder/agile coach) Unstable requirements are caused by incomplete requirements and by changing requirements. Incomplete requirements are caused by the customer not initially knowing what they want, or coming up with new ideas about what they want during development.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>"</head><label></label><figDesc>They've mandated quite a draconian liquidated damages kind of risk contract, about [what happens] if you miss a milestone." (P32, software development director)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head></head><label></label><figDesc>F6: ExperienceF6 (EXPERIENCE) describes the impact that an experienced architect's tacit knowledge and implicit decision-making ability has on the time that an agile team spends on up-front design. Experienced architects have breadth of knowledge; they are more likely to be aware of suitable options for implementing a solution and better understand what will work and what will not. Hence they can make better decisions:"Figuring out whether there's something out there appropriate that already does it -that sort of thing -that's where experience and knowledge really come into play." (P36, development unit manager)While generally important for all software development methods, experience is more important in agile development because the tacit knowledge and implicit decision-making that come with experience supports agile development's reduced process and documentation, and reduces the up-front effort:"You implement certain patterns without thinking [...] you've done this kind of pattern for solving this kind of a problem, without even thinking that this is the way that you are going." (P16b, head of engineering)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig. 3 .</head><label>3</label><figDesc>The relationships between the forces and strategies. The rectangular boxes represent forces, and the round-cornered boxes strategies. Arrows represent dependencies or causal relationships: a change in the independent force or strategy causes either a positive change (solid line) or a negative change (dashed line) in the dependent force or strategy. A dotted line represents a trigger dependence: the presence of the force is a trigger for the corresponding strategy. The symbol ⊕ represents mutual exclusion.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>TABLE I SUMMARY</head><label>I</label><figDesc>OF PARTICIPANT DETAILS</figDesc><table><row><cell></cell><cell>Role</cell><cell>Experience in role</cell><cell>Organisation type</cell><cell>Domain</cell><cell>Agile methods</cell><cell>Team size or no. of teams</cell><cell>System description</cell></row><row><cell>P1</cell><cell>Developer</cell><cell>&gt; 15 years</cell><cell>Government agency</cell><cell>Health</cell><cell>Single developer</cell><cell>1 team member</cell><cell>Web-based, .NET</cell></row><row><cell>P2</cell><cell>Developer/ architect</cell><cell>20 years</cell><cell>ISV</cell><cell>E-commerce</cell><cell>Scrum</cell><cell>3 team members</cell><cell>.NET, cloud-based</cell></row><row><cell>P3</cell><cell>Devopment manager</cell><cell>6 years (agile)</cell><cell>ISV</cell><cell>Personnel</cell><cell>Scrum</cell><cell>3 teams</cell><cell>Web-based, .NET,</cell></row><row><cell>P4</cell><cell>Director of architecture</cell><cell>&gt; 20 years</cell><cell>ISV</cell><cell>Digital archiving</cell><cell>Scrum</cell><cell>5 developers</cell><cell>Java, rich client, suite of standalone tools</cell></row><row><cell>P5</cell><cell>Coach/dev. manager</cell><cell>20 years</cell><cell>Start-up</cell><cell>Entertainment</cell><cell>Scrum/ kanban</cell><cell>Various</cell><cell>Various</cell></row><row><cell>P6</cell><cell>Man. Dir./ lead dev.</cell><cell>20 years</cell><cell>Service provider</cell><cell>Telecoms</cell><cell>Iterative</cell><cell>1-3 developers</cell><cell>Suite of standalone applications</cell></row><row><cell>P7</cell><cell>Business analyst</cell><cell>5-6 years</cell><cell>ISV</cell><cell>Telecoms</cell><cell>Scrum</cell><cell>12 team members</cell><cell>Suite of web-based services</cell></row><row><cell>P8</cell><cell>Lead developer</cell><cell>6 years</cell><cell>ISV</cell><cell>Digital archiving</cell><cell>Scrum</cell><cell>4-14 team members</cell><cell>Ruby on Rails, Java back-end</cell></row><row><cell>P9</cell><cell>Developer</cell><cell>40 years</cell><cell>Financial services</cell><cell>Telecoms</cell><cell>Bespoke</cell><cell>2-24 team members</cell><cell>Web-based system</cell></row><row><cell>P10</cell><cell>Coach</cell><cell>25 years</cell><cell>Hardware and services</cell><cell>Transport</cell><cell>Scrum/XP</cell><cell>500-800 developers</cell><cell>Large distributed web-based system</cell></row><row><cell>P11a</cell><cell>Development manager</cell><cell>10 years</cell><cell>Government</cell><cell>Government services</cell><cell>Scrum</cell><cell>8 team members</cell><cell>Web-based, .NET</cell></row><row><cell>P11b</cell><cell>Architect</cell><cell>15+ years</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>P12</cell><cell>Senior developer</cell><cell>10 years</cell><cell>Financial services</cell><cell>Financial services</cell><cell>Scrum</cell><cell>6-7 developers</cell><cell>Web-based, .NET</cell></row><row><cell>P13</cell><cell>Architect</cell><cell>16 years</cell><cell>ISV</cell><cell>Medical</cell><cell>Scrum</cell><cell>12 team members</cell><cell>Monolithic .NET app</cell></row><row><cell>P14</cell><cell>Architect</cell><cell>10 years</cell><cell>ISV</cell><cell>Animal health</cell><cell>Scrum</cell><cell>6-8 team members</cell><cell>.NET, large GIS component</cell></row><row><cell>P15</cell><cell>Customer</cell><cell>4 years</cell><cell>Start-up service provider</cell><cell>Retail (electricity)</cell><cell>Scrum</cell><cell>7 developers</cell><cell>Ruby On Rails</cell></row><row><cell>P16a P16b</cell><cell>CEO/chief engineer Head of engineering</cell><cell>&gt; 10 years 10 years</cell><cell>ISV</cell><cell>Retail (health)</cell><cell>XP</cell><cell>5 team members</cell><cell>Ruby On Rails</cell></row><row><cell>P17</cell><cell>Manager/coach</cell><cell>&gt; 10 years</cell><cell>Government</cell><cell>Statistics</cell><cell>Scrum</cell><cell>6 dev + admin</cell><cell>Web-based, PHP using DAO pattern</cell></row><row><cell>P18</cell><cell>Dev. manager</cell><cell>10 years</cell><cell>Multinat. hardware vendor</cell><cell>Health</cell><cell>Scrum</cell><cell>15 team members</cell><cell>Web-based, Java platform</cell></row><row><cell>P19</cell><cell>Dev. manager</cell><cell>6-7 years</cell><cell>Start-up service provider</cell><cell>Retail (travel)</cell><cell>Lean</cell><cell>4 developers</cell><cell>PHP/Symfony, Javascript/Backbone</cell></row><row><cell>P20</cell><cell>Coach and trainer</cell><cell>20 years</cell><cell>Independent consultant</cell><cell>N/A</cell><cell>Scrum</cell><cell>N/A</cell><cell>N/A</cell></row><row><cell>P21a-</cell><cell>Manager/coach, architect,</cell><cell>20 years, N/A, N/A, N/A</cell><cell>ISV</cell><cell>Retail (publishing)</cell><cell>Scrum</cell><cell>3 teams; 40 total</cell><cell>.NET, Websphere Commerce, SAP,</cell></row><row><cell>P21d</cell><cell>team leader, team leader</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>others.</cell></row><row><cell>P22</cell><cell>Senior manager</cell><cell>14 years</cell><cell>ISV</cell><cell>Contact</cell><cell>Scrum/XP</cell><cell>More than 40 total</cell><cell>.NET</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell>management/marketing</cell><cell></cell><cell></cell><cell></cell></row><row><cell>P23a-</cell><cell>Engineering manager,</cell><cell>N/A, 6 years, N/A</cell><cell>Service provider</cell><cell>Pharmaceutical</cell><cell>Bespoke</cell><cell>3 teams</cell><cell>Various web based, client/server</cell></row><row><cell>P23c</cell><cell>product lead, team lead</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>P24</cell><cell>Customer</cell><cell>&gt; 10 years</cell><cell>Start-up service provider</cell><cell>Retail (electricity)</cell><cell>Scrum</cell><cell>7 developers</cell><cell>Ruby On Rails web applications</cell></row><row><cell>P25</cell><cell>Team lead</cell><cell>10 years</cell><cell>ISV</cell><cell>Banking</cell><cell>Scrum</cell><cell>1 team</cell><cell>.NET, single tier web</cell></row><row><cell>P26</cell><cell>Team lead</cell><cell>8 years</cell><cell>ISV</cell><cell>Water management</cell><cell>Scrum</cell><cell>8 team members</cell><cell>.NET, web based, 7 tier</cell></row><row><cell>P27</cell><cell>CEO/coach</cell><cell>16 years</cell><cell>Start-up service provider</cell><cell>Retail (electricity)</cell><cell>Scrum</cell><cell>7 developers</cell><cell>Ruby On Rails</cell></row><row><cell>P28</cell><cell>Technical lead</cell><cell>13 years</cell><cell>Service provider</cell><cell>Broadcasting</cell><cell>Scrum</cell><cell>42 team members</cell><cell>Python with Django, CMSs for multiple</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>websites</cell></row><row><cell>P29</cell><cell>Development manager</cell><cell>20 years</cell><cell>Banking</cell><cell>Banking</cell><cell>Kanban</cell><cell>20 team members</cell><cell>Web based, interface to mainframe</cell></row><row><cell>P30</cell><cell>Consulting architect</cell><cell>25 years</cell><cell>Service provider</cell><cell>Telecoms</cell><cell>Scrum</cell><cell>7 team members</cell><cell>Python with Django and Twisted, NoSQL</cell></row><row><cell>P31</cell><cell>Enterprise architect</cell><cell>25 years</cell><cell>Government</cell><cell>Transport</cell><cell>Bespoke</cell><cell>7 team members</cell><cell>Web services, SOA using .NET/WCF</cell></row><row><cell>P32</cell><cell>Software dev. director</cell><cell>&gt; 15 years</cell><cell>ISV</cell><cell>Government</cell><cell>FDD/kanban</cell><cell>N/A</cell><cell>N/A</cell></row><row><cell>P33</cell><cell>Product architecture team</cell><cell>15 years</cell><cell>Medical service providers</cell><cell>Medical</cell><cell>Kanban/Scrum</cell><cell>One team per product</cell><cell>Multiple product streams; SOA</cell></row><row><cell></cell><cell>leader</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>stream</cell><cell></cell></row><row><cell>P34</cell><cell>Development unit manager</cell><cell>15 years</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>P35</cell><cell>Design Engineer</cell><cell>N/A</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>P36</cell><cell>Development unit manager</cell><cell>12 years</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>P37</cell><cell>Consultant/ freelance</cell><cell>13 years</cell><cell>Service provider</cell><cell>Broadcasting</cell><cell>Bespoke/XP</cell><cell>15-16 team members</cell><cell>Java/embedded</cell></row><row><cell></cell><cell>software developer/architect</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head></head><label></label><figDesc>Maybe it'll cost a lot more to replace it [the architecture] a year later, but you already have some business...</figDesc><table /><note>" (P22, senior manager) and "If we needed to go to a million [end users] [...] we'd have to rewrite swathes of the software -you absolutely would have to. But it's a problem you can have once you've got a million users and you've got a million users worth of revenue." (P27, CEO/agile coach) -particularly important for start-ups with limited cash.</note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head>TABLE II A</head><label>II</label><figDesc>COMPARISON OF THE 'RESPOND TO CHANGE' TACTICS</figDesc><table><row><cell></cell><cell>Impact on</cell><cell>Reduces</cell></row><row><cell>Tactic</cell><cell>responsiveness</cell><cell>up-</cell></row><row><cell></cell><cell>to change</cell><cell>front</cell></row><row><cell></cell><cell></cell><cell>effort?</cell></row><row><cell>Keep designs simple</cell><cell>Increases modifiability</cell><cell>Yes</cell></row><row><cell>Prove the architecture</cell><cell>Increases modifiability</cell><cell>Yes</cell></row><row><cell>with code iteratively</cell><cell></cell><cell></cell></row><row><cell cols="2">Use good design practices Increases modifiability</cell><cell>No</cell></row><row><cell>Delay decision making</cell><cell>Increases tolerance of change</cell><cell>Yes</cell></row><row><cell>Plan for options</cell><cell>Increases tolerance of change</cell><cell>No</cell></row><row><cell>S2: Address Risk</cell><cell></cell><cell></cell></row><row><cell>S2 (ADDRESS RISK)</cell><cell></cell><cell></cell></row></table><note></note></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACKNOWLEDGEMENTS</head><p>We are grateful to Victoria University of Wellington for providing funding for this research, and to Ewan Tempero and Rashina Hoda for their invaluable feedback on this paper.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">The past, present, and future for software architecture</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Kruchten</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Obbink</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Stafford</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Software</title>
		<imprint>
			<biblScope unit="volume">23</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="22" to="30" />
			<date type="published" when="2006-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Architectural organizational patterns</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Booch</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Software</title>
		<imprint>
			<biblScope unit="volume">25</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="18" to="19" />
			<date type="published" when="2008-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">Extreme Programming Explained: Embrace Change</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Beck</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2005" />
			<publisher>Addison-Wesley Professional</publisher>
		</imprint>
	</monogr>
	<note>2nd ed</note>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Agile software development: it&apos;s about feedback and change</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Williams</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Cockburn</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer</title>
		<imprint>
			<biblScope unit="volume">36</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="39" to="43" />
			<date type="published" when="2003-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Agility and architecture: an oxymoron?</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Kruchten</surname></persName>
		</author>
		<ptr target="http://csse.usc.edu/csse/event/2009/Arch-Workshop/presentations/Kruchten" />
	</analytic>
	<monogr>
		<title level="m">SAC 21 Workshop: Software Architecture Challenges in the 21st Century</title>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Agility and architecture: Can they coexist?</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Abrahamsson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">A</forename><surname>Babar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Kruchten</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Software</title>
		<imprint>
			<biblScope unit="volume">27</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="16" to="22" />
			<date type="published" when="2010-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">The accidental architecture</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Booch</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Software</title>
		<imprint>
			<biblScope unit="volume">23</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="9" to="11" />
			<date type="published" when="2006-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">Architecting: How much and when?</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Boehm</surname></persName>
		</author>
		<editor>O&apos;Reilly</editor>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Architecture and agility: Married, divorced, or just good friends?</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Buschmann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Henney</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Software</title>
		<imprint>
			<biblScope unit="volume">30</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="80" to="82" />
			<date type="published" when="2013-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">An architectural oxymoron</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Booch</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Software</title>
		<imprint>
			<biblScope unit="volume">27</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page">96</biblScope>
			<date type="published" when="2010-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Software Architecture in Practice</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Bass</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Clements</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Kazman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ser. SEI Series in Software Engineering</title>
		<imprint>
			<publisher>Addison-Wesley</publisher>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
	<note>2nd ed.</note>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">The irrelevance of architecture</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Booch</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Software</title>
		<imprint>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="10" to="11" />
			<date type="published" when="2007-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">Just Enough Software Architecture: A Risk Driven Approach</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Fairbanks</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2010" />
			<publisher>Marshall and Brainerd</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">What does research say about agile and architecture</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">P</forename><surname>Breivold</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Sundmark</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Wallin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Larson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Fifth International Conference on Software Engineering Advances</title>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">The top 10 burning research questions from practitioners</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Freudenberg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Sharp</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Software</title>
		<imprint>
			<biblScope unit="volume">27</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="8" to="9" />
			<date type="published" when="2010-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">The legitimacy of Grounded Theory</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Allan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">European Conference on Research Methods (keynote address)</title>
		<imprint>
			<date type="published" when="2006-07" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">G</forename><surname>Zikmund</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">J</forename><surname>Babin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">C</forename><surname>Carr</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Griffin</surname></persName>
		</author>
		<title level="m">Business Research Methods, 8th ed. South-Western Cengage Learning</title>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">Essentials of Accessible Grounded Theory</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">N</forename><surname>Stern</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Porr</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2011" />
			<publisher>Left Coast Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Remodeling grounded theory</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">G</forename><surname>Glaser</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Holton</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Forum Qualitative Sozialforschung/Forum: Qualitative Social Research</title>
		<imprint>
			<date type="published" when="2004" />
			<biblScope unit="volume">5</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<title level="m" type="main">The Grounded Theory Perspective III</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">G</forename><surname>Glaser</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2005" />
			<publisher>Theoretical Coding. Sociology Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<title level="m" type="main">Reconciling agility and architecture: a theory of agile architecture</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">G</forename><surname>Waterman</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
		<respStmt>
			<orgName>Victoria University of Wellington</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Ph.D. dissertation</note>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title level="m" type="main">The Rational Unified process -an Introduction</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Kruchten</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1998" />
			<publisher>Addison Wesley</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
		<title level="m" type="main">The Process of Software Architecting</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Eeles</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Cripps</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2009" />
			<publisher>Pearson Education</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Agility from first principles: Reconstructing the concept of agility in information systems development</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Conboy</surname></persName>
		</author>
		<ptr target="http://isr.journal.informs.org/content/20/3/329.abstract" />
	</analytic>
	<monogr>
		<title level="j">Information Systems Research</title>
		<imprint>
			<biblScope unit="volume">20</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="329" to="354" />
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">What lessons can the agile community learn from a maverick fighter pilot?</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Adolph</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Agile Conference (AGILE &apos;06)</title>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<monogr>
		<title level="m" type="main">The Discovery of Grounded Theory: Strategies for Qualitative Research</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">G</forename><surname>Glaser</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">L</forename><surname>Strauss</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1967" />
			<publisher>Aldine de Gruyter</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">A critique of using grounded theory as a research method</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Allan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">;</forename><forename type="middle">G</forename><surname>Allan</surname></persName>
		</author>
		<ptr target="http://www.ejbrm.com/vol2/v2-i1/issue1-art1-allan.pdf" />
	</analytic>
	<monogr>
		<title level="j">Electronic Journal of Business Research Methods</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="issue">1</biblScope>
			<date type="published" when="2003-07" />
		</imprint>
	</monogr>
	<note>Electronic Journal of Business Research Methods</note>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Bryman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Social Research Methods</title>
		<imprint>
			<date type="published" when="2008" />
			<publisher>Oxford University Press</publisher>
		</imprint>
	</monogr>
	<note>3rd ed</note>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">How much architecture? Reducing the up-front effort</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Waterman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Noble</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Allan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Agile India 2012</title>
		<imprint>
			<date type="published" when="2012-02" />
			<biblScope unit="page" from="56" to="59" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<monogr>
		<title level="m" type="main">Constructing Grounded Theory: A Practical Guide Through Qualitative Analysis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Charmaz</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2006" />
			<publisher>SAGE Publications Ltd</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<monogr>
		<title level="m" type="main">Agile manifesto</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Beck</surname></persName>
		</author>
		<ptr target="http://agilemanifesto.org/" />
		<imprint>
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">The twin peaks of requirements and architecture</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Cleland-Huang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">S</forename><surname>Hanmer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Supakkul</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Mirakhorli</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Software</title>
		<imprint>
			<biblScope unit="volume">30</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="24" to="29" />
			<date type="published" when="2013-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Programs, life cycles, and laws of software evolution</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Lehman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Proceedings of the IEEE</title>
		<imprint>
			<biblScope unit="volume">68</biblScope>
			<biblScope unit="issue">9</biblScope>
			<biblScope unit="page" from="1060" to="1076" />
			<date type="published" when="1980-09" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<monogr>
		<title level="m" type="main">What is legacy code?</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Mcgovern</surname></persName>
		</author>
		<ptr target="http://www.flickspin.com/en/softwaredevelopment/whatislegacycode" />
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<monogr>
		<title level="m" type="main">The Lean Startup: How Today&apos;s Entrepreneurs Use Continuous Innovation to Create Radically Successful Businesses</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Ries</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2011" />
			<publisher>Crown Publishing Group</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<monogr>
		<title level="m" type="main">Software Architecture: Perspectives on an Emerging Discipline</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Shaw</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Garlan</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1996" />
			<publisher>Prentice-Hall, Inc</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">Complexity made simple</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Kruchten</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Canadian Engineering Education Association</title>
		<meeting>the Canadian Engineering Education Association</meeting>
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<analytic>
		<title level="a" type="main">Using Risk to Balance Agile and Plan-Driven Methods</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Boehm</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Turner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer</title>
		<imprint>
			<biblScope unit="volume">36</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="57" to="66" />
			<date type="published" when="2003-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<analytic>
		<title level="a" type="main">Traversing the twin peaks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Mirakhorli</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Cleland-Huang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Software</title>
		<imprint>
			<biblScope unit="volume">30</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="30" to="36" />
			<date type="published" when="2013-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<analytic>
		<title level="a" type="main">The effect of complexity and value on architecture planning in agile software development</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Waterman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Noble</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Allan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Agile Processes in Software Engineering and Extreme Programming (XP &apos;13)</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b40">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Springer</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b41">
	<analytic>
		<title level="a" type="main">Agile software development: the people factor</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Cockburn</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Highsmith</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer</title>
		<imprint>
			<biblScope unit="volume">34</biblScope>
			<biblScope unit="issue">11</biblScope>
			<biblScope unit="page" from="131" to="133" />
			<date type="published" when="2001-11" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b42">
	<analytic>
		<title level="a" type="main">The social nature of agile teams</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Whitworth</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Biddle</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Agile Conference (AGILE &apos;07)</title>
		<imprint>
			<date type="published" when="2007" />
			<biblScope unit="page" from="26" to="36" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b43">
	<analytic>
		<title level="a" type="main">Understanding the importance of trust in distributed agile projects: A practical perspective</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Dorairaj</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Noble</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Malik</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Agile Processes in Software Engineering and Extreme Programming</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b44">
	<monogr>
		<title level="m" type="main">Adaptive Software Development: a Collaborative Approach to Managing Complex Systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">A</forename><surname>Highsmith</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2000" />
			<publisher>Dorset House</publisher>
			<pubPlace>New York</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b45">
	<monogr>
		<title level="m" type="main">The fifth discipline: the art and practice of the learning organization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">M</forename><surname>Senge</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1990" />
			<publisher>Doubleday/Currency</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b46">
	<analytic>
		<title level="a" type="main">Agile undercover: When customers don&apos;t collaborate</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Hoda</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Noble</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Marshall</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Agile Processes in Software Engineering and Extreme Programming</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2010" />
			<biblScope unit="volume">48</biblScope>
			<biblScope unit="page" from="73" to="87" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b47">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Cockburn</surname></persName>
		</author>
		<title level="m">Agile Software Development: The Cooperative Game</title>
		<imprint>
			<publisher>Addison-Wesley</publisher>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
	<note>2nd ed</note>
</biblStruct>

<biblStruct xml:id="b48">
	<analytic>
		<title level="a" type="main">A five-stage model of the mental activities involved in directed skill acquisition</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">E</forename><surname>Dreyfus</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">L</forename><surname>Dreyfus</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">DTIC Document, Tech. Rep</title>
		<imprint>
			<date type="published" when="1980" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b49">
	<analytic>
		<title level="a" type="main">Agility Drivers</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Spinellis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Software</title>
		<imprint>
			<biblScope unit="volume">28</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page">96</biblScope>
			<date type="published" when="2011-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b50">
	<analytic>
		<title level="a" type="main">A principled way to use frameworks in architecture design</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Cervantes</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Velasco-Elizondo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Kazman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Software</title>
		<imprint>
			<biblScope unit="volume">30</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="46" to="53" />
			<date type="published" when="2013-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b51">
	<analytic>
		<title level="a" type="main">But is it rigorous? Trustworthiness and authenticity in naturalistic evaluation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><forename type="middle">S</forename><surname>Lincoln</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">G</forename><surname>Guba</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">New Directions for Program Evaluation</title>
		<imprint>
			<biblScope unit="volume">1986</biblScope>
			<biblScope unit="issue">30</biblScope>
			<biblScope unit="page" from="73" to="84" />
			<date type="published" when="1986" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b52">
	<monogr>
		<title level="m" type="main">Qualitative Data Analysis: An Expanded Sourcebook</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">B</forename><surname>Miles</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">M</forename><surname>Huberman</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1994" />
			<publisher>SAGE Publications, Inc</publisher>
		</imprint>
	</monogr>
	<note>2nd ed</note>
</biblStruct>

<biblStruct xml:id="b53">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">W</forename><surname>Creswell</surname></persName>
		</author>
		<title level="m">Research Design: Qualitative, Quantitative, and Mixed Methods Approaches</title>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
	<note>4th ed. SAGE</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
