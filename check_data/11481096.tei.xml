<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/cindy/tmp/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Neural Fitted Q Iteration -First Experiences with a Data Efficient Neural Reinforcement Learning Method</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Martin</forename><surname>Riedmiller</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Neuroinformatics Group</orgName>
								<orgName type="institution">University of Onsabrück</orgName>
								<address>
									<postCode>49078</postCode>
									<settlement>Osnabrück</settlement>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Neural Fitted Q Iteration -First Experiences with a Data Efficient Neural Reinforcement Learning Method</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-01-31T12:42+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
				<p>This paper introduces NFQ, an algorithm for efficient and effective training of a Q-value function represented by a multi-layer perceptron. Based on the principle of storing and reusing transition experiences, a model-free, neural network based Reinforcement Learning algorithm is proposed. The method is evaluated on three benchmark problems. It is shown empirically, that reasonably few interactions with the plant are needed to generate control policies of high quality.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>When addressing interesting Reinforcement Learning (RL) problems in real world applications, one sooner or later faces the problem of an appropriate method to represent the value function. Neural networks, in particular multilayer perceptrons, offer an interesting perspective due to their ability to approximate nonlinear functions. Although a lot of successful applications exist <ref type="bibr" target="#b8">[Tes92,</ref><ref type="bibr" target="#b3">Lin92,</ref><ref type="bibr" target="#b6">Rie00]</ref>, also a lot of problems have been reported <ref type="bibr" target="#b0">[BM95]</ref>. Many of these problems arise, since the representation mechanism in a multi-layer perceptron is not local, but global: A weight change induced by an update in a certain part of the state space might influence the values in arbitrary other regions -and therefore destroy the effort done so far in other regions. This leads to typically very long learning times or even to the final failure of learning at all. On the other hand, a global representation scheme can in principle have a very positive effect: by assigning similar values to related areas, it can exploit generalisation effects and therefore accelerate learning considerably.</p><p>Therefore the question is: how can we exploit the positive properties of a global approximation realized in a multi-layer perceptron while avoiding the negative ones? One key access to this question is that we need to constrain the malificious influence of a new update of the value function in a multi-layer perceptron. The principle idea that underlies our approach is simple: we have to make sure, that at the same time we make an update at a new datapoint, we also offer previous knowledge explicitly. Here, we implement this idea by storing all previous experiences in terms of state-action transitions in memory. This data is then reused every time the neural Q-function is updated.</p><p>The algorithm proposed belongs to the family of fitted value iteration algorithms <ref type="bibr" target="#b2">[Gor95]</ref>. They can be seen as a special form of the 'experience replay' technique <ref type="bibr" target="#b3">[Lin92]</ref>, where value iteration is performed on all transition experiences seen so far. Recently, several algorithms have been introduced in this spirit of batch or off-line Reinforcement Learning, e.g. LSPI <ref type="bibr" target="#b4">[LP03]</ref>. Our method is a special realisation of the 'Fitted Q Iteration', recently proposed by Ernst et.al <ref type="bibr" target="#b1">[EPG05]</ref>. Whereas Ernst et.al examined tree based regression methods, we propose the use of multilayer-perceptrons with an enhanced weight update method. Our method is therfore called 'Neural Fitted Q Iteration' (NFQ). In particular, we want to stress the following important properties of NFQ:</p><p>the method is model-free. The only information required from the plant are transition triples of the form (state, action, successor state). -learning of successful policies is possible with relatively few training examples (data efficiency). This enables the learning algorithm to directly learn from real world interactions. -although requiring much less knowledge about the plant than analytical controllers, the method is able to find control policies, that are able to compare well to analytically designed controllers (see cart-pole regulator benchmark).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Main Idea</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Markovian Decision Processes</head><p>The control problems considered in this paper can be described as Markovian Decision Processes (MDPs). An MDP is described by a set S of states, a set A of actions, a stochastic transition function p(s, a, s ) describing the (stochastic) system behavior and an immediate reward or cost function c : S × A → R. The goal is to find an optimal policy π * : S → A, that minimizes the expected cumulated costs for each state. In particular, we allow S to be continuous, assume A to be finite for our learning system, and p to be unknown to our learning system (model-free approach). Decisions are taken in regular time steps with a constant cycle time.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Classical Q-Learning</head><p>In classical Q-learning, the update rule is given by</p><formula xml:id="formula_0">Q k+1 (s, a) := (1 − α)Q(s, a) + α(c(s, a) + γ min b Q k (s , b))</formula><p>where s denotes the state where the transition starts, a is the action that is applied, and s is the resulting state. α is a learning rate that has to be decreased in the course of learning in order to fulfill the conditions of stochastic approximation and γ is a discounting factor (see e.g. <ref type="bibr" target="#b7">[SB98]</ref>). It can be shown, that under mild assumptions Q-learning converges for finite state and action spaces, as long as every state action pair is updated infinitely often. Then, in the limit, the optimal Q-function is reached. Typically, the update is performed on-line in a sample-by-sample manner, that is, every time a new transition is made, the value function is updated.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Q-Learning for Neural Networks</head><p>In principle, the above Q-learning rule can be directly implemented in a neural network. Since no direct assignment of Q-values like in a table based representation can be made, instead, an error function is introduced, that aims to measure the difference between the current Q-value and the new value that should be assigned. For example, a squared-error measure like the following can be used:</p><formula xml:id="formula_1">error = (Q(s, a) − (c(s, a) + γ min b Q(s , b))) 2</formula><p>. At this point, common gradient descent techniques (like the 'backpropagation' learning rule) can be applied to adjust the weights of a neural network in order to minimize the error. Like above, this update rule is typically applied after each new sample.</p><p>The problem with this on-line update rule is, that typically, several ten thousands of episodes have to be done until an optimal or near optimal policy has been found <ref type="bibr" target="#b6">[Rie00]</ref>. One reason for this is, that if weights are adjusted for one certain state action pair, then unpredictable changes also occur at other places in the state-action space. Although in principle this could also have a positive effect (generalisation) in many cases, in our experiences this seems to be the main reason for unreliable and slow learning.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Neural Fitted Q Iteration (NFQ)</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Basic Idea</head><p>The basic idea underlying NFQ is the following: Instead of updating the neural value function on-line (which leads to the problems described in the previous section), the update is performed off-line considering an entire set of transition experiences. Experiences are collected in triples of the form (s, a, s ) by interacting with the (real or simulated) system 1 . Here, s is the original state, a is the chosen action and s is the resulting state. The set of experiences is called the sample set D.</p><p>The consideration of the entire training information instead of on-line samples, has an important further consequence: It allows the application of advanced supervised learning methods, that converge faster and more reliably than online gradient descent methods. Here we use Rprop <ref type="bibr" target="#b5">[RB93]</ref>, a supervised learning method for batch learning, which is known to be very fast and very insensitive with respect to the choice of its learning parameters. The latter fact has the advantage, that we do not have to care about tuning the parameters for the supervised learning part of the overall (RL) learning problem.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">The NFQ -Algorithm</head><p>NFQ is an instance of the Fitted Q Iteration family of algorithms <ref type="bibr" target="#b1">[EPG05]</ref>, where the regression algorithm is realized by a multi-layer perceptron. The algorithm is displayed in figure 1. It consists of two major steps: The generation of the training set P and the training of these patterns within a multi-layer perceptron. </p><formula xml:id="formula_2">input l = s l , u l , target l = c(s l , u l , s l ) + γ min b Q k (s l , b) Rprop training(P ) → Q k+1 k:= k+1 } While (k &lt; N)</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Fig. 1. Main loop of NFQ</head><p>Since at this point, training the Q-function can be done as batch learning of a fixed pattern set, we can use more advanced supervised learning techniques, that converge more quickly and more reliably than ordinary gradient descent techniques. In our implementation, we use the Rprop algorithm for fast supervised learning <ref type="bibr" target="#b5">[RB93]</ref>. The training of the pattern set is repeated for several epochs (=complete sweeps through the pattern set), until the pattern set is learned succesfully.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Sample Setting of Costs</head><p>Here, we will give an example setting of the immediate cost structure, which can be used in many typical reinforcement learning settings. We find it useful to use a more or less standardized procedure to setup the learning problem, but we want to stress that NFQ is by no means tailored this type of cost function, but works with arbitrary cost structures.</p><p>In the following, we denote the set of goal states S + , the set of forbidden states are denoted by S − . S + therefore denotes the region, where the system should finally be controlled to (and in case of a regulator problem, should be kept in), and S − denotes regions in state space, that must be avoided by a correct control policy.</p><p>Within this setting, the generation of training patterns is modified as follows:</p><formula xml:id="formula_3">target l = ⎧ ⎨ ⎩ c(s l , u l , s l ) , if s l ∈ S + C − , if s l ∈ S − c(s l , u l , s l ) + γ min b Q k (s l , b) , else (standard case) (1)</formula><p>Setting c(s l , u l , s l ) to a positive constant value c trans means to aim for a minimum-time controller. In technical process control, this is often desirable, and therefore we choose this setting in the following. C − is set to 1.0, since this is the maximum output value of the multi-layer perceptron that we use. In regulator problems (see section 4), reaching a goal state does not terminate the episode. Therefore, the first line in the above equation must not be applied. Instead, only line 2 and 3 are executed and c(s</p><formula xml:id="formula_4">l , u l , s l ) = 0, if s l ∈ S + and c(s l , u l , s l ) = c trans , otherwise.</formula><p>Note that due to its purity, this setting is widely applicable and no prior knowledge about the environment (like for example the distance to the goal) is incorporated.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Variants</head><p>Several variants can be applied to the basic algorithm. In particular, for the experiments in section 5.2 and 5.3 we used a version, where we incrementally add transitions to the experience set. This is especially useful in situations, where a reasonable set of experiences can not be collected by controlling the system with purely random actions. Instead, training samples are collected by greedily exploiting the current Q k function and added to the sample set D.</p><p>Another heuristic that we found helpful, is to add 'artificial' training patterns from the goal region, which have a known target value of 0. This technique 'clamps' the neural value function to zero in the goal region, and we therefore call it the hint-to-goal-heuristic. Note that no additional prior knowledge is required to generate the patterns, since the goal region is already known in the task specification.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Benchmarking</head><p>The following gives a short overview of the intention of the benchmarks done in the empirical section.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Types of Tasks</head><p>In control problems, three basic types of task specification might be distinguished (there might be more, but for our purposes, this categorisation is sufficient):</p><p>avoidance control task -keep the system somewhere within the 'valid' region of state space. Pole balancing is typically defined as such a problem, where the task is to avoid that the pole crashes or the cart hits the boundary of the track. -reaching a goal -the system has to reach a certain area in state space. As soon as it gets there, the task is immediately finished. Mountaincar is typically defined as getting the cart to a certain position up the hill. -regulator problem -the system has to reach a certain region in state space and has to be actively kept there by the controller. This corresponds to the problems typically tackled with methods of classical control theory.</p><p>The problem types show different levels of difficulty, even when the underlying plant to be controlled is the same. In the following, we consider three benchmark problems, where each belongs to one of the above categories.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Evaluating Learning Performance</head><p>Each learning experiment consists of a number of episodes. An episode is a sequence of control cycles, that starts with an initial state and ends if the current state fulfills some termination condition (e.g. the system reached its goal state or a failure occured) or some maximum number of cycles has been reached.</p><p>Learning time in principle can be measured in many different ways: number of episodes needed, number of cycles needed, number of updates performed, absolute computation time, etc.</p><p>Since we are interested in methods that can directly learn on real systems, our preferred measure of learning effort is the number of cycles needed to achieve a certain performance. This number is directly related to the amount of interaction with the plant to be controlled. By multiplying the number of cycles with the length of the control interval, we get the absolute real time that we would have to spend on a real system to achieve a certain performance.</p><p>We also give the number of episodes that is needed to learn a task. Although this is not as expressive as the number of cycles (since this figure drastically depends on the maximum allowed length of a training episode), it is a commonly used measure and gives at least a rough intuition about the learning effort.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Evaluating Controller Performance</head><p>Controller performance is evaluated with respect to some cost-measure, that evaluates the average performance over a certain amount of control episodes. In principle this cost measure can be chosen arbitrary. Due to its practical relevance, we use the average time to the goal as a performance measure for the controller. In the regulator problem case, we measure the overall time outside the target region. This takes the fact into account, that a controlled system might leave the target region again. Note that the learning controller might have an internal goal formulation that differs from the performance measure (i.e. by using discounting or shaping rewards).</p><p>Another important aspect when evaluating controller performance is to specify the 'working region' of the controller, that means the set of starting states, for which the controller should work. We distinguish between the following types of working regions:</p><p>always start from a single starting state start from one of a finite set of starting states start from an arbitrary random state within a starting region</p><p>In the following experiments, we use the third case, which is the most general and (typically) the most challenging one.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Empirical Results</head><p>All experiments are done using CLS 2 (Closed Loop System Simulator) , a software system designed to benchmark (not only) RL controllers on a wide variety of plants.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">The Pole Balancing Task</head><p>The task is to balance a pole at the upright position by applying appropriate forces to the system. System equations and parameters are the same as in <ref type="bibr" target="#b4">[LP03]</ref>. NFQ uses a multilayer-perceptron with 3 inputs (2 for the state, 1 for the action), two hidden layers with 5 neurons each and 1 output. For all neurons, sigmoidal activation functions with outputs between 0 and 1 were used.</p><p>Results. Lagoudakis and Parr reported very good results both for their LSPI approach and Q-learning with experience replay using a linear function approximator with reasonably selected basis functions <ref type="bibr" target="#b4">[LP03]</ref>. The learned controllers were tested on 1000 test episodes with a maximum length of 300 seconds each. LSPI reached an average balancing time of 285 seconds after 1000 training episodes. This means, that most but not all of the training trials generated totally successful policies. For Q-learning with experience replay they report a balancing time of 'about 300' seconds after 750 episodes of training <ref type="bibr" target="#b4">[LP03]</ref>. Results of the NFQ method are shown in table 1. The experiments were repeated for 50 times. Each experiment had a different set of training samples and a different initialisation of the neural network weights. With only 50 training episodes (corresponding to about 300 transition samples), NFQ was able to find totally successful policies (policies that balanced the pole for the full 300 seconds for all the test episodes) in 23 out of 50 experiments. Using more training episodes, the result improves. Using only 200 training episodes, a successful policy could be found reliably in all of the 50 experiments. This is a remarkable result with respect to training data efficiency and gives some hint to the benefit of generalisation ability of a multilayer-perceptron.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">The Mountain Car Benchmark</head><p>The mountain car benchmark is about accelerating a car up to the top of the hill, where for many situations the acceleration of the car is too weak to directly go to the top, but instead the car has to move to the other direction to get enough energy <ref type="bibr" target="#b7">[SB98]</ref>. The control interval is t = 0.05s. Actions are restricted within the interval [−4, 4]. The road ends at -1m, i.e. the position must fulfill the constraint position &gt; −1m. The task is to reach the top, which means that then, the position must be larger or equal to 0.7m. For testing performance, 1000 starting states are drawn randomly from the interval (−1, 0.7). The initial velocity of the cart is set to 0. Performance is measured by the average number of cycles to the goal.</p><p>Learning System Setup. Two actions are provided to the learning controller, -4 and +4. For training, initial starting positions are drawn randomly from (−1, 0.7), the initial velocity of the car was always set to zero. Training trajectories had a maximum length of 50 cycles. An episode was stopped, if the system entered S − (failure by constraint violation) or entered S + (success). Each training trajectory was generated by a controller, that greedily exploited the current Q-value function. The Q-value function was represented by a multi-layer perceptron with 3 input neurons (2 state variables and 1 action), 2 layers of 5 hidden neurons each and 1 output neuron, all equiped with sigmoidal activation functions. The weights of the network were randomly initialized within [−0.5, 0.5].</p><p>After each episode, one iteration of the inner NFQ loop was performed. The hint-to-goal heuristic was used with a factor of 100. For each transition, costs of c trans = 0.01 were given.</p><p>Results. Results of the NFQ approach on the mountain car benchmark are shown in table 2. The results are averaged over 20 experiments. Experiments differ in the randomly drawn starting states for training and the randomly initialized neural Q-function. Each trial was stopped after 500 training episodes. All 20 experiments produced a successful policy, i.e. a policy that was able to reach the goal state for all of the 1000 randomly drawn starting positions.</p><p>To generate a successful policy, only about 71 episodes or 2777 cycles were needed in average over all experiments. This corresponds to less than 2 and a half minutes of training in real time. In the best case, a successful policy could be found in only 356 cycles, but even in worst case, only 10054 cycles were needed, which corresponds to about 8 and a half minutes in real time and therefore still is a very realistic number for an assumed interaction with a real system. Finding a fast policy to the goal can be done in about 296 episodes or about 11000 cycles respectively, corresponding to about 9 minutes in real time. Again, this is a very reasonable number for direct interaction with a real system. <ref type="table">Table 2</ref>. Results of NFQ on the mountain car benchmark. The upper part reports on the training effort to reach a succesful policy. A policy is successful, if all test situations are controlled to the goal state. The table shows the figures for the average (best/ worst) number of episodes, the average (best/ worst) number of cycles and the corresponding time for interacting with a real system. The lower part reports on the learning effort to reach an optimized policy. In average over all training trials, the average best costs are 28.7. This value is slightly better than the performance achieved with a fine granulated Q- The best policies found needed only an average of 28.7 cycles to reach the goal. This figure compares well to a table-based Q-learning approach, which yielded an average of 29.0 cycles to reach the goal. This means that we can expect the NFQ controllers to be pretty close to the optimum. As a side remark (not meant as a true comparison): to get to this result, table based Q-learning required 300,000 episodes (with a maximum length of 300 cycles), and the Q-table had a resolution of 250 × 250 × 2 entries.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">The Cartpole Regulator Benchmark</head><p>System dynamics of the cartpole system are described in <ref type="bibr" target="#b7">[SB98]</ref>. The control interval is t = 0.02s. Actions are restricted within the interval [−10, 10]. The position is restricted by the constraint −2.4 ≤ pos ≤ 2.4. For testing performance, 1000 starting states are drawn randomly. Results on the cartpole system are typically reported with respect to maximum balancing time. Here, we report results on a more difficult task that comprises balancing, namely cartpole regulation. The task is to move the cart to a certain position and keep it there while preventing the pole from falling. The target position of the cart is the middle of the track, with a tolerance of ±0.05m. As a further complication, we allow initial starting states deviating a lot from the 'all-zero' position: for testing performance, initial pole angles are randomly drawn from [−0.3, 0.3] (in rad), positions are drawn from [−1., 1.] (in m), initial velocities are set to 0.</p><p>This more complicated formulation of the cartpole benchmark is closer to realistic control tasks and the resulting controllers can be compared to control policies derived by classical controller design methods. , cart velocity and angular velocity are initially set to zero. Training episodes had a maximum length of 100 cycles. Each training episode was generated by a controller, that greedily exploited the current Q-value function. The Q-value function was represented by a multi-layer perceptron with 5 inputs, 2 hidden layers with 5 neurons each, and one output neuron, all equiped with sigmoidal activation functions. The weights of the network were randomly initialized within [−0.5, 0.5]. After each episode, one loop of the NFQ algorithm was performed. The hint-to-goal heuristic was used with a factor of 100. For each transition, costs of c trans = 0.01 were given.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Learning System</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Results</head><p>. Results for the cart-pole benchmark are shown in table 3. Performance is tested on 1000 testing episodes starting from randomly drawn initial states and having a maximum length of 3000 cycles. In the cartpole regulator benchmark, a controller is successful, if at the end of the episode, the pole is still upright and the cart is at its target position 0 within ±0.05m tolerance. Note that all the controllers that solve the regulator problem also solve the balancing problem. Typically, the balancing problem is solved much earlier than the regulator problem (figures not shown here). Again, training is done very efficiently. Although the control problem is challenging, a moderate amount of sample transitions -an average of 14439.8 cycles to find a successful policy and an average of 28821.1 cycles to find the best controller -are sufficient. This corresponds to an average real time of 5 minutes (or 10 minutes respectively for the best controller) that would be needed to do the collection of transition samples on a corresponding real system.</p><p>To have a better feeling for the control performance of the learned controller, we analytically designed a linear controller for the cartpole regulator benchmark. We used a pole assignment method where we placed the poles of the closed loop system such that it was stable. Additionally, we tried to find parameters that produced control actions within the interval [−10, +10] according to the above specification. The control law used was u = −R x, where R = (30.61, 7.77, 0.45, 1.72) and x is the state vector. For the linear controller, the average number of cycles outside the goal region was 402.1 over the 1000 test starting positions. The neural controllers that were learned had an average cost of 132.9, which means that they are about 3 times as fast as the linear controller. This is an even more remarkable result, if one considers, that no prior knowledge about plant behaviour was available to develop the neural policy.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Conclusion</head><p>The paper proposes NFQ, a memory based method to train Q-value functions based on multi-layer perceptrons. By storing and reusing all transition experiences, the neural learning process can be made very data efficient and reliable. Additionally, by allowing for batch supervised learning in the core of adaptation, advanced supervised learning techniques can be applied that provide reliable and quick convergence of the supervised learning part of the problem. NFQ allows to exploit the positive effects of generalisation in multi-layer perceptrons while avoiding their negative effects of disturbing previously learned experiences.</p><p>The exploitation of generalisation leads to highly data efficient learning. This is shown in the three benchmarks performed. The amount of training experience required for learning successful policies is considerably low. The corresponding time for acquisition of the training data on a hypothetic real plant lies in the range of a few minutes for all three benchmarks performed.</p><p>For all three benchmarks, the same neural network structure was successfully used. Of course, this does not mean, that we have found the one neural network that solves all control problems, but it is a positive hint with respect to the robustness of NFQ with respect to the choice of the underlying neural network. Robustness against the parametrisation of a method is of special importance for practical applications, since the search for sensitive parameters can be a resource consuming issue.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><label></label><figDesc>The input part of each training pattern consists of the state s l and action a l of training experience l. The target value is computed by the sum of the transition costs c(s l , a l , s l+1 ) and the expected minimal path costs for the successor state s l , computed on the basis of the current estimate of the Q−function, Q k . NFQ main() { input: a set of transition samples D; output: Q-value function QN k=0 init MLP() → Q0; Do { generate pattern set P = {(input l , target l ), l = 1, . . . , #D} where:</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head></head><label></label><figDesc>Three actions are available, left force (-50 N), right force (+50 N) and no force. Uniform noise in [−10, 10] is added to the system. Cycle length is 0.1 s. The state space is continuous and consists of the angle and the angular velocity. An episode was counted as a failure, if the angle of the pole exceeded ±π/2 respectively. Learning System Setup. For comparison, we choose the same cost structure as in [LP03]: Immediate costs of 0 arise, if the angle remains within [−π/2, π/2] ('S + '), if the angle gets outside this region, the episode is stopped and costs of +1 are given. A discount factor of γ = 0.95 is used. Transition samples were generated by starting the pole in an upright position and then applying random control signals until failure. The average length of a training episode was about 6 cycles.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head></head><label></label><figDesc>Setup. Two actions are available to the learning controller, -10N and +10N. For training, initial starting positions for the cart are drawn randomly from [−2.3, 2.3], initial pole angles are drawn from [−0.3, 0.3] (in rad)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Table 1 .</head><label>1</label><figDesc>Results of NFQ on the pole balancing benchmark. Left column reports the number of random episodes that were used for training. The length of each episode was about cycles. Altogether, 50 repetitions of the experiment were done. For each experiment, a new set of random episodes was produced. Using 200 or more training episodes (about 1200 cycles, corresponding to minutes real time), all experiments generated successful policies, i.e. the controller balanced the pole for all the test cases for the maximum time 300 s.</figDesc><table><row><cell cols="2"># random episodes successful learning trials</cell></row><row><cell></cell><cell>23/50 (46%)</cell></row><row><cell></cell><cell>44/50 (88 %)</cell></row><row><cell>150</cell><cell>48/50 (96 %)</cell></row><row><cell></cell><cell>50/50 (100 %)</cell></row><row><cell></cell><cell>50/50 (100 %)</cell></row><row><cell></cell><cell>50/50 (100 %)</cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>table (</head><label>(</label><figDesc></figDesc><table><row><cell>29.0).</cell><cell></cell><cell></cell></row><row><cell></cell><cell cols="2">Mountain Car</cell></row><row><cell></cell><cell cols="2">First successful policy</cell></row><row><cell></cell><cell cols="3">episodes cycles interaction time costs</cell></row><row><cell cols="2">average 70.95 2777.0</cell><cell>2m19s</cell><cell>41.05</cell></row><row><cell>best</cell><cell>10</cell><cell></cell></row><row><cell>worst</cell><cell></cell><cell></cell></row><row><cell cols="4">Best policy found (within 500 episodes)</cell></row><row><cell></cell><cell cols="3">episodes cycles interaction time costs</cell></row><row><cell cols="2">average 296.6 10922.8</cell><cell>9m06s</cell><cell>28.7</cell></row><row><cell>best</cell><cell>101</cell><cell></cell></row><row><cell>worst</cell><cell></cell><cell></cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>Table 3 .</head><label>3</label><figDesc>Results of NFQ on the cart-pole regulator benchmark. Training time was restricted to 500 episodes per trial. For an interpretation of the figures, see explanation at table for the mountain car benchmark.</figDesc><table><row><cell></cell><cell cols="3">Cart Pole Regulator</cell></row><row><cell></cell><cell cols="3">First successful policy</cell></row><row><cell></cell><cell cols="3">episodes cycles interaction time costs</cell></row><row><cell cols="3">average 197.3 14439.8</cell><cell>4m49s</cell><cell>319.1</cell></row><row><cell>best</cell><cell>75</cell><cell>4016</cell></row><row><cell>worst</cell><cell>309</cell><cell>24132</cell></row><row><cell cols="4">Best policy found (within 500 episodes)</cell></row><row><cell></cell><cell cols="3">episodes cycles interaction time costs</cell></row><row><cell cols="3">average 354.0 28821.1</cell><cell>9m 36s</cell><cell>132.9</cell></row><row><cell>best</cell><cell>119</cell><cell>8044</cell></row><row><cell>worst</cell><cell>489</cell><cell>43234</cell></row></table><note></note></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot">J. Gama et al. (Eds.): ECML 2005, LNAI 3720, pp. 317-328, 2005. c Springer-Verlag Berlin Heidelberg 2005</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1">Note that often experiences are collected in four-tuples with the additional entry denoting the immediate costs or reward from the environment. Since we take an engineering view of the learning problem, we think of the immediate costs as something being specified by the designer of the learning system rather than something that occurs naturally in the environment and can only be observed. Therefore, costs come in at a later point and also potentially can be changed without collecting further experiences. However, the basic working of the algorithm is not touched by this.</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="2">available at clss.sf.net</note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Generalization in reinforcement learning: Safely approximating the value function</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Moore</forename><surname>Boyan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in Neural Information Processing Systems 7</title>
		<imprint>
			<publisher>Morgan Kaufmann</publisher>
			<date type="published" when="1995" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Tree-based batch mode reinforcement learning</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Ernst</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Wehenkel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Geurts</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Machine Learning Research</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="page" from="503" to="556" />
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Stable function approximation in dynamic programming</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">J</forename><surname>Gordon</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the ICML</title>
		<editor>A. Prieditis and S. Russell</editor>
		<meeting>the ICML<address><addrLine>San Francisco, CA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1995" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Self-improving reactive agents based on reinforcement learning, planning and teaching</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L.-J</forename><surname>Lin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Machine Learning</title>
		<imprint>
			<date type="published" when="1992" />
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="page" from="293" to="321" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Least-squares policy iteration</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Lagoudakis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Parr</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Machine Learning Research</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="page" from="1107" to="1149" />
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">A direct adaptive method for faster backpropagation learning: The RPROP algorithm</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Riedmiller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Braun</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the IEEE International Conference on Neural Networks (ICNN)</title>
		<editor>H. Ruspini</editor>
		<meeting>the IEEE International Conference on Neural Networks (ICNN)<address><addrLine>San Francisco</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1993" />
			<biblScope unit="page" from="586" to="591" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Concepts and facilities of a neural reinforcement learning control architecture for technical process control</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Riedmiller</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Neural Computing and Application</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="page" from="323" to="338" />
			<date type="published" when="2000" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">Reinforcement Learning</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">S</forename><surname>Sutton</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">G</forename><surname>Barto</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1998" />
			<publisher>MIT Press</publisher>
			<pubPlace>Cambridge, MA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Practical issues in temporal difference learning</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Tesauro</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Machine Learning</title>
		<imprint>
			<biblScope unit="issue">8</biblScope>
			<biblScope unit="page" from="257" to="277" />
			<date type="published" when="1992" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
